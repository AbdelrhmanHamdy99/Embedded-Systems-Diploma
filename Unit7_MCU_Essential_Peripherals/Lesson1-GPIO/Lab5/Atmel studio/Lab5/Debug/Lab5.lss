
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fe  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
		}
    }
}

void DIO_Init(void){
	DDRD = 0xFF; /*PortD as output*/
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
void DIO_Init(void);

int main(void)
{
	unsigned char n1 = 0, n2 = 0;
	unsigned short counter = 0;
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	70 e0       	ldi	r23, 0x00	; 0

void DIO_Init(void);

int main(void)
{
	unsigned char n1 = 0, n2 = 0;
  74:	e0 e0       	ldi	r30, 0x00	; 0
  76:	40 e0       	ldi	r20, 0x00	; 0
		
		/*to keep the numbers on the screen for 1 second*/
		counter++;
		if(counter == 50 ){ /*1Second*/
			counter = 0;
			n1 = (n1 + 1) % 10;
  78:	2a e0       	ldi	r18, 0x0A	; 10
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	02 c0       	rjmp	.+4      	; 0x82 <main+0x16>
		_delay_ms(10);      /*delay during multiplexing to balance flicker-free operation and smooth transitions.*/
		
		/*to keep the numbers on the screen for 1 second*/
		counter++;
		if(counter == 50 ){ /*1Second*/
			counter = 0;
  7e:	60 e0       	ldi	r22, 0x00	; 0
  80:	70 e0       	ldi	r23, 0x00	; 0
	unsigned short counter = 0;
    DIO_Init();
	while (1) 
    {
		/*display the tens digit*/
		RESET_BIT(PORTD,4); /*1. disable the units 7-Segment*/
  82:	94 98       	cbi	0x12, 4	; 18
		PORTD &= ~0xF;      /*2. remove the units digit*/
  84:	92 b3       	in	r25, 0x12	; 18
  86:	90 7f       	andi	r25, 0xF0	; 240
  88:	92 bb       	out	0x12, r25	; 18
		PORTD |= n2;        /*3. type the tens digit*/
  8a:	92 b3       	in	r25, 0x12	; 18
  8c:	9e 2b       	or	r25, r30
  8e:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,5);   /*4. enable the tens 7-Segment*/
  90:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e1       	ldi	r24, 0x1F	; 31
  94:	9e e4       	ldi	r25, 0x4E	; 78
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x2a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
		
		_delay_ms(10);      /*delay during multiplexing to balance flicker-free operation and smooth transitions.*/
		
		/*display the units digit*/
		RESET_BIT(PORTD,5); /*1. disable the tens 7-segment*/
  9e:	95 98       	cbi	0x12, 5	; 18
		PORTD &= ~0xF;      /*2. remove the tens digit*/
  a0:	92 b3       	in	r25, 0x12	; 18
  a2:	90 7f       	andi	r25, 0xF0	; 240
  a4:	92 bb       	out	0x12, r25	; 18
		PORTD |= n1;        /*3. type the units digit*/
  a6:	92 b3       	in	r25, 0x12	; 18
  a8:	94 2b       	or	r25, r20
  aa:	92 bb       	out	0x12, r25	; 18
		SET_BIT(PORTD,4);   /*4. enable the units 7-Segment*/
  ac:	94 9a       	sbi	0x12, 4	; 18
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	9e e4       	ldi	r25, 0x4E	; 78
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop

		_delay_ms(10);      /*delay during multiplexing to balance flicker-free operation and smooth transitions.*/
		
		/*to keep the numbers on the screen for 1 second*/
		counter++;
  ba:	6f 5f       	subi	r22, 0xFF	; 255
  bc:	7f 4f       	sbci	r23, 0xFF	; 255
		if(counter == 50 ){ /*1Second*/
  be:	62 33       	cpi	r22, 0x32	; 50
  c0:	71 05       	cpc	r23, r1
  c2:	f9 f6       	brne	.-66     	; 0x82 <main+0x16>
			counter = 0;
			n1 = (n1 + 1) % 10;
  c4:	84 2f       	mov	r24, r20
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	b9 01       	movw	r22, r18
  cc:	0e 94 75 00 	call	0xea	; 0xea <__divmodhi4>
  d0:	48 2f       	mov	r20, r24
			if(n1 == 0){
  d2:	81 11       	cpse	r24, r1
  d4:	d4 cf       	rjmp	.-88     	; 0x7e <main+0x12>
				n2 = (n2+1) %10;
  d6:	8e 2f       	mov	r24, r30
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	b9 01       	movw	r22, r18
  de:	0e 94 75 00 	call	0xea	; 0xea <__divmodhi4>
  e2:	e8 2f       	mov	r30, r24
		_delay_ms(10);      /*delay during multiplexing to balance flicker-free operation and smooth transitions.*/
		
		/*to keep the numbers on the screen for 1 second*/
		counter++;
		if(counter == 50 ){ /*1Second*/
			counter = 0;
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	cc cf       	rjmp	.-104    	; 0x82 <main+0x16>

000000ea <__divmodhi4>:
  ea:	97 fb       	bst	r25, 7
  ec:	07 2e       	mov	r0, r23
  ee:	16 f4       	brtc	.+4      	; 0xf4 <__divmodhi4+0xa>
  f0:	00 94       	com	r0
  f2:	07 d0       	rcall	.+14     	; 0x102 <__divmodhi4_neg1>
  f4:	77 fd       	sbrc	r23, 7
  f6:	09 d0       	rcall	.+18     	; 0x10a <__divmodhi4_neg2>
  f8:	0e 94 89 00 	call	0x112	; 0x112 <__udivmodhi4>
  fc:	07 fc       	sbrc	r0, 7
  fe:	05 d0       	rcall	.+10     	; 0x10a <__divmodhi4_neg2>
 100:	3e f4       	brtc	.+14     	; 0x110 <__divmodhi4_exit>

00000102 <__divmodhi4_neg1>:
 102:	90 95       	com	r25
 104:	81 95       	neg	r24
 106:	9f 4f       	sbci	r25, 0xFF	; 255
 108:	08 95       	ret

0000010a <__divmodhi4_neg2>:
 10a:	70 95       	com	r23
 10c:	61 95       	neg	r22
 10e:	7f 4f       	sbci	r23, 0xFF	; 255

00000110 <__divmodhi4_exit>:
 110:	08 95       	ret

00000112 <__udivmodhi4>:
 112:	aa 1b       	sub	r26, r26
 114:	bb 1b       	sub	r27, r27
 116:	51 e1       	ldi	r21, 0x11	; 17
 118:	07 c0       	rjmp	.+14     	; 0x128 <__udivmodhi4_ep>

0000011a <__udivmodhi4_loop>:
 11a:	aa 1f       	adc	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	a6 17       	cp	r26, r22
 120:	b7 07       	cpc	r27, r23
 122:	10 f0       	brcs	.+4      	; 0x128 <__udivmodhi4_ep>
 124:	a6 1b       	sub	r26, r22
 126:	b7 0b       	sbc	r27, r23

00000128 <__udivmodhi4_ep>:
 128:	88 1f       	adc	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	5a 95       	dec	r21
 12e:	a9 f7       	brne	.-22     	; 0x11a <__udivmodhi4_loop>
 130:	80 95       	com	r24
 132:	90 95       	com	r25
 134:	bc 01       	movw	r22, r24
 136:	cd 01       	movw	r24, r26
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
