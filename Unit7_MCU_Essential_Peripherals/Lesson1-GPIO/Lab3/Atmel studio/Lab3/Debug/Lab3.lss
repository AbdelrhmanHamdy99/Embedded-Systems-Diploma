
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066c  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c4  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ad  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000be  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_Init>:
		_delay_ms(5);
    }
}

void DIO_Init(void){
	DDRA=0xFF; /*Port A as output*/
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	/*Configure Port C pin0 as input with pull-up resistor*/
	RESET_BIT(DDRC, 0); /*Port C pin0 as input*/
  70:	a0 98       	cbi	0x14, 0	; 20
	SET_BIT(PORTC,0); /*enable pull-up resistor for Port C pin0*/
  72:	a8 9a       	sbi	0x15, 0	; 21
  74:	08 95       	ret

00000076 <main>:

void DIO_Init(void);

int main(void)
{
    DIO_Init();
  76:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_Init>
	unsigned char i = 0; 
    unsigned char flag = 0;
  7a:	80 e0       	ldi	r24, 0x00	; 0
void DIO_Init(void);

int main(void)
{
    DIO_Init();
	unsigned char i = 0; 
  7c:	90 e0       	ldi	r25, 0x00	; 0
					i = (i + 1) % n_bins;
					flag = 1;	
				}	
			}
		}else{
			flag = 0;
  7e:	20 e0       	ldi	r18, 0x00	; 0
		/*Push button is pressed*/
		if(!READ_BIT(PINC,0)){
			if(!flag){
				_delay_ms(20); /*for debouncing "Most mechanical switches bounce for 5–20 ms"*/
				if(!READ_BIT(PINC,0)){ /*Make sure the button is still pressed*/
					SET_BIT(PORTA,i); /*Turn on led(i)*/
  80:	e1 e0       	ldi	r30, 0x01	; 1
  82:	f0 e0       	ldi	r31, 0x00	; 0
					RESET_BIT(PORTA,(i-1U) % n_bins); /*Turn on led(i-1)*/
					i = (i + 1) % n_bins;
					flag = 1;	
  84:	a1 e0       	ldi	r26, 0x01	; 1
    unsigned char flag = 0;
	 
	while (1) 
    {
		/*Push button is pressed*/
		if(!READ_BIT(PINC,0)){
  86:	98 99       	sbic	0x13, 0	; 19
  88:	33 c0       	rjmp	.+102    	; 0xf0 <main+0x7a>
			if(!flag){
  8a:	81 11       	cpse	r24, r1
  8c:	32 c0       	rjmp	.+100    	; 0xf2 <main+0x7c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	cf e3       	ldi	r28, 0x3F	; 63
  90:	dc e9       	ldi	r29, 0x9C	; 156
  92:	21 97       	sbiw	r28, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x1c>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x22>
  98:	00 00       	nop
				_delay_ms(20); /*for debouncing "Most mechanical switches bounce for 5–20 ms"*/
				if(!READ_BIT(PINC,0)){ /*Make sure the button is still pressed*/
  9a:	98 99       	sbic	0x13, 0	; 19
  9c:	2a c0       	rjmp	.+84     	; 0xf2 <main+0x7c>
					SET_BIT(PORTA,i); /*Turn on led(i)*/
  9e:	3b b3       	in	r19, 0x1b	; 27
  a0:	49 2f       	mov	r20, r25
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	bf 01       	movw	r22, r30
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x36>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	9a 95       	dec	r25
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <main+0x32>
  b0:	cb 01       	movw	r24, r22
  b2:	83 2b       	or	r24, r19
  b4:	8b bb       	out	0x1b, r24	; 27
					RESET_BIT(PORTA,(i-1U) % n_bins); /*Turn on led(i-1)*/
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	ba 01       	movw	r22, r20
  ba:	61 50       	subi	r22, 0x01	; 1
  bc:	71 09       	sbc	r23, r1
  be:	67 70       	andi	r22, 0x07	; 7
  c0:	77 27       	eor	r23, r23
  c2:	ef 01       	movw	r28, r30
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x54>
  c6:	cc 0f       	add	r28, r28
  c8:	dd 1f       	adc	r29, r29
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x50>
  ce:	8c 2f       	mov	r24, r28
  d0:	80 95       	com	r24
  d2:	89 23       	and	r24, r25
  d4:	8b bb       	out	0x1b, r24	; 27
					i = (i + 1) % n_bins;
  d6:	ca 01       	movw	r24, r20
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	87 70       	andi	r24, 0x07	; 7
  dc:	90 78       	andi	r25, 0x80	; 128
  de:	99 23       	and	r25, r25
  e0:	24 f4       	brge	.+8      	; 0xea <main+0x74>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	88 6f       	ori	r24, 0xF8	; 248
  e6:	9f 6f       	ori	r25, 0xFF	; 255
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	98 2f       	mov	r25, r24
					flag = 1;	
  ec:	8a 2f       	mov	r24, r26
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0x7c>
				}	
			}
		}else{
			flag = 0;
  f0:	82 2f       	mov	r24, r18
  f2:	cf e0       	ldi	r28, 0x0F	; 15
  f4:	d7 e2       	ldi	r29, 0x27	; 39
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x80>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x86>
  fc:	00 00       	nop
  fe:	c3 cf       	rjmp	.-122    	; 0x86 <main+0x10>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
