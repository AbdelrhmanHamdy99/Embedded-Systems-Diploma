
Unit7_Lesson3_stm32f103c6tx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001490  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080015c0  080015c0  000115c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001794  08001794  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001794  08001794  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001794  08001794  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001794  08001794  00011794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800179c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001800  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001800  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002205  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000060b  00000000  00000000  00022292  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009d4  00000000  00000000  0002289d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000180  00000000  00000000  00023278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000138  00000000  00000000  000233f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002a3f  00000000  00000000  00023530  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000175e  00000000  00000000  00025f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009877  00000000  00000000  000276cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030f44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d74  00000000  00000000  00030fc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	080015a8 	.word	0x080015a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	080015a8 	.word	0x080015a8

08000170 <MCAL_GPIO_Init>:
 * 				  Can be a value of GPIO[A,B,C,D]
 * @Param [in]	- pinConfig: a pointer to a structure that contains pin configuration
 * @returnValue - None
 * Note			- None
 */
void MCAL_GPIO_Init(GPIO_T* GPIOx, GPIO_PinConfig_t* pinConfig){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	assert(pinConfig->pinNumber <= GPIO_PIN_15); /*GPIO has only 16 pin*/
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b0f      	cmp	r3, #15
 8000180:	d905      	bls.n	800018e <MCAL_GPIO_Init+0x1e>
 8000182:	4b69      	ldr	r3, [pc, #420]	; (8000328 <MCAL_GPIO_Init+0x1b8>)
 8000184:	4a69      	ldr	r2, [pc, #420]	; (800032c <MCAL_GPIO_Init+0x1bc>)
 8000186:	2114      	movs	r1, #20
 8000188:	4869      	ldr	r0, [pc, #420]	; (8000330 <MCAL_GPIO_Init+0x1c0>)
 800018a:	f000 fa89 	bl	80006a0 <__assert_func>
	volatile uint32_t *gpioConfigReg =  pinConfig->pinNumber < 8 ? &(GPIOx->CRL) : &(GPIOx->CRH);
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b07      	cmp	r3, #7
 8000194:	d801      	bhi.n	800019a <MCAL_GPIO_Init+0x2a>
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	e001      	b.n	800019e <MCAL_GPIO_Init+0x2e>
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	3304      	adds	r3, #4
 800019e:	60fb      	str	r3, [r7, #12]

	switch (pinConfig->pinMode) {
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	785b      	ldrb	r3, [r3, #1]
 80001a4:	2b07      	cmp	r3, #7
 80001a6:	f200 80b9 	bhi.w	800031c <MCAL_GPIO_Init+0x1ac>
 80001aa:	a201      	add	r2, pc, #4	; (adr r2, 80001b0 <MCAL_GPIO_Init+0x40>)
 80001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b0:	080001d1 	.word	0x080001d1
 80001b4:	080001d1 	.word	0x080001d1
 80001b8:	080001d1 	.word	0x080001d1
 80001bc:	080001d1 	.word	0x080001d1
 80001c0:	08000241 	.word	0x08000241
 80001c4:	08000241 	.word	0x08000241
 80001c8:	0800027f 	.word	0x0800027f
 80001cc:	080002cf 	.word	0x080002cf
	case GPIO_PIN_MODE_Out_PushPull:
	case GPIO_PIN_MODE_Out_OpenDrain:
	case GPIO_PIN_MODE_AF_Out_PushPull:
	case GPIO_PIN_MODE_AF_Out_OpenDrain:
		/*GPIO speed must be <= 50MHZ*/
		assert(pinConfig->pinOutSpeed <= GPIO_PIN_OUT_SPEED_50MHZ);
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	789b      	ldrb	r3, [r3, #2]
 80001d4:	2b03      	cmp	r3, #3
 80001d6:	d905      	bls.n	80001e4 <MCAL_GPIO_Init+0x74>
 80001d8:	4b56      	ldr	r3, [pc, #344]	; (8000334 <MCAL_GPIO_Init+0x1c4>)
 80001da:	4a54      	ldr	r2, [pc, #336]	; (800032c <MCAL_GPIO_Init+0x1bc>)
 80001dc:	211d      	movs	r1, #29
 80001de:	4854      	ldr	r0, [pc, #336]	; (8000330 <MCAL_GPIO_Init+0x1c0>)
 80001e0:	f000 fa5e 	bl	80006a0 <__assert_func>
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	7812      	ldrb	r2, [r2, #0]
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	0092      	lsls	r2, r2, #2
 80001f2:	210f      	movs	r1, #15
 80001f4:	fa01 f202 	lsl.w	r2, r1, r2
 80001f8:	43d2      	mvns	r2, r2
 80001fa:	401a      	ands	r2, r3
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	601a      	str	r2, [r3, #0]
		/*MODE[1:0]*/
		*gpioConfigReg |= (pinConfig->pinOutSpeed << ((pinConfig->pinNumber % GPIO_PIN_8) * 4));
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	7892      	ldrb	r2, [r2, #2]
 8000208:	4611      	mov	r1, r2
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	7812      	ldrb	r2, [r2, #0]
 800020e:	f002 0207 	and.w	r2, r2, #7
 8000212:	0092      	lsls	r2, r2, #2
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	431a      	orrs	r2, r3
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	601a      	str	r2, [r3, #0]
		/*CNF[1:0]*/
		*gpioConfigReg |= (pinConfig->pinMode << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	683a      	ldr	r2, [r7, #0]
 8000224:	7852      	ldrb	r2, [r2, #1]
 8000226:	4611      	mov	r1, r2
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	7812      	ldrb	r2, [r2, #0]
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	0092      	lsls	r2, r2, #2
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	431a      	orrs	r2, r3
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	601a      	str	r2, [r3, #0]
		break;
 800023e:	e06e      	b.n	800031e <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_Analog:
	case GPIO_PIN_MODE_IN_Floating:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	683a      	ldr	r2, [r7, #0]
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	f002 0207 	and.w	r2, r2, #7
 800024c:	0092      	lsls	r2, r2, #2
 800024e:	210f      	movs	r1, #15
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	43d2      	mvns	r2, r2
 8000256:	401a      	ands	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]
		/*CNF[1:0]*/
		*gpioConfigReg |= ((pinConfig->pinMode-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	683a      	ldr	r2, [r7, #0]
 8000262:	7852      	ldrb	r2, [r2, #1]
 8000264:	1f11      	subs	r1, r2, #4
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	7812      	ldrb	r2, [r2, #0]
 800026a:	f002 0207 	and.w	r2, r2, #7
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]
		break;
 800027c:	e04f      	b.n	800031e <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_PullDown:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	683a      	ldr	r2, [r7, #0]
 8000284:	7812      	ldrb	r2, [r2, #0]
 8000286:	f002 0207 	and.w	r2, r2, #7
 800028a:	0092      	lsls	r2, r2, #2
 800028c:	210f      	movs	r1, #15
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	43d2      	mvns	r2, r2
 8000294:	401a      	ands	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
		/*CNF[1:0] = 2 & ODR = 0*/
		*gpioConfigReg |= ((GPIO_PIN_MODE_IN_PullDown-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	683a      	ldr	r2, [r7, #0]
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	f002 0207 	and.w	r2, r2, #7
 80002a6:	0092      	lsls	r2, r2, #2
 80002a8:	2102      	movs	r1, #2
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	0092      	lsls	r2, r2, #2
 80002b0:	431a      	orrs	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
		GPIOx->ODR &= ~(1<<pinConfig->pinNumber);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	7812      	ldrb	r2, [r2, #0]
 80002be:	4611      	mov	r1, r2
 80002c0:	2201      	movs	r2, #1
 80002c2:	408a      	lsls	r2, r1
 80002c4:	43d2      	mvns	r2, r2
 80002c6:	401a      	ands	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
		break;
 80002cc:	e027      	b.n	800031e <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_PullUp:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	f002 0207 	and.w	r2, r2, #7
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	210f      	movs	r1, #15
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	43d2      	mvns	r2, r2
 80002e4:	401a      	ands	r2, r3
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	601a      	str	r2, [r3, #0]
		/*CNF[1:0] = 2 & ODR = 1*/
		*gpioConfigReg |= ((GPIO_PIN_MODE_IN_PullDown-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	f002 0207 	and.w	r2, r2, #7
 80002f6:	0092      	lsls	r2, r2, #2
 80002f8:	2102      	movs	r1, #2
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	0092      	lsls	r2, r2, #2
 8000300:	431a      	orrs	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	601a      	str	r2, [r3, #0]
		GPIOx->ODR |= (1<<pinConfig->pinNumber);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	4611      	mov	r1, r2
 8000310:	2201      	movs	r2, #1
 8000312:	408a      	lsls	r2, r1
 8000314:	431a      	orrs	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	60da      	str	r2, [r3, #12]
		break;
 800031a:	e000      	b.n	800031e <MCAL_GPIO_Init+0x1ae>
	default:
		break;
 800031c:	bf00      	nop
	}

}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	080015c0 	.word	0x080015c0
 800032c:	08001688 	.word	0x08001688
 8000330:	080015e4 	.word	0x080015e4
 8000334:	0800161c 	.word	0x0800161c

08000338 <MCAL_GPIO_ReadPin>:
 * 				  Can be a value of @ref GPIO_PIN_define
 * @returnValue	- the value of the required pin
 * 				  Can be a value of @ref GPIO_PIN_Value_define
 * Notes		- None
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_T* GPIOx,uint8_t pinNumber){
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
	assert(pinNumber <= GPIO_PIN_15);
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	2b0f      	cmp	r3, #15
 8000348:	d905      	bls.n	8000356 <MCAL_GPIO_ReadPin+0x1e>
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MCAL_GPIO_ReadPin+0x38>)
 800034c:	4a09      	ldr	r2, [pc, #36]	; (8000374 <MCAL_GPIO_ReadPin+0x3c>)
 800034e:	2166      	movs	r1, #102	; 0x66
 8000350:	4809      	ldr	r0, [pc, #36]	; (8000378 <MCAL_GPIO_ReadPin+0x40>)
 8000352:	f000 f9a5 	bl	80006a0 <__assert_func>
	return (GPIOx->IDR >> pinNumber) & GPIO_PIN_Value_High;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	fa22 f303 	lsr.w	r3, r2, r3
 8000360:	b2db      	uxtb	r3, r3
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
}
 8000368:	4618      	mov	r0, r3
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	08001650 	.word	0x08001650
 8000374:	08001698 	.word	0x08001698
 8000378:	080015e4 	.word	0x080015e4

0800037c <MCAL_GPIO_TogglePin>:
 * @Param [in]	- pinNumber : defines the pin to be toggled
 * 				  Can be a value of @ref GPIO_PIN_define
 * @returnValue	- None
 * Notes		- None
 */
void MCAL_GPIO_TogglePin(GPIO_T* GPIOx,uint8_t pinNumber){
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
	assert(pinNumber <= GPIO_PIN_15);
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b0f      	cmp	r3, #15
 800038c:	d905      	bls.n	800039a <MCAL_GPIO_TogglePin+0x1e>
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MCAL_GPIO_TogglePin+0x38>)
 8000390:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <MCAL_GPIO_TogglePin+0x3c>)
 8000392:	21a3      	movs	r1, #163	; 0xa3
 8000394:	4809      	ldr	r0, [pc, #36]	; (80003bc <MCAL_GPIO_TogglePin+0x40>)
 8000396:	f000 f983 	bl	80006a0 <__assert_func>
	GPIOx->ODR ^= (1<<pinNumber);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	78fa      	ldrb	r2, [r7, #3]
 80003a0:	2101      	movs	r1, #1
 80003a2:	fa01 f202 	lsl.w	r2, r1, r2
 80003a6:	405a      	eors	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	08001650 	.word	0x08001650
 80003b8:	080016ac 	.word	0x080016ac
 80003bc:	080015e4 	.word	0x080015e4

080003c0 <main>:
#include "stm32f103x6.h"

void GPIO_Init(void);
void Clock_Init(void);
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	Clock_Init();
 80003c6:	f000 f86d 	bl	80004a4 <Clock_Init>
	GPIO_Init();
 80003ca:	f000 f837 	bl	800043c <GPIO_Init>
	uint8_t flag1 = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	71fb      	strb	r3, [r7, #7]
	/* Loop forever */
	for(;;){
		/*We Want to avoid starvation*/
		/*SW1 at PA1 pressed*/
		if((MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_Value_Low) && !flag1){
 80003d2:	2101      	movs	r1, #1
 80003d4:	4817      	ldr	r0, [pc, #92]	; (8000434 <main+0x74>)
 80003d6:	f7ff ffaf 	bl	8000338 <MCAL_GPIO_ReadPin>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d108      	bne.n	80003f2 <main+0x32>
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d105      	bne.n	80003f2 <main+0x32>
			/*Toggle led on portB1*/
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80003e6:	2101      	movs	r1, #1
 80003e8:	4813      	ldr	r0, [pc, #76]	; (8000438 <main+0x78>)
 80003ea:	f7ff ffc7 	bl	800037c <MCAL_GPIO_TogglePin>
			/*Single Pressing*/
			flag1 = 1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	71fb      	strb	r3, [r7, #7]
		}
		/*SW2 at PA13 pressed*/
		/*Multi Pressing*/
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_Value_High){
 80003f2:	210d      	movs	r1, #13
 80003f4:	480f      	ldr	r0, [pc, #60]	; (8000434 <main+0x74>)
 80003f6:	f7ff ff9f 	bl	8000338 <MCAL_GPIO_ReadPin>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d103      	bne.n	8000408 <main+0x48>
			/*Toggle led on portB13*/
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000400:	210d      	movs	r1, #13
 8000402:	480d      	ldr	r0, [pc, #52]	; (8000438 <main+0x78>)
 8000404:	f7ff ffba 	bl	800037c <MCAL_GPIO_TogglePin>
		}
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_Value_High){
 8000408:	2101      	movs	r1, #1
 800040a:	480a      	ldr	r0, [pc, #40]	; (8000434 <main+0x74>)
 800040c:	f7ff ff94 	bl	8000338 <MCAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	2b01      	cmp	r3, #1
 8000414:	d101      	bne.n	800041a <main+0x5a>
			flag1 = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	71fb      	strb	r3, [r7, #7]
		}

		for(uint32_t i = 0; i < 20000; i++); /*delay to observe changes*/
 800041a:	2300      	movs	r3, #0
 800041c:	603b      	str	r3, [r7, #0]
 800041e:	e002      	b.n	8000426 <main+0x66>
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	3301      	adds	r3, #1
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800042c:	4293      	cmp	r3, r2
 800042e:	d9f7      	bls.n	8000420 <main+0x60>
		if((MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_Value_Low) && !flag1){
 8000430:	e7cf      	b.n	80003d2 <main+0x12>
 8000432:	bf00      	nop
 8000434:	40010800 	.word	0x40010800
 8000438:	40010c00 	.word	0x40010c00

0800043c <GPIO_Init>:
	}
}
void GPIO_Init(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t Piny; /*a structure to hold configurations of pins*/

	/*Configure PORTA PIN1 as floating input pin*/
	/*Which is the default reset value*/
	Piny.pinNumber = GPIO_PIN_1;
 8000442:	2301      	movs	r3, #1
 8000444:	713b      	strb	r3, [r7, #4]
	Piny.pinMode   = GPIO_PIN_MODE_IN_Floating;
 8000446:	2305      	movs	r3, #5
 8000448:	717b      	strb	r3, [r7, #5]
	MCAL_GPIO_Init(GPIOA, &Piny);
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4619      	mov	r1, r3
 800044e:	4813      	ldr	r0, [pc, #76]	; (800049c <GPIO_Init+0x60>)
 8000450:	f7ff fe8e 	bl	8000170 <MCAL_GPIO_Init>

	/*Configure PORTA PIN13 as floating input pin*/
	/*Which is the default reset value*/
	Piny.pinNumber = GPIO_PIN_13;
 8000454:	230d      	movs	r3, #13
 8000456:	713b      	strb	r3, [r7, #4]
	Piny.pinMode   = GPIO_PIN_MODE_IN_Floating;
 8000458:	2305      	movs	r3, #5
 800045a:	717b      	strb	r3, [r7, #5]
	MCAL_GPIO_Init(GPIOA, &Piny);
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4619      	mov	r1, r3
 8000460:	480e      	ldr	r0, [pc, #56]	; (800049c <GPIO_Init+0x60>)
 8000462:	f7ff fe85 	bl	8000170 <MCAL_GPIO_Init>

	/*Configure PORTB PIN1 as Push-Pull output pin*/
	Piny.pinNumber = GPIO_PIN_1;
 8000466:	2301      	movs	r3, #1
 8000468:	713b      	strb	r3, [r7, #4]
	Piny.pinMode   = GPIO_PIN_MODE_Out_PushPull;
 800046a:	2300      	movs	r3, #0
 800046c:	717b      	strb	r3, [r7, #5]
	Piny.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 800046e:	2301      	movs	r3, #1
 8000470:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &Piny);
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4619      	mov	r1, r3
 8000476:	480a      	ldr	r0, [pc, #40]	; (80004a0 <GPIO_Init+0x64>)
 8000478:	f7ff fe7a 	bl	8000170 <MCAL_GPIO_Init>

	/*Configure PORTB PIN13 as Push-Pull output pin*/
	Piny.pinNumber = GPIO_PIN_13;
 800047c:	230d      	movs	r3, #13
 800047e:	713b      	strb	r3, [r7, #4]
	Piny.pinMode   = GPIO_PIN_MODE_Out_PushPull;
 8000480:	2300      	movs	r3, #0
 8000482:	717b      	strb	r3, [r7, #5]
	Piny.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 8000484:	2301      	movs	r3, #1
 8000486:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &Piny);
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	4619      	mov	r1, r3
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <GPIO_Init+0x64>)
 800048e:	f7ff fe6f 	bl	8000170 <MCAL_GPIO_Init>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40010800 	.word	0x40010800
 80004a0:	40010c00 	.word	0x40010c00

080004a4 <Clock_Init>:

void Clock_Init(void){
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	/*enable clock for ports A and B*/
	GPIOA_Clock_Enable;
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <Clock_Init+0x24>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <Clock_Init+0x24>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
	GPIOB_Clock_Enable;
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <Clock_Init+0x24>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a03      	ldr	r2, [pc, #12]	; (80004c8 <Clock_Init+0x24>)
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	6193      	str	r3, [r2, #24]
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000

080004cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	return 1;
 80004d0:	2301      	movs	r3, #1
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <_kill>:

int _kill(int pid, int sig)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80004e4:	f000 f8fa 	bl	80006dc <__errno>
 80004e8:	4602      	mov	r2, r0
 80004ea:	2316      	movs	r3, #22
 80004ec:	6013      	str	r3, [r2, #0]
	return -1;
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_exit>:

void _exit (int status)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000502:	f04f 31ff 	mov.w	r1, #4294967295
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffe7 	bl	80004da <_kill>
	while (1) {}		/* Make sure we hang here */
 800050c:	e7fe      	b.n	800050c <_exit+0x12>

0800050e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b086      	sub	sp, #24
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e00a      	b.n	8000536 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000520:	f3af 8000 	nop.w
 8000524:	4601      	mov	r1, r0
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	60ba      	str	r2, [r7, #8]
 800052c:	b2ca      	uxtb	r2, r1
 800052e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	429a      	cmp	r2, r3
 800053c:	dbf0      	blt.n	8000520 <_read+0x12>
	}

return len;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e009      	b.n	800056e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	60ba      	str	r2, [r7, #8]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3301      	adds	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbf1      	blt.n	800055a <_write+0x12>
	}
	return len;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <_close>:

int _close(int file)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	return -1;
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a6:	605a      	str	r2, [r3, #4]
	return 0;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <_isatty>:

int _isatty(int file)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	return 1;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	return 0;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <_sbrk+0x5c>)
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <_sbrk+0x60>)
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <_sbrk+0x64>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <_sbrk+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	429a      	cmp	r2, r3
 800060e:	d207      	bcs.n	8000620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000610:	f000 f864 	bl	80006dc <__errno>
 8000614:	4602      	mov	r2, r0
 8000616:	230c      	movs	r3, #12
 8000618:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	e009      	b.n	8000634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <_sbrk+0x64>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	4a05      	ldr	r2, [pc, #20]	; (8000644 <_sbrk+0x64>)
 8000630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20002800 	.word	0x20002800
 8000640:	00000400 	.word	0x00000400
 8000644:	20000080 	.word	0x20000080
 8000648:	20000090 	.word	0x20000090

0800064c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000650:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopForever+0x6>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopForever+0xe>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopForever+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067a:	f000 f847 	bl	800070c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fe9f 	bl	80003c0 <main>

08000682 <LoopForever>:

LoopForever:
    b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   r0, =_estack
 8000684:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000690:	0800179c 	.word	0x0800179c
  ldr r2, =_sbss
 8000694:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000698:	20000090 	.word	0x20000090

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <__assert_func>:
 80006a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80006a2:	461c      	mov	r4, r3
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <__assert_func+0x2c>)
 80006a6:	4605      	mov	r5, r0
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68d8      	ldr	r0, [r3, #12]
 80006ac:	b152      	cbz	r2, 80006c4 <__assert_func+0x24>
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <__assert_func+0x30>)
 80006b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80006b4:	9100      	str	r1, [sp, #0]
 80006b6:	462b      	mov	r3, r5
 80006b8:	4622      	mov	r2, r4
 80006ba:	4906      	ldr	r1, [pc, #24]	; (80006d4 <__assert_func+0x34>)
 80006bc:	f000 f814 	bl	80006e8 <fiprintf>
 80006c0:	f000 fbd6 	bl	8000e70 <abort>
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__assert_func+0x38>)
 80006c6:	461a      	mov	r2, r3
 80006c8:	e7f2      	b.n	80006b0 <__assert_func+0x10>
 80006ca:	bf00      	nop
 80006cc:	20000000 	.word	0x20000000
 80006d0:	080016c0 	.word	0x080016c0
 80006d4:	080016cd 	.word	0x080016cd
 80006d8:	080016fb 	.word	0x080016fb

080006dc <__errno>:
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <__errno+0x8>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000

080006e8 <fiprintf>:
 80006e8:	b40e      	push	{r1, r2, r3}
 80006ea:	b503      	push	{r0, r1, lr}
 80006ec:	4601      	mov	r1, r0
 80006ee:	ab03      	add	r3, sp, #12
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <fiprintf+0x20>)
 80006f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80006f6:	6800      	ldr	r0, [r0, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	f000 f85b 	bl	80007b4 <_vfiprintf_r>
 80006fe:	b002      	add	sp, #8
 8000700:	f85d eb04 	ldr.w	lr, [sp], #4
 8000704:	b003      	add	sp, #12
 8000706:	4770      	bx	lr
 8000708:	20000000 	.word	0x20000000

0800070c <__libc_init_array>:
 800070c:	b570      	push	{r4, r5, r6, lr}
 800070e:	2500      	movs	r5, #0
 8000710:	4e0c      	ldr	r6, [pc, #48]	; (8000744 <__libc_init_array+0x38>)
 8000712:	4c0d      	ldr	r4, [pc, #52]	; (8000748 <__libc_init_array+0x3c>)
 8000714:	1ba4      	subs	r4, r4, r6
 8000716:	10a4      	asrs	r4, r4, #2
 8000718:	42a5      	cmp	r5, r4
 800071a:	d109      	bne.n	8000730 <__libc_init_array+0x24>
 800071c:	f000 ff44 	bl	80015a8 <_init>
 8000720:	2500      	movs	r5, #0
 8000722:	4e0a      	ldr	r6, [pc, #40]	; (800074c <__libc_init_array+0x40>)
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <__libc_init_array+0x44>)
 8000726:	1ba4      	subs	r4, r4, r6
 8000728:	10a4      	asrs	r4, r4, #2
 800072a:	42a5      	cmp	r5, r4
 800072c:	d105      	bne.n	800073a <__libc_init_array+0x2e>
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000734:	4798      	blx	r3
 8000736:	3501      	adds	r5, #1
 8000738:	e7ee      	b.n	8000718 <__libc_init_array+0xc>
 800073a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800073e:	4798      	blx	r3
 8000740:	3501      	adds	r5, #1
 8000742:	e7f2      	b.n	800072a <__libc_init_array+0x1e>
 8000744:	08001794 	.word	0x08001794
 8000748:	08001794 	.word	0x08001794
 800074c:	08001794 	.word	0x08001794
 8000750:	08001798 	.word	0x08001798

08000754 <memset>:
 8000754:	4603      	mov	r3, r0
 8000756:	4402      	add	r2, r0
 8000758:	4293      	cmp	r3, r2
 800075a:	d100      	bne.n	800075e <memset+0xa>
 800075c:	4770      	bx	lr
 800075e:	f803 1b01 	strb.w	r1, [r3], #1
 8000762:	e7f9      	b.n	8000758 <memset+0x4>

08000764 <__sfputc_r>:
 8000764:	6893      	ldr	r3, [r2, #8]
 8000766:	b410      	push	{r4}
 8000768:	3b01      	subs	r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	6093      	str	r3, [r2, #8]
 800076e:	da07      	bge.n	8000780 <__sfputc_r+0x1c>
 8000770:	6994      	ldr	r4, [r2, #24]
 8000772:	42a3      	cmp	r3, r4
 8000774:	db01      	blt.n	800077a <__sfputc_r+0x16>
 8000776:	290a      	cmp	r1, #10
 8000778:	d102      	bne.n	8000780 <__sfputc_r+0x1c>
 800077a:	bc10      	pop	{r4}
 800077c:	f000 bab8 	b.w	8000cf0 <__swbuf_r>
 8000780:	6813      	ldr	r3, [r2, #0]
 8000782:	1c58      	adds	r0, r3, #1
 8000784:	6010      	str	r0, [r2, #0]
 8000786:	7019      	strb	r1, [r3, #0]
 8000788:	4608      	mov	r0, r1
 800078a:	bc10      	pop	{r4}
 800078c:	4770      	bx	lr

0800078e <__sfputs_r>:
 800078e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000790:	4606      	mov	r6, r0
 8000792:	460f      	mov	r7, r1
 8000794:	4614      	mov	r4, r2
 8000796:	18d5      	adds	r5, r2, r3
 8000798:	42ac      	cmp	r4, r5
 800079a:	d101      	bne.n	80007a0 <__sfputs_r+0x12>
 800079c:	2000      	movs	r0, #0
 800079e:	e007      	b.n	80007b0 <__sfputs_r+0x22>
 80007a0:	463a      	mov	r2, r7
 80007a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80007a6:	4630      	mov	r0, r6
 80007a8:	f7ff ffdc 	bl	8000764 <__sfputc_r>
 80007ac:	1c43      	adds	r3, r0, #1
 80007ae:	d1f3      	bne.n	8000798 <__sfputs_r+0xa>
 80007b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080007b4 <_vfiprintf_r>:
 80007b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007b8:	460c      	mov	r4, r1
 80007ba:	b09d      	sub	sp, #116	; 0x74
 80007bc:	4617      	mov	r7, r2
 80007be:	461d      	mov	r5, r3
 80007c0:	4606      	mov	r6, r0
 80007c2:	b118      	cbz	r0, 80007cc <_vfiprintf_r+0x18>
 80007c4:	6983      	ldr	r3, [r0, #24]
 80007c6:	b90b      	cbnz	r3, 80007cc <_vfiprintf_r+0x18>
 80007c8:	f000 fc4a 	bl	8001060 <__sinit>
 80007cc:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <_vfiprintf_r+0x20c>)
 80007ce:	429c      	cmp	r4, r3
 80007d0:	d158      	bne.n	8000884 <_vfiprintf_r+0xd0>
 80007d2:	6874      	ldr	r4, [r6, #4]
 80007d4:	89a3      	ldrh	r3, [r4, #12]
 80007d6:	0718      	lsls	r0, r3, #28
 80007d8:	d55e      	bpl.n	8000898 <_vfiprintf_r+0xe4>
 80007da:	6923      	ldr	r3, [r4, #16]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d05b      	beq.n	8000898 <_vfiprintf_r+0xe4>
 80007e0:	2300      	movs	r3, #0
 80007e2:	9309      	str	r3, [sp, #36]	; 0x24
 80007e4:	2320      	movs	r3, #32
 80007e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80007ea:	2330      	movs	r3, #48	; 0x30
 80007ec:	f04f 0b01 	mov.w	fp, #1
 80007f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80007f4:	9503      	str	r5, [sp, #12]
 80007f6:	46b8      	mov	r8, r7
 80007f8:	4645      	mov	r5, r8
 80007fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80007fe:	b10b      	cbz	r3, 8000804 <_vfiprintf_r+0x50>
 8000800:	2b25      	cmp	r3, #37	; 0x25
 8000802:	d154      	bne.n	80008ae <_vfiprintf_r+0xfa>
 8000804:	ebb8 0a07 	subs.w	sl, r8, r7
 8000808:	d00b      	beq.n	8000822 <_vfiprintf_r+0x6e>
 800080a:	4653      	mov	r3, sl
 800080c:	463a      	mov	r2, r7
 800080e:	4621      	mov	r1, r4
 8000810:	4630      	mov	r0, r6
 8000812:	f7ff ffbc 	bl	800078e <__sfputs_r>
 8000816:	3001      	adds	r0, #1
 8000818:	f000 80c2 	beq.w	80009a0 <_vfiprintf_r+0x1ec>
 800081c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800081e:	4453      	add	r3, sl
 8000820:	9309      	str	r3, [sp, #36]	; 0x24
 8000822:	f898 3000 	ldrb.w	r3, [r8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	f000 80ba 	beq.w	80009a0 <_vfiprintf_r+0x1ec>
 800082c:	2300      	movs	r3, #0
 800082e:	f04f 32ff 	mov.w	r2, #4294967295
 8000832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000836:	9304      	str	r3, [sp, #16]
 8000838:	9307      	str	r3, [sp, #28]
 800083a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800083e:	931a      	str	r3, [sp, #104]	; 0x68
 8000840:	46a8      	mov	r8, r5
 8000842:	2205      	movs	r2, #5
 8000844:	f818 1b01 	ldrb.w	r1, [r8], #1
 8000848:	485e      	ldr	r0, [pc, #376]	; (80009c4 <_vfiprintf_r+0x210>)
 800084a:	f000 fcf7 	bl	800123c <memchr>
 800084e:	9b04      	ldr	r3, [sp, #16]
 8000850:	bb78      	cbnz	r0, 80008b2 <_vfiprintf_r+0xfe>
 8000852:	06d9      	lsls	r1, r3, #27
 8000854:	bf44      	itt	mi
 8000856:	2220      	movmi	r2, #32
 8000858:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800085c:	071a      	lsls	r2, r3, #28
 800085e:	bf44      	itt	mi
 8000860:	222b      	movmi	r2, #43	; 0x2b
 8000862:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000866:	782a      	ldrb	r2, [r5, #0]
 8000868:	2a2a      	cmp	r2, #42	; 0x2a
 800086a:	d02a      	beq.n	80008c2 <_vfiprintf_r+0x10e>
 800086c:	46a8      	mov	r8, r5
 800086e:	2000      	movs	r0, #0
 8000870:	250a      	movs	r5, #10
 8000872:	9a07      	ldr	r2, [sp, #28]
 8000874:	4641      	mov	r1, r8
 8000876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800087a:	3b30      	subs	r3, #48	; 0x30
 800087c:	2b09      	cmp	r3, #9
 800087e:	d969      	bls.n	8000954 <_vfiprintf_r+0x1a0>
 8000880:	b360      	cbz	r0, 80008dc <_vfiprintf_r+0x128>
 8000882:	e024      	b.n	80008ce <_vfiprintf_r+0x11a>
 8000884:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <_vfiprintf_r+0x214>)
 8000886:	429c      	cmp	r4, r3
 8000888:	d101      	bne.n	800088e <_vfiprintf_r+0xda>
 800088a:	68b4      	ldr	r4, [r6, #8]
 800088c:	e7a2      	b.n	80007d4 <_vfiprintf_r+0x20>
 800088e:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <_vfiprintf_r+0x218>)
 8000890:	429c      	cmp	r4, r3
 8000892:	bf08      	it	eq
 8000894:	68f4      	ldreq	r4, [r6, #12]
 8000896:	e79d      	b.n	80007d4 <_vfiprintf_r+0x20>
 8000898:	4621      	mov	r1, r4
 800089a:	4630      	mov	r0, r6
 800089c:	f000 fa7a 	bl	8000d94 <__swsetup_r>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d09d      	beq.n	80007e0 <_vfiprintf_r+0x2c>
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
 80008a8:	b01d      	add	sp, #116	; 0x74
 80008aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008ae:	46a8      	mov	r8, r5
 80008b0:	e7a2      	b.n	80007f8 <_vfiprintf_r+0x44>
 80008b2:	4a44      	ldr	r2, [pc, #272]	; (80009c4 <_vfiprintf_r+0x210>)
 80008b4:	4645      	mov	r5, r8
 80008b6:	1a80      	subs	r0, r0, r2
 80008b8:	fa0b f000 	lsl.w	r0, fp, r0
 80008bc:	4318      	orrs	r0, r3
 80008be:	9004      	str	r0, [sp, #16]
 80008c0:	e7be      	b.n	8000840 <_vfiprintf_r+0x8c>
 80008c2:	9a03      	ldr	r2, [sp, #12]
 80008c4:	1d11      	adds	r1, r2, #4
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	9103      	str	r1, [sp, #12]
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	db01      	blt.n	80008d2 <_vfiprintf_r+0x11e>
 80008ce:	9207      	str	r2, [sp, #28]
 80008d0:	e004      	b.n	80008dc <_vfiprintf_r+0x128>
 80008d2:	4252      	negs	r2, r2
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	9207      	str	r2, [sp, #28]
 80008da:	9304      	str	r3, [sp, #16]
 80008dc:	f898 3000 	ldrb.w	r3, [r8]
 80008e0:	2b2e      	cmp	r3, #46	; 0x2e
 80008e2:	d10e      	bne.n	8000902 <_vfiprintf_r+0x14e>
 80008e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80008e8:	2b2a      	cmp	r3, #42	; 0x2a
 80008ea:	d138      	bne.n	800095e <_vfiprintf_r+0x1aa>
 80008ec:	9b03      	ldr	r3, [sp, #12]
 80008ee:	f108 0802 	add.w	r8, r8, #2
 80008f2:	1d1a      	adds	r2, r3, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	9203      	str	r2, [sp, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bfb8      	it	lt
 80008fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8000900:	9305      	str	r3, [sp, #20]
 8000902:	4d33      	ldr	r5, [pc, #204]	; (80009d0 <_vfiprintf_r+0x21c>)
 8000904:	2203      	movs	r2, #3
 8000906:	f898 1000 	ldrb.w	r1, [r8]
 800090a:	4628      	mov	r0, r5
 800090c:	f000 fc96 	bl	800123c <memchr>
 8000910:	b140      	cbz	r0, 8000924 <_vfiprintf_r+0x170>
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	1b40      	subs	r0, r0, r5
 8000916:	fa03 f000 	lsl.w	r0, r3, r0
 800091a:	9b04      	ldr	r3, [sp, #16]
 800091c:	f108 0801 	add.w	r8, r8, #1
 8000920:	4303      	orrs	r3, r0
 8000922:	9304      	str	r3, [sp, #16]
 8000924:	f898 1000 	ldrb.w	r1, [r8]
 8000928:	2206      	movs	r2, #6
 800092a:	482a      	ldr	r0, [pc, #168]	; (80009d4 <_vfiprintf_r+0x220>)
 800092c:	f108 0701 	add.w	r7, r8, #1
 8000930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000934:	f000 fc82 	bl	800123c <memchr>
 8000938:	2800      	cmp	r0, #0
 800093a:	d037      	beq.n	80009ac <_vfiprintf_r+0x1f8>
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <_vfiprintf_r+0x224>)
 800093e:	bb1b      	cbnz	r3, 8000988 <_vfiprintf_r+0x1d4>
 8000940:	9b03      	ldr	r3, [sp, #12]
 8000942:	3307      	adds	r3, #7
 8000944:	f023 0307 	bic.w	r3, r3, #7
 8000948:	3308      	adds	r3, #8
 800094a:	9303      	str	r3, [sp, #12]
 800094c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800094e:	444b      	add	r3, r9
 8000950:	9309      	str	r3, [sp, #36]	; 0x24
 8000952:	e750      	b.n	80007f6 <_vfiprintf_r+0x42>
 8000954:	fb05 3202 	mla	r2, r5, r2, r3
 8000958:	2001      	movs	r0, #1
 800095a:	4688      	mov	r8, r1
 800095c:	e78a      	b.n	8000874 <_vfiprintf_r+0xc0>
 800095e:	2300      	movs	r3, #0
 8000960:	250a      	movs	r5, #10
 8000962:	4619      	mov	r1, r3
 8000964:	f108 0801 	add.w	r8, r8, #1
 8000968:	9305      	str	r3, [sp, #20]
 800096a:	4640      	mov	r0, r8
 800096c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000970:	3a30      	subs	r2, #48	; 0x30
 8000972:	2a09      	cmp	r2, #9
 8000974:	d903      	bls.n	800097e <_vfiprintf_r+0x1ca>
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0c3      	beq.n	8000902 <_vfiprintf_r+0x14e>
 800097a:	9105      	str	r1, [sp, #20]
 800097c:	e7c1      	b.n	8000902 <_vfiprintf_r+0x14e>
 800097e:	fb05 2101 	mla	r1, r5, r1, r2
 8000982:	2301      	movs	r3, #1
 8000984:	4680      	mov	r8, r0
 8000986:	e7f0      	b.n	800096a <_vfiprintf_r+0x1b6>
 8000988:	ab03      	add	r3, sp, #12
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	4622      	mov	r2, r4
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_vfiprintf_r+0x228>)
 8000990:	a904      	add	r1, sp, #16
 8000992:	4630      	mov	r0, r6
 8000994:	f3af 8000 	nop.w
 8000998:	f1b0 3fff 	cmp.w	r0, #4294967295
 800099c:	4681      	mov	r9, r0
 800099e:	d1d5      	bne.n	800094c <_vfiprintf_r+0x198>
 80009a0:	89a3      	ldrh	r3, [r4, #12]
 80009a2:	065b      	lsls	r3, r3, #25
 80009a4:	f53f af7e 	bmi.w	80008a4 <_vfiprintf_r+0xf0>
 80009a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80009aa:	e77d      	b.n	80008a8 <_vfiprintf_r+0xf4>
 80009ac:	ab03      	add	r3, sp, #12
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	4622      	mov	r2, r4
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <_vfiprintf_r+0x228>)
 80009b4:	a904      	add	r1, sp, #16
 80009b6:	4630      	mov	r0, r6
 80009b8:	f000 f888 	bl	8000acc <_printf_i>
 80009bc:	e7ec      	b.n	8000998 <_vfiprintf_r+0x1e4>
 80009be:	bf00      	nop
 80009c0:	08001754 	.word	0x08001754
 80009c4:	08001700 	.word	0x08001700
 80009c8:	08001774 	.word	0x08001774
 80009cc:	08001734 	.word	0x08001734
 80009d0:	08001706 	.word	0x08001706
 80009d4:	0800170a 	.word	0x0800170a
 80009d8:	00000000 	.word	0x00000000
 80009dc:	0800078f 	.word	0x0800078f

080009e0 <_printf_common>:
 80009e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e4:	4691      	mov	r9, r2
 80009e6:	461f      	mov	r7, r3
 80009e8:	688a      	ldr	r2, [r1, #8]
 80009ea:	690b      	ldr	r3, [r1, #16]
 80009ec:	4606      	mov	r6, r0
 80009ee:	4293      	cmp	r3, r2
 80009f0:	bfb8      	it	lt
 80009f2:	4613      	movlt	r3, r2
 80009f4:	f8c9 3000 	str.w	r3, [r9]
 80009f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80009fc:	460c      	mov	r4, r1
 80009fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000a02:	b112      	cbz	r2, 8000a0a <_printf_common+0x2a>
 8000a04:	3301      	adds	r3, #1
 8000a06:	f8c9 3000 	str.w	r3, [r9]
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	0699      	lsls	r1, r3, #26
 8000a0e:	bf42      	ittt	mi
 8000a10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8000a14:	3302      	addmi	r3, #2
 8000a16:	f8c9 3000 	strmi.w	r3, [r9]
 8000a1a:	6825      	ldr	r5, [r4, #0]
 8000a1c:	f015 0506 	ands.w	r5, r5, #6
 8000a20:	d107      	bne.n	8000a32 <_printf_common+0x52>
 8000a22:	f104 0a19 	add.w	sl, r4, #25
 8000a26:	68e3      	ldr	r3, [r4, #12]
 8000a28:	f8d9 2000 	ldr.w	r2, [r9]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	42ab      	cmp	r3, r5
 8000a30:	dc29      	bgt.n	8000a86 <_printf_common+0xa6>
 8000a32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000a36:	6822      	ldr	r2, [r4, #0]
 8000a38:	3300      	adds	r3, #0
 8000a3a:	bf18      	it	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	0692      	lsls	r2, r2, #26
 8000a40:	d42e      	bmi.n	8000aa0 <_printf_common+0xc0>
 8000a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000a46:	4639      	mov	r1, r7
 8000a48:	4630      	mov	r0, r6
 8000a4a:	47c0      	blx	r8
 8000a4c:	3001      	adds	r0, #1
 8000a4e:	d021      	beq.n	8000a94 <_printf_common+0xb4>
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	68e5      	ldr	r5, [r4, #12]
 8000a54:	f003 0306 	and.w	r3, r3, #6
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	bf18      	it	ne
 8000a5c:	2500      	movne	r5, #0
 8000a5e:	f8d9 2000 	ldr.w	r2, [r9]
 8000a62:	f04f 0900 	mov.w	r9, #0
 8000a66:	bf08      	it	eq
 8000a68:	1aad      	subeq	r5, r5, r2
 8000a6a:	68a3      	ldr	r3, [r4, #8]
 8000a6c:	6922      	ldr	r2, [r4, #16]
 8000a6e:	bf08      	it	eq
 8000a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000a74:	4293      	cmp	r3, r2
 8000a76:	bfc4      	itt	gt
 8000a78:	1a9b      	subgt	r3, r3, r2
 8000a7a:	18ed      	addgt	r5, r5, r3
 8000a7c:	341a      	adds	r4, #26
 8000a7e:	454d      	cmp	r5, r9
 8000a80:	d11a      	bne.n	8000ab8 <_printf_common+0xd8>
 8000a82:	2000      	movs	r0, #0
 8000a84:	e008      	b.n	8000a98 <_printf_common+0xb8>
 8000a86:	2301      	movs	r3, #1
 8000a88:	4652      	mov	r2, sl
 8000a8a:	4639      	mov	r1, r7
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	47c0      	blx	r8
 8000a90:	3001      	adds	r0, #1
 8000a92:	d103      	bne.n	8000a9c <_printf_common+0xbc>
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9c:	3501      	adds	r5, #1
 8000a9e:	e7c2      	b.n	8000a26 <_printf_common+0x46>
 8000aa0:	2030      	movs	r0, #48	; 0x30
 8000aa2:	18e1      	adds	r1, r4, r3
 8000aa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000aae:	4422      	add	r2, r4
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ab6:	e7c4      	b.n	8000a42 <_printf_common+0x62>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	4622      	mov	r2, r4
 8000abc:	4639      	mov	r1, r7
 8000abe:	4630      	mov	r0, r6
 8000ac0:	47c0      	blx	r8
 8000ac2:	3001      	adds	r0, #1
 8000ac4:	d0e6      	beq.n	8000a94 <_printf_common+0xb4>
 8000ac6:	f109 0901 	add.w	r9, r9, #1
 8000aca:	e7d8      	b.n	8000a7e <_printf_common+0x9e>

08000acc <_printf_i>:
 8000acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ad0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8000ad4:	460c      	mov	r4, r1
 8000ad6:	7e09      	ldrb	r1, [r1, #24]
 8000ad8:	b085      	sub	sp, #20
 8000ada:	296e      	cmp	r1, #110	; 0x6e
 8000adc:	4617      	mov	r7, r2
 8000ade:	4606      	mov	r6, r0
 8000ae0:	4698      	mov	r8, r3
 8000ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000ae4:	f000 80b3 	beq.w	8000c4e <_printf_i+0x182>
 8000ae8:	d822      	bhi.n	8000b30 <_printf_i+0x64>
 8000aea:	2963      	cmp	r1, #99	; 0x63
 8000aec:	d036      	beq.n	8000b5c <_printf_i+0x90>
 8000aee:	d80a      	bhi.n	8000b06 <_printf_i+0x3a>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	f000 80b9 	beq.w	8000c68 <_printf_i+0x19c>
 8000af6:	2958      	cmp	r1, #88	; 0x58
 8000af8:	f000 8083 	beq.w	8000c02 <_printf_i+0x136>
 8000afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000b04:	e032      	b.n	8000b6c <_printf_i+0xa0>
 8000b06:	2964      	cmp	r1, #100	; 0x64
 8000b08:	d001      	beq.n	8000b0e <_printf_i+0x42>
 8000b0a:	2969      	cmp	r1, #105	; 0x69
 8000b0c:	d1f6      	bne.n	8000afc <_printf_i+0x30>
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	6813      	ldr	r3, [r2, #0]
 8000b12:	0605      	lsls	r5, r0, #24
 8000b14:	f103 0104 	add.w	r1, r3, #4
 8000b18:	d52a      	bpl.n	8000b70 <_printf_i+0xa4>
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6011      	str	r1, [r2, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da03      	bge.n	8000b2a <_printf_i+0x5e>
 8000b22:	222d      	movs	r2, #45	; 0x2d
 8000b24:	425b      	negs	r3, r3
 8000b26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8000b2a:	486f      	ldr	r0, [pc, #444]	; (8000ce8 <_printf_i+0x21c>)
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	e039      	b.n	8000ba4 <_printf_i+0xd8>
 8000b30:	2973      	cmp	r1, #115	; 0x73
 8000b32:	f000 809d 	beq.w	8000c70 <_printf_i+0x1a4>
 8000b36:	d808      	bhi.n	8000b4a <_printf_i+0x7e>
 8000b38:	296f      	cmp	r1, #111	; 0x6f
 8000b3a:	d020      	beq.n	8000b7e <_printf_i+0xb2>
 8000b3c:	2970      	cmp	r1, #112	; 0x70
 8000b3e:	d1dd      	bne.n	8000afc <_printf_i+0x30>
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	f043 0320 	orr.w	r3, r3, #32
 8000b46:	6023      	str	r3, [r4, #0]
 8000b48:	e003      	b.n	8000b52 <_printf_i+0x86>
 8000b4a:	2975      	cmp	r1, #117	; 0x75
 8000b4c:	d017      	beq.n	8000b7e <_printf_i+0xb2>
 8000b4e:	2978      	cmp	r1, #120	; 0x78
 8000b50:	d1d4      	bne.n	8000afc <_printf_i+0x30>
 8000b52:	2378      	movs	r3, #120	; 0x78
 8000b54:	4865      	ldr	r0, [pc, #404]	; (8000cec <_printf_i+0x220>)
 8000b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b5a:	e055      	b.n	8000c08 <_printf_i+0x13c>
 8000b5c:	6813      	ldr	r3, [r2, #0]
 8000b5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b62:	1d19      	adds	r1, r3, #4
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6011      	str	r1, [r2, #0]
 8000b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e08c      	b.n	8000c8a <_printf_i+0x1be>
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000b76:	6011      	str	r1, [r2, #0]
 8000b78:	bf18      	it	ne
 8000b7a:	b21b      	sxthne	r3, r3
 8000b7c:	e7cf      	b.n	8000b1e <_printf_i+0x52>
 8000b7e:	6813      	ldr	r3, [r2, #0]
 8000b80:	6825      	ldr	r5, [r4, #0]
 8000b82:	1d18      	adds	r0, r3, #4
 8000b84:	6010      	str	r0, [r2, #0]
 8000b86:	0628      	lsls	r0, r5, #24
 8000b88:	d501      	bpl.n	8000b8e <_printf_i+0xc2>
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	e002      	b.n	8000b94 <_printf_i+0xc8>
 8000b8e:	0668      	lsls	r0, r5, #25
 8000b90:	d5fb      	bpl.n	8000b8a <_printf_i+0xbe>
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	296f      	cmp	r1, #111	; 0x6f
 8000b96:	bf14      	ite	ne
 8000b98:	220a      	movne	r2, #10
 8000b9a:	2208      	moveq	r2, #8
 8000b9c:	4852      	ldr	r0, [pc, #328]	; (8000ce8 <_printf_i+0x21c>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ba4:	6865      	ldr	r5, [r4, #4]
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	60a5      	str	r5, [r4, #8]
 8000baa:	f2c0 8095 	blt.w	8000cd8 <_printf_i+0x20c>
 8000bae:	6821      	ldr	r1, [r4, #0]
 8000bb0:	f021 0104 	bic.w	r1, r1, #4
 8000bb4:	6021      	str	r1, [r4, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d13d      	bne.n	8000c36 <_printf_i+0x16a>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f040 808e 	bne.w	8000cdc <_printf_i+0x210>
 8000bc0:	4665      	mov	r5, ip
 8000bc2:	2a08      	cmp	r2, #8
 8000bc4:	d10b      	bne.n	8000bde <_printf_i+0x112>
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	07db      	lsls	r3, r3, #31
 8000bca:	d508      	bpl.n	8000bde <_printf_i+0x112>
 8000bcc:	6923      	ldr	r3, [r4, #16]
 8000bce:	6862      	ldr	r2, [r4, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	bfde      	ittt	le
 8000bd4:	2330      	movle	r3, #48	; 0x30
 8000bd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000bda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000bde:	ebac 0305 	sub.w	r3, ip, r5
 8000be2:	6123      	str	r3, [r4, #16]
 8000be4:	f8cd 8000 	str.w	r8, [sp]
 8000be8:	463b      	mov	r3, r7
 8000bea:	aa03      	add	r2, sp, #12
 8000bec:	4621      	mov	r1, r4
 8000bee:	4630      	mov	r0, r6
 8000bf0:	f7ff fef6 	bl	80009e0 <_printf_common>
 8000bf4:	3001      	adds	r0, #1
 8000bf6:	d14d      	bne.n	8000c94 <_printf_i+0x1c8>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	b005      	add	sp, #20
 8000bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c02:	4839      	ldr	r0, [pc, #228]	; (8000ce8 <_printf_i+0x21c>)
 8000c04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8000c08:	6813      	ldr	r3, [r2, #0]
 8000c0a:	6821      	ldr	r1, [r4, #0]
 8000c0c:	1d1d      	adds	r5, r3, #4
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6015      	str	r5, [r2, #0]
 8000c12:	060a      	lsls	r2, r1, #24
 8000c14:	d50b      	bpl.n	8000c2e <_printf_i+0x162>
 8000c16:	07ca      	lsls	r2, r1, #31
 8000c18:	bf44      	itt	mi
 8000c1a:	f041 0120 	orrmi.w	r1, r1, #32
 8000c1e:	6021      	strmi	r1, [r4, #0]
 8000c20:	b91b      	cbnz	r3, 8000c2a <_printf_i+0x15e>
 8000c22:	6822      	ldr	r2, [r4, #0]
 8000c24:	f022 0220 	bic.w	r2, r2, #32
 8000c28:	6022      	str	r2, [r4, #0]
 8000c2a:	2210      	movs	r2, #16
 8000c2c:	e7b7      	b.n	8000b9e <_printf_i+0xd2>
 8000c2e:	064d      	lsls	r5, r1, #25
 8000c30:	bf48      	it	mi
 8000c32:	b29b      	uxthmi	r3, r3
 8000c34:	e7ef      	b.n	8000c16 <_printf_i+0x14a>
 8000c36:	4665      	mov	r5, ip
 8000c38:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c3c:	fb02 3311 	mls	r3, r2, r1, r3
 8000c40:	5cc3      	ldrb	r3, [r0, r3]
 8000c42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8000c46:	460b      	mov	r3, r1
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d1f5      	bne.n	8000c38 <_printf_i+0x16c>
 8000c4c:	e7b9      	b.n	8000bc2 <_printf_i+0xf6>
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	6825      	ldr	r5, [r4, #0]
 8000c52:	1d18      	adds	r0, r3, #4
 8000c54:	6961      	ldr	r1, [r4, #20]
 8000c56:	6010      	str	r0, [r2, #0]
 8000c58:	0628      	lsls	r0, r5, #24
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	d501      	bpl.n	8000c62 <_printf_i+0x196>
 8000c5e:	6019      	str	r1, [r3, #0]
 8000c60:	e002      	b.n	8000c68 <_printf_i+0x19c>
 8000c62:	066a      	lsls	r2, r5, #25
 8000c64:	d5fb      	bpl.n	8000c5e <_printf_i+0x192>
 8000c66:	8019      	strh	r1, [r3, #0]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	4665      	mov	r5, ip
 8000c6c:	6123      	str	r3, [r4, #16]
 8000c6e:	e7b9      	b.n	8000be4 <_printf_i+0x118>
 8000c70:	6813      	ldr	r3, [r2, #0]
 8000c72:	1d19      	adds	r1, r3, #4
 8000c74:	6011      	str	r1, [r2, #0]
 8000c76:	681d      	ldr	r5, [r3, #0]
 8000c78:	6862      	ldr	r2, [r4, #4]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	f000 fadd 	bl	800123c <memchr>
 8000c82:	b108      	cbz	r0, 8000c88 <_printf_i+0x1bc>
 8000c84:	1b40      	subs	r0, r0, r5
 8000c86:	6060      	str	r0, [r4, #4]
 8000c88:	6863      	ldr	r3, [r4, #4]
 8000c8a:	6123      	str	r3, [r4, #16]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000c92:	e7a7      	b.n	8000be4 <_printf_i+0x118>
 8000c94:	6923      	ldr	r3, [r4, #16]
 8000c96:	462a      	mov	r2, r5
 8000c98:	4639      	mov	r1, r7
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	47c0      	blx	r8
 8000c9e:	3001      	adds	r0, #1
 8000ca0:	d0aa      	beq.n	8000bf8 <_printf_i+0x12c>
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	079b      	lsls	r3, r3, #30
 8000ca6:	d413      	bmi.n	8000cd0 <_printf_i+0x204>
 8000ca8:	68e0      	ldr	r0, [r4, #12]
 8000caa:	9b03      	ldr	r3, [sp, #12]
 8000cac:	4298      	cmp	r0, r3
 8000cae:	bfb8      	it	lt
 8000cb0:	4618      	movlt	r0, r3
 8000cb2:	e7a3      	b.n	8000bfc <_printf_i+0x130>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	464a      	mov	r2, r9
 8000cb8:	4639      	mov	r1, r7
 8000cba:	4630      	mov	r0, r6
 8000cbc:	47c0      	blx	r8
 8000cbe:	3001      	adds	r0, #1
 8000cc0:	d09a      	beq.n	8000bf8 <_printf_i+0x12c>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	68e3      	ldr	r3, [r4, #12]
 8000cc6:	9a03      	ldr	r2, [sp, #12]
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	42ab      	cmp	r3, r5
 8000ccc:	dcf2      	bgt.n	8000cb4 <_printf_i+0x1e8>
 8000cce:	e7eb      	b.n	8000ca8 <_printf_i+0x1dc>
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	f104 0919 	add.w	r9, r4, #25
 8000cd6:	e7f5      	b.n	8000cc4 <_printf_i+0x1f8>
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1ac      	bne.n	8000c36 <_printf_i+0x16a>
 8000cdc:	7803      	ldrb	r3, [r0, #0]
 8000cde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ce2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ce6:	e76c      	b.n	8000bc2 <_printf_i+0xf6>
 8000ce8:	08001711 	.word	0x08001711
 8000cec:	08001722 	.word	0x08001722

08000cf0 <__swbuf_r>:
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	460e      	mov	r6, r1
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	b118      	cbz	r0, 8000d02 <__swbuf_r+0x12>
 8000cfa:	6983      	ldr	r3, [r0, #24]
 8000cfc:	b90b      	cbnz	r3, 8000d02 <__swbuf_r+0x12>
 8000cfe:	f000 f9af 	bl	8001060 <__sinit>
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <__swbuf_r+0x98>)
 8000d04:	429c      	cmp	r4, r3
 8000d06:	d12a      	bne.n	8000d5e <__swbuf_r+0x6e>
 8000d08:	686c      	ldr	r4, [r5, #4]
 8000d0a:	69a3      	ldr	r3, [r4, #24]
 8000d0c:	60a3      	str	r3, [r4, #8]
 8000d0e:	89a3      	ldrh	r3, [r4, #12]
 8000d10:	071a      	lsls	r2, r3, #28
 8000d12:	d52e      	bpl.n	8000d72 <__swbuf_r+0x82>
 8000d14:	6923      	ldr	r3, [r4, #16]
 8000d16:	b363      	cbz	r3, 8000d72 <__swbuf_r+0x82>
 8000d18:	6923      	ldr	r3, [r4, #16]
 8000d1a:	6820      	ldr	r0, [r4, #0]
 8000d1c:	b2f6      	uxtb	r6, r6
 8000d1e:	1ac0      	subs	r0, r0, r3
 8000d20:	6963      	ldr	r3, [r4, #20]
 8000d22:	4637      	mov	r7, r6
 8000d24:	4283      	cmp	r3, r0
 8000d26:	dc04      	bgt.n	8000d32 <__swbuf_r+0x42>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	4628      	mov	r0, r5
 8000d2c:	f000 f92e 	bl	8000f8c <_fflush_r>
 8000d30:	bb28      	cbnz	r0, 8000d7e <__swbuf_r+0x8e>
 8000d32:	68a3      	ldr	r3, [r4, #8]
 8000d34:	3001      	adds	r0, #1
 8000d36:	3b01      	subs	r3, #1
 8000d38:	60a3      	str	r3, [r4, #8]
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	6022      	str	r2, [r4, #0]
 8000d40:	701e      	strb	r6, [r3, #0]
 8000d42:	6963      	ldr	r3, [r4, #20]
 8000d44:	4283      	cmp	r3, r0
 8000d46:	d004      	beq.n	8000d52 <__swbuf_r+0x62>
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	07db      	lsls	r3, r3, #31
 8000d4c:	d519      	bpl.n	8000d82 <__swbuf_r+0x92>
 8000d4e:	2e0a      	cmp	r6, #10
 8000d50:	d117      	bne.n	8000d82 <__swbuf_r+0x92>
 8000d52:	4621      	mov	r1, r4
 8000d54:	4628      	mov	r0, r5
 8000d56:	f000 f919 	bl	8000f8c <_fflush_r>
 8000d5a:	b190      	cbz	r0, 8000d82 <__swbuf_r+0x92>
 8000d5c:	e00f      	b.n	8000d7e <__swbuf_r+0x8e>
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <__swbuf_r+0x9c>)
 8000d60:	429c      	cmp	r4, r3
 8000d62:	d101      	bne.n	8000d68 <__swbuf_r+0x78>
 8000d64:	68ac      	ldr	r4, [r5, #8]
 8000d66:	e7d0      	b.n	8000d0a <__swbuf_r+0x1a>
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <__swbuf_r+0xa0>)
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	bf08      	it	eq
 8000d6e:	68ec      	ldreq	r4, [r5, #12]
 8000d70:	e7cb      	b.n	8000d0a <__swbuf_r+0x1a>
 8000d72:	4621      	mov	r1, r4
 8000d74:	4628      	mov	r0, r5
 8000d76:	f000 f80d 	bl	8000d94 <__swsetup_r>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d0cc      	beq.n	8000d18 <__swbuf_r+0x28>
 8000d7e:	f04f 37ff 	mov.w	r7, #4294967295
 8000d82:	4638      	mov	r0, r7
 8000d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d86:	bf00      	nop
 8000d88:	08001754 	.word	0x08001754
 8000d8c:	08001774 	.word	0x08001774
 8000d90:	08001734 	.word	0x08001734

08000d94 <__swsetup_r>:
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <__swsetup_r+0xcc>)
 8000d96:	b570      	push	{r4, r5, r6, lr}
 8000d98:	681d      	ldr	r5, [r3, #0]
 8000d9a:	4606      	mov	r6, r0
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	b125      	cbz	r5, 8000daa <__swsetup_r+0x16>
 8000da0:	69ab      	ldr	r3, [r5, #24]
 8000da2:	b913      	cbnz	r3, 8000daa <__swsetup_r+0x16>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f000 f95b 	bl	8001060 <__sinit>
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <__swsetup_r+0xd0>)
 8000dac:	429c      	cmp	r4, r3
 8000dae:	d10f      	bne.n	8000dd0 <__swsetup_r+0x3c>
 8000db0:	686c      	ldr	r4, [r5, #4]
 8000db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	0715      	lsls	r5, r2, #28
 8000dba:	d42c      	bmi.n	8000e16 <__swsetup_r+0x82>
 8000dbc:	06d0      	lsls	r0, r2, #27
 8000dbe:	d411      	bmi.n	8000de4 <__swsetup_r+0x50>
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	6032      	str	r2, [r6, #0]
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc8:	81a3      	strh	r3, [r4, #12]
 8000dca:	f04f 30ff 	mov.w	r0, #4294967295
 8000dce:	e03e      	b.n	8000e4e <__swsetup_r+0xba>
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <__swsetup_r+0xd4>)
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	d101      	bne.n	8000dda <__swsetup_r+0x46>
 8000dd6:	68ac      	ldr	r4, [r5, #8]
 8000dd8:	e7eb      	b.n	8000db2 <__swsetup_r+0x1e>
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <__swsetup_r+0xd8>)
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	bf08      	it	eq
 8000de0:	68ec      	ldreq	r4, [r5, #12]
 8000de2:	e7e6      	b.n	8000db2 <__swsetup_r+0x1e>
 8000de4:	0751      	lsls	r1, r2, #29
 8000de6:	d512      	bpl.n	8000e0e <__swsetup_r+0x7a>
 8000de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dea:	b141      	cbz	r1, 8000dfe <__swsetup_r+0x6a>
 8000dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d002      	beq.n	8000dfa <__swsetup_r+0x66>
 8000df4:	4630      	mov	r0, r6
 8000df6:	f000 fa2f 	bl	8001258 <_free_r>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8000dfe:	89a3      	ldrh	r3, [r4, #12]
 8000e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e04:	81a3      	strh	r3, [r4, #12]
 8000e06:	2300      	movs	r3, #0
 8000e08:	6063      	str	r3, [r4, #4]
 8000e0a:	6923      	ldr	r3, [r4, #16]
 8000e0c:	6023      	str	r3, [r4, #0]
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	81a3      	strh	r3, [r4, #12]
 8000e16:	6923      	ldr	r3, [r4, #16]
 8000e18:	b94b      	cbnz	r3, 8000e2e <__swsetup_r+0x9a>
 8000e1a:	89a3      	ldrh	r3, [r4, #12]
 8000e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e24:	d003      	beq.n	8000e2e <__swsetup_r+0x9a>
 8000e26:	4621      	mov	r1, r4
 8000e28:	4630      	mov	r0, r6
 8000e2a:	f000 f9c7 	bl	80011bc <__smakebuf_r>
 8000e2e:	89a2      	ldrh	r2, [r4, #12]
 8000e30:	f012 0301 	ands.w	r3, r2, #1
 8000e34:	d00c      	beq.n	8000e50 <__swsetup_r+0xbc>
 8000e36:	2300      	movs	r3, #0
 8000e38:	60a3      	str	r3, [r4, #8]
 8000e3a:	6963      	ldr	r3, [r4, #20]
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	61a3      	str	r3, [r4, #24]
 8000e40:	6923      	ldr	r3, [r4, #16]
 8000e42:	b953      	cbnz	r3, 8000e5a <__swsetup_r+0xc6>
 8000e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e48:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000e4c:	d1ba      	bne.n	8000dc4 <__swsetup_r+0x30>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	0792      	lsls	r2, r2, #30
 8000e52:	bf58      	it	pl
 8000e54:	6963      	ldrpl	r3, [r4, #20]
 8000e56:	60a3      	str	r3, [r4, #8]
 8000e58:	e7f2      	b.n	8000e40 <__swsetup_r+0xac>
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e7f7      	b.n	8000e4e <__swsetup_r+0xba>
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000
 8000e64:	08001754 	.word	0x08001754
 8000e68:	08001774 	.word	0x08001774
 8000e6c:	08001734 	.word	0x08001734

08000e70 <abort>:
 8000e70:	b508      	push	{r3, lr}
 8000e72:	2006      	movs	r0, #6
 8000e74:	f000 face 	bl	8001414 <raise>
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff fb3e 	bl	80004fa <_exit>
	...

08000e80 <__sflush_r>:
 8000e80:	898a      	ldrh	r2, [r1, #12]
 8000e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e86:	4605      	mov	r5, r0
 8000e88:	0710      	lsls	r0, r2, #28
 8000e8a:	460c      	mov	r4, r1
 8000e8c:	d458      	bmi.n	8000f40 <__sflush_r+0xc0>
 8000e8e:	684b      	ldr	r3, [r1, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dc05      	bgt.n	8000ea0 <__sflush_r+0x20>
 8000e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dc02      	bgt.n	8000ea0 <__sflush_r+0x20>
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d0f9      	beq.n	8000e9a <__sflush_r+0x1a>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000eac:	682f      	ldr	r7, [r5, #0]
 8000eae:	6a21      	ldr	r1, [r4, #32]
 8000eb0:	602b      	str	r3, [r5, #0]
 8000eb2:	d032      	beq.n	8000f1a <__sflush_r+0x9a>
 8000eb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000eb6:	89a3      	ldrh	r3, [r4, #12]
 8000eb8:	075a      	lsls	r2, r3, #29
 8000eba:	d505      	bpl.n	8000ec8 <__sflush_r+0x48>
 8000ebc:	6863      	ldr	r3, [r4, #4]
 8000ebe:	1ac0      	subs	r0, r0, r3
 8000ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ec2:	b10b      	cbz	r3, 8000ec8 <__sflush_r+0x48>
 8000ec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ec6:	1ac0      	subs	r0, r0, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4602      	mov	r2, r0
 8000ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ece:	6a21      	ldr	r1, [r4, #32]
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	47b0      	blx	r6
 8000ed4:	1c43      	adds	r3, r0, #1
 8000ed6:	89a3      	ldrh	r3, [r4, #12]
 8000ed8:	d106      	bne.n	8000ee8 <__sflush_r+0x68>
 8000eda:	6829      	ldr	r1, [r5, #0]
 8000edc:	291d      	cmp	r1, #29
 8000ede:	d848      	bhi.n	8000f72 <__sflush_r+0xf2>
 8000ee0:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <__sflush_r+0x108>)
 8000ee2:	40ca      	lsrs	r2, r1
 8000ee4:	07d6      	lsls	r6, r2, #31
 8000ee6:	d544      	bpl.n	8000f72 <__sflush_r+0xf2>
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6062      	str	r2, [r4, #4]
 8000eec:	6922      	ldr	r2, [r4, #16]
 8000eee:	04d9      	lsls	r1, r3, #19
 8000ef0:	6022      	str	r2, [r4, #0]
 8000ef2:	d504      	bpl.n	8000efe <__sflush_r+0x7e>
 8000ef4:	1c42      	adds	r2, r0, #1
 8000ef6:	d101      	bne.n	8000efc <__sflush_r+0x7c>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	b903      	cbnz	r3, 8000efe <__sflush_r+0x7e>
 8000efc:	6560      	str	r0, [r4, #84]	; 0x54
 8000efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f00:	602f      	str	r7, [r5, #0]
 8000f02:	2900      	cmp	r1, #0
 8000f04:	d0c9      	beq.n	8000e9a <__sflush_r+0x1a>
 8000f06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d002      	beq.n	8000f14 <__sflush_r+0x94>
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f000 f9a2 	bl	8001258 <_free_r>
 8000f14:	2000      	movs	r0, #0
 8000f16:	6360      	str	r0, [r4, #52]	; 0x34
 8000f18:	e7c0      	b.n	8000e9c <__sflush_r+0x1c>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	47b0      	blx	r6
 8000f20:	1c41      	adds	r1, r0, #1
 8000f22:	d1c8      	bne.n	8000eb6 <__sflush_r+0x36>
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0c5      	beq.n	8000eb6 <__sflush_r+0x36>
 8000f2a:	2b1d      	cmp	r3, #29
 8000f2c:	d001      	beq.n	8000f32 <__sflush_r+0xb2>
 8000f2e:	2b16      	cmp	r3, #22
 8000f30:	d101      	bne.n	8000f36 <__sflush_r+0xb6>
 8000f32:	602f      	str	r7, [r5, #0]
 8000f34:	e7b1      	b.n	8000e9a <__sflush_r+0x1a>
 8000f36:	89a3      	ldrh	r3, [r4, #12]
 8000f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3c:	81a3      	strh	r3, [r4, #12]
 8000f3e:	e7ad      	b.n	8000e9c <__sflush_r+0x1c>
 8000f40:	690f      	ldr	r7, [r1, #16]
 8000f42:	2f00      	cmp	r7, #0
 8000f44:	d0a9      	beq.n	8000e9a <__sflush_r+0x1a>
 8000f46:	0793      	lsls	r3, r2, #30
 8000f48:	bf18      	it	ne
 8000f4a:	2300      	movne	r3, #0
 8000f4c:	680e      	ldr	r6, [r1, #0]
 8000f4e:	bf08      	it	eq
 8000f50:	694b      	ldreq	r3, [r1, #20]
 8000f52:	eba6 0807 	sub.w	r8, r6, r7
 8000f56:	600f      	str	r7, [r1, #0]
 8000f58:	608b      	str	r3, [r1, #8]
 8000f5a:	f1b8 0f00 	cmp.w	r8, #0
 8000f5e:	dd9c      	ble.n	8000e9a <__sflush_r+0x1a>
 8000f60:	4643      	mov	r3, r8
 8000f62:	463a      	mov	r2, r7
 8000f64:	6a21      	ldr	r1, [r4, #32]
 8000f66:	4628      	mov	r0, r5
 8000f68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f6a:	47b0      	blx	r6
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	dc06      	bgt.n	8000f7e <__sflush_r+0xfe>
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f76:	81a3      	strh	r3, [r4, #12]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	e78e      	b.n	8000e9c <__sflush_r+0x1c>
 8000f7e:	4407      	add	r7, r0
 8000f80:	eba8 0800 	sub.w	r8, r8, r0
 8000f84:	e7e9      	b.n	8000f5a <__sflush_r+0xda>
 8000f86:	bf00      	nop
 8000f88:	20400001 	.word	0x20400001

08000f8c <_fflush_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	690b      	ldr	r3, [r1, #16]
 8000f90:	4605      	mov	r5, r0
 8000f92:	460c      	mov	r4, r1
 8000f94:	b1db      	cbz	r3, 8000fce <_fflush_r+0x42>
 8000f96:	b118      	cbz	r0, 8000fa0 <_fflush_r+0x14>
 8000f98:	6983      	ldr	r3, [r0, #24]
 8000f9a:	b90b      	cbnz	r3, 8000fa0 <_fflush_r+0x14>
 8000f9c:	f000 f860 	bl	8001060 <__sinit>
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <_fflush_r+0x48>)
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	d109      	bne.n	8000fba <_fflush_r+0x2e>
 8000fa6:	686c      	ldr	r4, [r5, #4]
 8000fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fac:	b17b      	cbz	r3, 8000fce <_fflush_r+0x42>
 8000fae:	4621      	mov	r1, r4
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fb6:	f7ff bf63 	b.w	8000e80 <__sflush_r>
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_fflush_r+0x4c>)
 8000fbc:	429c      	cmp	r4, r3
 8000fbe:	d101      	bne.n	8000fc4 <_fflush_r+0x38>
 8000fc0:	68ac      	ldr	r4, [r5, #8]
 8000fc2:	e7f1      	b.n	8000fa8 <_fflush_r+0x1c>
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <_fflush_r+0x50>)
 8000fc6:	429c      	cmp	r4, r3
 8000fc8:	bf08      	it	eq
 8000fca:	68ec      	ldreq	r4, [r5, #12]
 8000fcc:	e7ec      	b.n	8000fa8 <_fflush_r+0x1c>
 8000fce:	2000      	movs	r0, #0
 8000fd0:	bd38      	pop	{r3, r4, r5, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08001754 	.word	0x08001754
 8000fd8:	08001774 	.word	0x08001774
 8000fdc:	08001734 	.word	0x08001734

08000fe0 <std>:
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	b510      	push	{r4, lr}
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8000fea:	6083      	str	r3, [r0, #8]
 8000fec:	8181      	strh	r1, [r0, #12]
 8000fee:	6643      	str	r3, [r0, #100]	; 0x64
 8000ff0:	81c2      	strh	r2, [r0, #14]
 8000ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ff6:	6183      	str	r3, [r0, #24]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	305c      	adds	r0, #92	; 0x5c
 8000ffe:	f7ff fba9 	bl	8000754 <memset>
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <std+0x38>)
 8001004:	6224      	str	r4, [r4, #32]
 8001006:	6263      	str	r3, [r4, #36]	; 0x24
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <std+0x3c>)
 800100a:	62a3      	str	r3, [r4, #40]	; 0x28
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <std+0x40>)
 800100e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <std+0x44>)
 8001012:	6323      	str	r3, [r4, #48]	; 0x30
 8001014:	bd10      	pop	{r4, pc}
 8001016:	bf00      	nop
 8001018:	0800144d 	.word	0x0800144d
 800101c:	0800146f 	.word	0x0800146f
 8001020:	080014a7 	.word	0x080014a7
 8001024:	080014cb 	.word	0x080014cb

08001028 <_cleanup_r>:
 8001028:	4901      	ldr	r1, [pc, #4]	; (8001030 <_cleanup_r+0x8>)
 800102a:	f000 b885 	b.w	8001138 <_fwalk_reent>
 800102e:	bf00      	nop
 8001030:	08000f8d 	.word	0x08000f8d

08001034 <__sfmoreglue>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	2568      	movs	r5, #104	; 0x68
 8001038:	1e4a      	subs	r2, r1, #1
 800103a:	4355      	muls	r5, r2
 800103c:	460e      	mov	r6, r1
 800103e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001042:	f000 f955 	bl	80012f0 <_malloc_r>
 8001046:	4604      	mov	r4, r0
 8001048:	b140      	cbz	r0, 800105c <__sfmoreglue+0x28>
 800104a:	2100      	movs	r1, #0
 800104c:	e9c0 1600 	strd	r1, r6, [r0]
 8001050:	300c      	adds	r0, #12
 8001052:	60a0      	str	r0, [r4, #8]
 8001054:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001058:	f7ff fb7c 	bl	8000754 <memset>
 800105c:	4620      	mov	r0, r4
 800105e:	bd70      	pop	{r4, r5, r6, pc}

08001060 <__sinit>:
 8001060:	6983      	ldr	r3, [r0, #24]
 8001062:	b510      	push	{r4, lr}
 8001064:	4604      	mov	r4, r0
 8001066:	bb33      	cbnz	r3, 80010b6 <__sinit+0x56>
 8001068:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800106c:	6503      	str	r3, [r0, #80]	; 0x50
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <__sinit+0x58>)
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <__sinit+0x5c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6282      	str	r2, [r0, #40]	; 0x28
 8001076:	4298      	cmp	r0, r3
 8001078:	bf04      	itt	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	6183      	streq	r3, [r0, #24]
 800107e:	f000 f81f 	bl	80010c0 <__sfp>
 8001082:	6060      	str	r0, [r4, #4]
 8001084:	4620      	mov	r0, r4
 8001086:	f000 f81b 	bl	80010c0 <__sfp>
 800108a:	60a0      	str	r0, [r4, #8]
 800108c:	4620      	mov	r0, r4
 800108e:	f000 f817 	bl	80010c0 <__sfp>
 8001092:	2200      	movs	r2, #0
 8001094:	60e0      	str	r0, [r4, #12]
 8001096:	2104      	movs	r1, #4
 8001098:	6860      	ldr	r0, [r4, #4]
 800109a:	f7ff ffa1 	bl	8000fe0 <std>
 800109e:	2201      	movs	r2, #1
 80010a0:	2109      	movs	r1, #9
 80010a2:	68a0      	ldr	r0, [r4, #8]
 80010a4:	f7ff ff9c 	bl	8000fe0 <std>
 80010a8:	2202      	movs	r2, #2
 80010aa:	2112      	movs	r1, #18
 80010ac:	68e0      	ldr	r0, [r4, #12]
 80010ae:	f7ff ff97 	bl	8000fe0 <std>
 80010b2:	2301      	movs	r3, #1
 80010b4:	61a3      	str	r3, [r4, #24]
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	080016fc 	.word	0x080016fc
 80010bc:	08001029 	.word	0x08001029

080010c0 <__sfp>:
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <__sfp+0x70>)
 80010c4:	4607      	mov	r7, r0
 80010c6:	681e      	ldr	r6, [r3, #0]
 80010c8:	69b3      	ldr	r3, [r6, #24]
 80010ca:	b913      	cbnz	r3, 80010d2 <__sfp+0x12>
 80010cc:	4630      	mov	r0, r6
 80010ce:	f7ff ffc7 	bl	8001060 <__sinit>
 80010d2:	3648      	adds	r6, #72	; 0x48
 80010d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80010d8:	3b01      	subs	r3, #1
 80010da:	d503      	bpl.n	80010e4 <__sfp+0x24>
 80010dc:	6833      	ldr	r3, [r6, #0]
 80010de:	b133      	cbz	r3, 80010ee <__sfp+0x2e>
 80010e0:	6836      	ldr	r6, [r6, #0]
 80010e2:	e7f7      	b.n	80010d4 <__sfp+0x14>
 80010e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80010e8:	b16d      	cbz	r5, 8001106 <__sfp+0x46>
 80010ea:	3468      	adds	r4, #104	; 0x68
 80010ec:	e7f4      	b.n	80010d8 <__sfp+0x18>
 80010ee:	2104      	movs	r1, #4
 80010f0:	4638      	mov	r0, r7
 80010f2:	f7ff ff9f 	bl	8001034 <__sfmoreglue>
 80010f6:	6030      	str	r0, [r6, #0]
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d1f1      	bne.n	80010e0 <__sfp+0x20>
 80010fc:	230c      	movs	r3, #12
 80010fe:	4604      	mov	r4, r0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4620      	mov	r0, r4
 8001104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <__sfp+0x74>)
 8001108:	6665      	str	r5, [r4, #100]	; 0x64
 800110a:	e9c4 5500 	strd	r5, r5, [r4]
 800110e:	60a5      	str	r5, [r4, #8]
 8001110:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001114:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001118:	2208      	movs	r2, #8
 800111a:	4629      	mov	r1, r5
 800111c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001120:	f7ff fb18 	bl	8000754 <memset>
 8001124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800112c:	e7e9      	b.n	8001102 <__sfp+0x42>
 800112e:	bf00      	nop
 8001130:	080016fc 	.word	0x080016fc
 8001134:	ffff0001 	.word	0xffff0001

08001138 <_fwalk_reent>:
 8001138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800113c:	4680      	mov	r8, r0
 800113e:	4689      	mov	r9, r1
 8001140:	2600      	movs	r6, #0
 8001142:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001146:	b914      	cbnz	r4, 800114e <_fwalk_reent+0x16>
 8001148:	4630      	mov	r0, r6
 800114a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800114e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001152:	3f01      	subs	r7, #1
 8001154:	d501      	bpl.n	800115a <_fwalk_reent+0x22>
 8001156:	6824      	ldr	r4, [r4, #0]
 8001158:	e7f5      	b.n	8001146 <_fwalk_reent+0xe>
 800115a:	89ab      	ldrh	r3, [r5, #12]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d907      	bls.n	8001170 <_fwalk_reent+0x38>
 8001160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001164:	3301      	adds	r3, #1
 8001166:	d003      	beq.n	8001170 <_fwalk_reent+0x38>
 8001168:	4629      	mov	r1, r5
 800116a:	4640      	mov	r0, r8
 800116c:	47c8      	blx	r9
 800116e:	4306      	orrs	r6, r0
 8001170:	3568      	adds	r5, #104	; 0x68
 8001172:	e7ee      	b.n	8001152 <_fwalk_reent+0x1a>

08001174 <__swhatbuf_r>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	460e      	mov	r6, r1
 8001178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117c:	b096      	sub	sp, #88	; 0x58
 800117e:	2900      	cmp	r1, #0
 8001180:	4614      	mov	r4, r2
 8001182:	461d      	mov	r5, r3
 8001184:	da07      	bge.n	8001196 <__swhatbuf_r+0x22>
 8001186:	2300      	movs	r3, #0
 8001188:	602b      	str	r3, [r5, #0]
 800118a:	89b3      	ldrh	r3, [r6, #12]
 800118c:	061a      	lsls	r2, r3, #24
 800118e:	d410      	bmi.n	80011b2 <__swhatbuf_r+0x3e>
 8001190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001194:	e00e      	b.n	80011b4 <__swhatbuf_r+0x40>
 8001196:	466a      	mov	r2, sp
 8001198:	f000 f9be 	bl	8001518 <_fstat_r>
 800119c:	2800      	cmp	r0, #0
 800119e:	dbf2      	blt.n	8001186 <__swhatbuf_r+0x12>
 80011a0:	9a01      	ldr	r2, [sp, #4]
 80011a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80011a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80011aa:	425a      	negs	r2, r3
 80011ac:	415a      	adcs	r2, r3
 80011ae:	602a      	str	r2, [r5, #0]
 80011b0:	e7ee      	b.n	8001190 <__swhatbuf_r+0x1c>
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	2000      	movs	r0, #0
 80011b6:	6023      	str	r3, [r4, #0]
 80011b8:	b016      	add	sp, #88	; 0x58
 80011ba:	bd70      	pop	{r4, r5, r6, pc}

080011bc <__smakebuf_r>:
 80011bc:	898b      	ldrh	r3, [r1, #12]
 80011be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011c0:	079d      	lsls	r5, r3, #30
 80011c2:	4606      	mov	r6, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	d507      	bpl.n	80011d8 <__smakebuf_r+0x1c>
 80011c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80011cc:	6023      	str	r3, [r4, #0]
 80011ce:	6123      	str	r3, [r4, #16]
 80011d0:	2301      	movs	r3, #1
 80011d2:	6163      	str	r3, [r4, #20]
 80011d4:	b002      	add	sp, #8
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	ab01      	add	r3, sp, #4
 80011da:	466a      	mov	r2, sp
 80011dc:	f7ff ffca 	bl	8001174 <__swhatbuf_r>
 80011e0:	9900      	ldr	r1, [sp, #0]
 80011e2:	4605      	mov	r5, r0
 80011e4:	4630      	mov	r0, r6
 80011e6:	f000 f883 	bl	80012f0 <_malloc_r>
 80011ea:	b948      	cbnz	r0, 8001200 <__smakebuf_r+0x44>
 80011ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011f0:	059a      	lsls	r2, r3, #22
 80011f2:	d4ef      	bmi.n	80011d4 <__smakebuf_r+0x18>
 80011f4:	f023 0303 	bic.w	r3, r3, #3
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	81a3      	strh	r3, [r4, #12]
 80011fe:	e7e3      	b.n	80011c8 <__smakebuf_r+0xc>
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <__smakebuf_r+0x7c>)
 8001202:	62b3      	str	r3, [r6, #40]	; 0x28
 8001204:	89a3      	ldrh	r3, [r4, #12]
 8001206:	6020      	str	r0, [r4, #0]
 8001208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120c:	81a3      	strh	r3, [r4, #12]
 800120e:	9b00      	ldr	r3, [sp, #0]
 8001210:	6120      	str	r0, [r4, #16]
 8001212:	6163      	str	r3, [r4, #20]
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	b15b      	cbz	r3, 8001230 <__smakebuf_r+0x74>
 8001218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800121c:	4630      	mov	r0, r6
 800121e:	f000 f98d 	bl	800153c <_isatty_r>
 8001222:	b128      	cbz	r0, 8001230 <__smakebuf_r+0x74>
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	81a3      	strh	r3, [r4, #12]
 8001230:	89a3      	ldrh	r3, [r4, #12]
 8001232:	431d      	orrs	r5, r3
 8001234:	81a5      	strh	r5, [r4, #12]
 8001236:	e7cd      	b.n	80011d4 <__smakebuf_r+0x18>
 8001238:	08001029 	.word	0x08001029

0800123c <memchr>:
 800123c:	b510      	push	{r4, lr}
 800123e:	b2c9      	uxtb	r1, r1
 8001240:	4402      	add	r2, r0
 8001242:	4290      	cmp	r0, r2
 8001244:	4603      	mov	r3, r0
 8001246:	d101      	bne.n	800124c <memchr+0x10>
 8001248:	2300      	movs	r3, #0
 800124a:	e003      	b.n	8001254 <memchr+0x18>
 800124c:	781c      	ldrb	r4, [r3, #0]
 800124e:	3001      	adds	r0, #1
 8001250:	428c      	cmp	r4, r1
 8001252:	d1f6      	bne.n	8001242 <memchr+0x6>
 8001254:	4618      	mov	r0, r3
 8001256:	bd10      	pop	{r4, pc}

08001258 <_free_r>:
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4605      	mov	r5, r0
 800125c:	2900      	cmp	r1, #0
 800125e:	d043      	beq.n	80012e8 <_free_r+0x90>
 8001260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001264:	1f0c      	subs	r4, r1, #4
 8001266:	2b00      	cmp	r3, #0
 8001268:	bfb8      	it	lt
 800126a:	18e4      	addlt	r4, r4, r3
 800126c:	f000 f988 	bl	8001580 <__malloc_lock>
 8001270:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <_free_r+0x94>)
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	4610      	mov	r0, r2
 8001276:	b933      	cbnz	r3, 8001286 <_free_r+0x2e>
 8001278:	6063      	str	r3, [r4, #4]
 800127a:	6014      	str	r4, [r2, #0]
 800127c:	4628      	mov	r0, r5
 800127e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001282:	f000 b97e 	b.w	8001582 <__malloc_unlock>
 8001286:	42a3      	cmp	r3, r4
 8001288:	d90b      	bls.n	80012a2 <_free_r+0x4a>
 800128a:	6821      	ldr	r1, [r4, #0]
 800128c:	1862      	adds	r2, r4, r1
 800128e:	4293      	cmp	r3, r2
 8001290:	bf01      	itttt	eq
 8001292:	681a      	ldreq	r2, [r3, #0]
 8001294:	685b      	ldreq	r3, [r3, #4]
 8001296:	1852      	addeq	r2, r2, r1
 8001298:	6022      	streq	r2, [r4, #0]
 800129a:	6063      	str	r3, [r4, #4]
 800129c:	6004      	str	r4, [r0, #0]
 800129e:	e7ed      	b.n	800127c <_free_r+0x24>
 80012a0:	4613      	mov	r3, r2
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	b10a      	cbz	r2, 80012aa <_free_r+0x52>
 80012a6:	42a2      	cmp	r2, r4
 80012a8:	d9fa      	bls.n	80012a0 <_free_r+0x48>
 80012aa:	6819      	ldr	r1, [r3, #0]
 80012ac:	1858      	adds	r0, r3, r1
 80012ae:	42a0      	cmp	r0, r4
 80012b0:	d10b      	bne.n	80012ca <_free_r+0x72>
 80012b2:	6820      	ldr	r0, [r4, #0]
 80012b4:	4401      	add	r1, r0
 80012b6:	1858      	adds	r0, r3, r1
 80012b8:	4282      	cmp	r2, r0
 80012ba:	6019      	str	r1, [r3, #0]
 80012bc:	d1de      	bne.n	800127c <_free_r+0x24>
 80012be:	6810      	ldr	r0, [r2, #0]
 80012c0:	6852      	ldr	r2, [r2, #4]
 80012c2:	4401      	add	r1, r0
 80012c4:	6019      	str	r1, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	e7d8      	b.n	800127c <_free_r+0x24>
 80012ca:	d902      	bls.n	80012d2 <_free_r+0x7a>
 80012cc:	230c      	movs	r3, #12
 80012ce:	602b      	str	r3, [r5, #0]
 80012d0:	e7d4      	b.n	800127c <_free_r+0x24>
 80012d2:	6820      	ldr	r0, [r4, #0]
 80012d4:	1821      	adds	r1, r4, r0
 80012d6:	428a      	cmp	r2, r1
 80012d8:	bf01      	itttt	eq
 80012da:	6811      	ldreq	r1, [r2, #0]
 80012dc:	6852      	ldreq	r2, [r2, #4]
 80012de:	1809      	addeq	r1, r1, r0
 80012e0:	6021      	streq	r1, [r4, #0]
 80012e2:	6062      	str	r2, [r4, #4]
 80012e4:	605c      	str	r4, [r3, #4]
 80012e6:	e7c9      	b.n	800127c <_free_r+0x24>
 80012e8:	bd38      	pop	{r3, r4, r5, pc}
 80012ea:	bf00      	nop
 80012ec:	20000084 	.word	0x20000084

080012f0 <_malloc_r>:
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	1ccd      	adds	r5, r1, #3
 80012f4:	f025 0503 	bic.w	r5, r5, #3
 80012f8:	3508      	adds	r5, #8
 80012fa:	2d0c      	cmp	r5, #12
 80012fc:	bf38      	it	cc
 80012fe:	250c      	movcc	r5, #12
 8001300:	2d00      	cmp	r5, #0
 8001302:	4606      	mov	r6, r0
 8001304:	db01      	blt.n	800130a <_malloc_r+0x1a>
 8001306:	42a9      	cmp	r1, r5
 8001308:	d903      	bls.n	8001312 <_malloc_r+0x22>
 800130a:	230c      	movs	r3, #12
 800130c:	6033      	str	r3, [r6, #0]
 800130e:	2000      	movs	r0, #0
 8001310:	bd70      	pop	{r4, r5, r6, pc}
 8001312:	f000 f935 	bl	8001580 <__malloc_lock>
 8001316:	4a21      	ldr	r2, [pc, #132]	; (800139c <_malloc_r+0xac>)
 8001318:	6814      	ldr	r4, [r2, #0]
 800131a:	4621      	mov	r1, r4
 800131c:	b991      	cbnz	r1, 8001344 <_malloc_r+0x54>
 800131e:	4c20      	ldr	r4, [pc, #128]	; (80013a0 <_malloc_r+0xb0>)
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	b91b      	cbnz	r3, 800132c <_malloc_r+0x3c>
 8001324:	4630      	mov	r0, r6
 8001326:	f000 f83d 	bl	80013a4 <_sbrk_r>
 800132a:	6020      	str	r0, [r4, #0]
 800132c:	4629      	mov	r1, r5
 800132e:	4630      	mov	r0, r6
 8001330:	f000 f838 	bl	80013a4 <_sbrk_r>
 8001334:	1c43      	adds	r3, r0, #1
 8001336:	d124      	bne.n	8001382 <_malloc_r+0x92>
 8001338:	230c      	movs	r3, #12
 800133a:	4630      	mov	r0, r6
 800133c:	6033      	str	r3, [r6, #0]
 800133e:	f000 f920 	bl	8001582 <__malloc_unlock>
 8001342:	e7e4      	b.n	800130e <_malloc_r+0x1e>
 8001344:	680b      	ldr	r3, [r1, #0]
 8001346:	1b5b      	subs	r3, r3, r5
 8001348:	d418      	bmi.n	800137c <_malloc_r+0x8c>
 800134a:	2b0b      	cmp	r3, #11
 800134c:	d90f      	bls.n	800136e <_malloc_r+0x7e>
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	18cc      	adds	r4, r1, r3
 8001352:	50cd      	str	r5, [r1, r3]
 8001354:	4630      	mov	r0, r6
 8001356:	f000 f914 	bl	8001582 <__malloc_unlock>
 800135a:	f104 000b 	add.w	r0, r4, #11
 800135e:	1d23      	adds	r3, r4, #4
 8001360:	f020 0007 	bic.w	r0, r0, #7
 8001364:	1ac3      	subs	r3, r0, r3
 8001366:	d0d3      	beq.n	8001310 <_malloc_r+0x20>
 8001368:	425a      	negs	r2, r3
 800136a:	50e2      	str	r2, [r4, r3]
 800136c:	e7d0      	b.n	8001310 <_malloc_r+0x20>
 800136e:	684b      	ldr	r3, [r1, #4]
 8001370:	428c      	cmp	r4, r1
 8001372:	bf16      	itet	ne
 8001374:	6063      	strne	r3, [r4, #4]
 8001376:	6013      	streq	r3, [r2, #0]
 8001378:	460c      	movne	r4, r1
 800137a:	e7eb      	b.n	8001354 <_malloc_r+0x64>
 800137c:	460c      	mov	r4, r1
 800137e:	6849      	ldr	r1, [r1, #4]
 8001380:	e7cc      	b.n	800131c <_malloc_r+0x2c>
 8001382:	1cc4      	adds	r4, r0, #3
 8001384:	f024 0403 	bic.w	r4, r4, #3
 8001388:	42a0      	cmp	r0, r4
 800138a:	d005      	beq.n	8001398 <_malloc_r+0xa8>
 800138c:	1a21      	subs	r1, r4, r0
 800138e:	4630      	mov	r0, r6
 8001390:	f000 f808 	bl	80013a4 <_sbrk_r>
 8001394:	3001      	adds	r0, #1
 8001396:	d0cf      	beq.n	8001338 <_malloc_r+0x48>
 8001398:	6025      	str	r5, [r4, #0]
 800139a:	e7db      	b.n	8001354 <_malloc_r+0x64>
 800139c:	20000084 	.word	0x20000084
 80013a0:	20000088 	.word	0x20000088

080013a4 <_sbrk_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	2300      	movs	r3, #0
 80013a8:	4c05      	ldr	r4, [pc, #20]	; (80013c0 <_sbrk_r+0x1c>)
 80013aa:	4605      	mov	r5, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	6023      	str	r3, [r4, #0]
 80013b0:	f7ff f916 	bl	80005e0 <_sbrk>
 80013b4:	1c43      	adds	r3, r0, #1
 80013b6:	d102      	bne.n	80013be <_sbrk_r+0x1a>
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	b103      	cbz	r3, 80013be <_sbrk_r+0x1a>
 80013bc:	602b      	str	r3, [r5, #0]
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	2000008c 	.word	0x2000008c

080013c4 <_raise_r>:
 80013c4:	291f      	cmp	r1, #31
 80013c6:	b538      	push	{r3, r4, r5, lr}
 80013c8:	4604      	mov	r4, r0
 80013ca:	460d      	mov	r5, r1
 80013cc:	d904      	bls.n	80013d8 <_raise_r+0x14>
 80013ce:	2316      	movs	r3, #22
 80013d0:	6003      	str	r3, [r0, #0]
 80013d2:	f04f 30ff 	mov.w	r0, #4294967295
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80013da:	b112      	cbz	r2, 80013e2 <_raise_r+0x1e>
 80013dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80013e0:	b94b      	cbnz	r3, 80013f6 <_raise_r+0x32>
 80013e2:	4620      	mov	r0, r4
 80013e4:	f000 f830 	bl	8001448 <_getpid_r>
 80013e8:	462a      	mov	r2, r5
 80013ea:	4601      	mov	r1, r0
 80013ec:	4620      	mov	r0, r4
 80013ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013f2:	f000 b817 	b.w	8001424 <_kill_r>
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d00a      	beq.n	8001410 <_raise_r+0x4c>
 80013fa:	1c59      	adds	r1, r3, #1
 80013fc:	d103      	bne.n	8001406 <_raise_r+0x42>
 80013fe:	2316      	movs	r3, #22
 8001400:	6003      	str	r3, [r0, #0]
 8001402:	2001      	movs	r0, #1
 8001404:	e7e7      	b.n	80013d6 <_raise_r+0x12>
 8001406:	2400      	movs	r4, #0
 8001408:	4628      	mov	r0, r5
 800140a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800140e:	4798      	blx	r3
 8001410:	2000      	movs	r0, #0
 8001412:	e7e0      	b.n	80013d6 <_raise_r+0x12>

08001414 <raise>:
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <raise+0xc>)
 8001416:	4601      	mov	r1, r0
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f7ff bfd3 	b.w	80013c4 <_raise_r>
 800141e:	bf00      	nop
 8001420:	20000000 	.word	0x20000000

08001424 <_kill_r>:
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	2300      	movs	r3, #0
 8001428:	4c06      	ldr	r4, [pc, #24]	; (8001444 <_kill_r+0x20>)
 800142a:	4605      	mov	r5, r0
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	f7ff f852 	bl	80004da <_kill>
 8001436:	1c43      	adds	r3, r0, #1
 8001438:	d102      	bne.n	8001440 <_kill_r+0x1c>
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	b103      	cbz	r3, 8001440 <_kill_r+0x1c>
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	bd38      	pop	{r3, r4, r5, pc}
 8001442:	bf00      	nop
 8001444:	2000008c 	.word	0x2000008c

08001448 <_getpid_r>:
 8001448:	f7ff b840 	b.w	80004cc <_getpid>

0800144c <__sread>:
 800144c:	b510      	push	{r4, lr}
 800144e:	460c      	mov	r4, r1
 8001450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001454:	f000 f896 	bl	8001584 <_read_r>
 8001458:	2800      	cmp	r0, #0
 800145a:	bfab      	itete	ge
 800145c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800145e:	89a3      	ldrhlt	r3, [r4, #12]
 8001460:	181b      	addge	r3, r3, r0
 8001462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001466:	bfac      	ite	ge
 8001468:	6563      	strge	r3, [r4, #84]	; 0x54
 800146a:	81a3      	strhlt	r3, [r4, #12]
 800146c:	bd10      	pop	{r4, pc}

0800146e <__swrite>:
 800146e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001472:	461f      	mov	r7, r3
 8001474:	898b      	ldrh	r3, [r1, #12]
 8001476:	4605      	mov	r5, r0
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	460c      	mov	r4, r1
 800147c:	4616      	mov	r6, r2
 800147e:	d505      	bpl.n	800148c <__swrite+0x1e>
 8001480:	2302      	movs	r3, #2
 8001482:	2200      	movs	r2, #0
 8001484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001488:	f000 f868 	bl	800155c <_lseek_r>
 800148c:	89a3      	ldrh	r3, [r4, #12]
 800148e:	4632      	mov	r2, r6
 8001490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001494:	81a3      	strh	r3, [r4, #12]
 8001496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800149a:	463b      	mov	r3, r7
 800149c:	4628      	mov	r0, r5
 800149e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014a2:	f000 b817 	b.w	80014d4 <_write_r>

080014a6 <__sseek>:
 80014a6:	b510      	push	{r4, lr}
 80014a8:	460c      	mov	r4, r1
 80014aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014ae:	f000 f855 	bl	800155c <_lseek_r>
 80014b2:	1c43      	adds	r3, r0, #1
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	bf15      	itete	ne
 80014b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80014ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80014be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80014c2:	81a3      	strheq	r3, [r4, #12]
 80014c4:	bf18      	it	ne
 80014c6:	81a3      	strhne	r3, [r4, #12]
 80014c8:	bd10      	pop	{r4, pc}

080014ca <__sclose>:
 80014ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014ce:	f000 b813 	b.w	80014f8 <_close_r>
	...

080014d4 <_write_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4605      	mov	r5, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	2200      	movs	r2, #0
 80014de:	4c05      	ldr	r4, [pc, #20]	; (80014f4 <_write_r+0x20>)
 80014e0:	6022      	str	r2, [r4, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f7ff f830 	bl	8000548 <_write>
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	d102      	bne.n	80014f2 <_write_r+0x1e>
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	b103      	cbz	r3, 80014f2 <_write_r+0x1e>
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	2000008c 	.word	0x2000008c

080014f8 <_close_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	2300      	movs	r3, #0
 80014fc:	4c05      	ldr	r4, [pc, #20]	; (8001514 <_close_r+0x1c>)
 80014fe:	4605      	mov	r5, r0
 8001500:	4608      	mov	r0, r1
 8001502:	6023      	str	r3, [r4, #0]
 8001504:	f7ff f83c 	bl	8000580 <_close>
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d102      	bne.n	8001512 <_close_r+0x1a>
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	b103      	cbz	r3, 8001512 <_close_r+0x1a>
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	bd38      	pop	{r3, r4, r5, pc}
 8001514:	2000008c 	.word	0x2000008c

08001518 <_fstat_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	2300      	movs	r3, #0
 800151c:	4c06      	ldr	r4, [pc, #24]	; (8001538 <_fstat_r+0x20>)
 800151e:	4605      	mov	r5, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	f7ff f836 	bl	8000596 <_fstat>
 800152a:	1c43      	adds	r3, r0, #1
 800152c:	d102      	bne.n	8001534 <_fstat_r+0x1c>
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	b103      	cbz	r3, 8001534 <_fstat_r+0x1c>
 8001532:	602b      	str	r3, [r5, #0]
 8001534:	bd38      	pop	{r3, r4, r5, pc}
 8001536:	bf00      	nop
 8001538:	2000008c 	.word	0x2000008c

0800153c <_isatty_r>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	2300      	movs	r3, #0
 8001540:	4c05      	ldr	r4, [pc, #20]	; (8001558 <_isatty_r+0x1c>)
 8001542:	4605      	mov	r5, r0
 8001544:	4608      	mov	r0, r1
 8001546:	6023      	str	r3, [r4, #0]
 8001548:	f7ff f834 	bl	80005b4 <_isatty>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d102      	bne.n	8001556 <_isatty_r+0x1a>
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	b103      	cbz	r3, 8001556 <_isatty_r+0x1a>
 8001554:	602b      	str	r3, [r5, #0]
 8001556:	bd38      	pop	{r3, r4, r5, pc}
 8001558:	2000008c 	.word	0x2000008c

0800155c <_lseek_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4605      	mov	r5, r0
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	2200      	movs	r2, #0
 8001566:	4c05      	ldr	r4, [pc, #20]	; (800157c <_lseek_r+0x20>)
 8001568:	6022      	str	r2, [r4, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	f7ff f82c 	bl	80005c8 <_lseek>
 8001570:	1c43      	adds	r3, r0, #1
 8001572:	d102      	bne.n	800157a <_lseek_r+0x1e>
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	b103      	cbz	r3, 800157a <_lseek_r+0x1e>
 8001578:	602b      	str	r3, [r5, #0]
 800157a:	bd38      	pop	{r3, r4, r5, pc}
 800157c:	2000008c 	.word	0x2000008c

08001580 <__malloc_lock>:
 8001580:	4770      	bx	lr

08001582 <__malloc_unlock>:
 8001582:	4770      	bx	lr

08001584 <_read_r>:
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	4605      	mov	r5, r0
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	2200      	movs	r2, #0
 800158e:	4c05      	ldr	r4, [pc, #20]	; (80015a4 <_read_r+0x20>)
 8001590:	6022      	str	r2, [r4, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f7fe ffbb 	bl	800050e <_read>
 8001598:	1c43      	adds	r3, r0, #1
 800159a:	d102      	bne.n	80015a2 <_read_r+0x1e>
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	b103      	cbz	r3, 80015a2 <_read_r+0x1e>
 80015a0:	602b      	str	r3, [r5, #0]
 80015a2:	bd38      	pop	{r3, r4, r5, pc}
 80015a4:	2000008c 	.word	0x2000008c

080015a8 <_init>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	bf00      	nop
 80015ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ae:	bc08      	pop	{r3}
 80015b0:	469e      	mov	lr, r3
 80015b2:	4770      	bx	lr

080015b4 <_fini>:
 80015b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b6:	bf00      	nop
 80015b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ba:	bc08      	pop	{r3}
 80015bc:	469e      	mov	lr, r3
 80015be:	4770      	bx	lr
