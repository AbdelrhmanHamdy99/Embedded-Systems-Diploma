
Unit7_Lesson3_Section.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08001fa4  08001fa4  00011fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ac  080021ac  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080021ac  080021ac  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021ac  080021ac  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021b0  080021b0  000121b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080021b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000006c  08002220  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002220  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002cef  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a00  00000000  00000000  00022d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e14  00000000  00000000  00023784  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00024598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001b8  00000000  00000000  000247c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002e41  00000000  00000000  00024980  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002883  00000000  00000000  000277c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a011  00000000  00000000  0002a044  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00034055  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f90  00000000  00000000  000340d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001f8c 	.word	0x08001f8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08001f8c 	.word	0x08001f8c

08000170 <SevenSeg_Init>:
 * @Param [in]	- type : define either the 7Seg is common anode or common cathode
 * 				  Can be a value of @ref SevenSeg_Type_defined
 * @returnValue	- None
 * @Notes		- if invalid argument is passed the 7Seg will be considered as common anode
 */
void SevenSeg_Init(uint8_t type){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	uint8_t i; /*iterator*/
	GPIO_PinConfig_t pinConfig; /*a structure to hold pins configurations*/
	/*configure 7Seg pins as output*/
	pinConfig.pinMode     = GPIO_PIN_MODE_Out_PushPull;
 800017a:	2300      	movs	r3, #0
 800017c:	737b      	strb	r3, [r7, #13]
	pinConfig.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 800017e:	2301      	movs	r3, #1
 8000180:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < SevenSeg_nPins; i++){
 8000182:	2300      	movs	r3, #0
 8000184:	73fb      	strb	r3, [r7, #15]
 8000186:	e00c      	b.n	80001a2 <SevenSeg_Init+0x32>
		pinConfig.pinNumber = SevenSegPins[i];
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	4a0f      	ldr	r2, [pc, #60]	; (80001c8 <SevenSeg_Init+0x58>)
 800018c:	5cd3      	ldrb	r3, [r2, r3]
 800018e:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(SevenSegPort, &pinConfig);
 8000190:	f107 030c 	add.w	r3, r7, #12
 8000194:	4619      	mov	r1, r3
 8000196:	480d      	ldr	r0, [pc, #52]	; (80001cc <SevenSeg_Init+0x5c>)
 8000198:	f000 fcea 	bl	8000b70 <MCAL_GPIO_Init>
	for(i = 0; i < SevenSeg_nPins; i++){
 800019c:	7bfb      	ldrb	r3, [r7, #15]
 800019e:	3301      	adds	r3, #1
 80001a0:	73fb      	strb	r3, [r7, #15]
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	2b06      	cmp	r3, #6
 80001a6:	d9ef      	bls.n	8000188 <SevenSeg_Init+0x18>
	}
	SevenSeg_Type = type == SevenSeg_Type_Com_Cath ? Com_Cath : Com_An;
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	bf0c      	ite	eq
 80001ae:	2301      	moveq	r3, #1
 80001b0:	2300      	movne	r3, #0
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	461a      	mov	r2, r3
 80001b6:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <SevenSeg_Init+0x60>)
 80001b8:	701a      	strb	r2, [r3, #0]
	SevenSeg_Clear();
 80001ba:	f000 f913 	bl	80003e4 <SevenSeg_Clear>
}
 80001be:	bf00      	nop
 80001c0:	3710      	adds	r7, #16
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	0800206c 	.word	0x0800206c
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	20000088 	.word	0x20000088

080001d4 <SevenSeg_DisplayNumber>:
 * @Param [in]	- num : the number to be displayed
 * @returnValue	- None
 * @Notes		- invalid parameter is handled by clearing the 7Seg
 * 				  this function can handle numbers in numeric or ascii value
 */
void SevenSeg_DisplayNumber(char num){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	uint8_t i; /*iterator*/
	uint8_t pinVal = SevenSeg_Type == Com_Cath ? GPIO_PIN_Value_High : GPIO_PIN_Value_Low;
 80001de:	4b7e      	ldr	r3, [pc, #504]	; (80003d8 <SevenSeg_DisplayNumber+0x204>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf0c      	ite	eq
 80001e6:	2301      	moveq	r3, #1
 80001e8:	2300      	movne	r3, #0
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	73bb      	strb	r3, [r7, #14]
	/*the most common pattern is 0b1111011*/
	/*start by default value*/
	for(i = 0 ; i < SevenSeg_nPins;i++){
 80001ee:	2300      	movs	r3, #0
 80001f0:	73fb      	strb	r3, [r7, #15]
 80001f2:	e00a      	b.n	800020a <SevenSeg_DisplayNumber+0x36>
		MCAL_GPIO_WritePin(SevenSegPort, SevenSegPins[i], pinVal);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4a79      	ldr	r2, [pc, #484]	; (80003dc <SevenSeg_DisplayNumber+0x208>)
 80001f8:	5cd3      	ldrb	r3, [r2, r3]
 80001fa:	7bba      	ldrb	r2, [r7, #14]
 80001fc:	4619      	mov	r1, r3
 80001fe:	4878      	ldr	r0, [pc, #480]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000200:	f000 fdbc 	bl	8000d7c <MCAL_GPIO_WritePin>
	for(i = 0 ; i < SevenSeg_nPins;i++){
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	3301      	adds	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	2b06      	cmp	r3, #6
 800020e:	d9f1      	bls.n	80001f4 <SevenSeg_DisplayNumber+0x20>
	}
	MCAL_GPIO_WritePin(SevenSegPort, SevenSeg_e, !pinVal);
 8000210:	7bbb      	ldrb	r3, [r7, #14]
 8000212:	2b00      	cmp	r3, #0
 8000214:	bf0c      	ite	eq
 8000216:	2301      	moveq	r3, #1
 8000218:	2300      	movne	r3, #0
 800021a:	b2db      	uxtb	r3, r3
 800021c:	461a      	mov	r2, r3
 800021e:	2107      	movs	r1, #7
 8000220:	486f      	ldr	r0, [pc, #444]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000222:	f000 fdab 	bl	8000d7c <MCAL_GPIO_WritePin>

	/*toggle pins based on the number to be displayed*/
	switch (num) {
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b39      	cmp	r3, #57	; 0x39
 800022a:	f200 80cc 	bhi.w	80003c6 <SevenSeg_DisplayNumber+0x1f2>
 800022e:	a201      	add	r2, pc, #4	; (adr r2, 8000234 <SevenSeg_DisplayNumber+0x60>)
 8000230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000234:	0800031d 	.word	0x0800031d
 8000238:	0800032f 	.word	0x0800032f
 800023c:	08000351 	.word	0x08000351
 8000240:	0800036b 	.word	0x0800036b
 8000244:	08000375 	.word	0x08000375
 8000248:	08000387 	.word	0x08000387
 800024c:	08000391 	.word	0x08000391
 8000250:	080003a3 	.word	0x080003a3
 8000254:	080003bd 	.word	0x080003bd
 8000258:	080003cd 	.word	0x080003cd
 800025c:	080003c7 	.word	0x080003c7
 8000260:	080003c7 	.word	0x080003c7
 8000264:	080003c7 	.word	0x080003c7
 8000268:	080003c7 	.word	0x080003c7
 800026c:	080003c7 	.word	0x080003c7
 8000270:	080003c7 	.word	0x080003c7
 8000274:	080003c7 	.word	0x080003c7
 8000278:	080003c7 	.word	0x080003c7
 800027c:	080003c7 	.word	0x080003c7
 8000280:	080003c7 	.word	0x080003c7
 8000284:	080003c7 	.word	0x080003c7
 8000288:	080003c7 	.word	0x080003c7
 800028c:	080003c7 	.word	0x080003c7
 8000290:	080003c7 	.word	0x080003c7
 8000294:	080003c7 	.word	0x080003c7
 8000298:	080003c7 	.word	0x080003c7
 800029c:	080003c7 	.word	0x080003c7
 80002a0:	080003c7 	.word	0x080003c7
 80002a4:	080003c7 	.word	0x080003c7
 80002a8:	080003c7 	.word	0x080003c7
 80002ac:	080003c7 	.word	0x080003c7
 80002b0:	080003c7 	.word	0x080003c7
 80002b4:	080003c7 	.word	0x080003c7
 80002b8:	080003c7 	.word	0x080003c7
 80002bc:	080003c7 	.word	0x080003c7
 80002c0:	080003c7 	.word	0x080003c7
 80002c4:	080003c7 	.word	0x080003c7
 80002c8:	080003c7 	.word	0x080003c7
 80002cc:	080003c7 	.word	0x080003c7
 80002d0:	080003c7 	.word	0x080003c7
 80002d4:	080003c7 	.word	0x080003c7
 80002d8:	080003c7 	.word	0x080003c7
 80002dc:	080003c7 	.word	0x080003c7
 80002e0:	080003c7 	.word	0x080003c7
 80002e4:	080003c7 	.word	0x080003c7
 80002e8:	080003c7 	.word	0x080003c7
 80002ec:	080003c7 	.word	0x080003c7
 80002f0:	080003c7 	.word	0x080003c7
 80002f4:	0800031d 	.word	0x0800031d
 80002f8:	0800032f 	.word	0x0800032f
 80002fc:	08000351 	.word	0x08000351
 8000300:	0800036b 	.word	0x0800036b
 8000304:	08000375 	.word	0x08000375
 8000308:	08000387 	.word	0x08000387
 800030c:	08000391 	.word	0x08000391
 8000310:	080003a3 	.word	0x080003a3
 8000314:	080003bd 	.word	0x080003bd
 8000318:	080003cd 	.word	0x080003cd
	case 0:
	case '0':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_e);
 800031c:	2107      	movs	r1, #7
 800031e:	4830      	ldr	r0, [pc, #192]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000320:	f000 fd5e 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_g);
 8000324:	2109      	movs	r1, #9
 8000326:	482e      	ldr	r0, [pc, #184]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000328:	f000 fd5a 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 800032c:	e04f      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
	case 1:
	case '1':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_a);
 800032e:	2103      	movs	r1, #3
 8000330:	482b      	ldr	r0, [pc, #172]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000332:	f000 fd55 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_d);
 8000336:	2106      	movs	r1, #6
 8000338:	4829      	ldr	r0, [pc, #164]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 800033a:	f000 fd51 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_f);
 800033e:	2108      	movs	r1, #8
 8000340:	4827      	ldr	r0, [pc, #156]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000342:	f000 fd4d 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_g);
 8000346:	2109      	movs	r1, #9
 8000348:	4825      	ldr	r0, [pc, #148]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 800034a:	f000 fd49 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 800034e:	e03e      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
	case 2:
	case '2':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_c);
 8000350:	2105      	movs	r1, #5
 8000352:	4823      	ldr	r0, [pc, #140]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000354:	f000 fd44 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_e);
 8000358:	2107      	movs	r1, #7
 800035a:	4821      	ldr	r0, [pc, #132]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 800035c:	f000 fd40 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_f);
 8000360:	2108      	movs	r1, #8
 8000362:	481f      	ldr	r0, [pc, #124]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000364:	f000 fd3c 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 8000368:	e031      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
	case 3:
	case '3':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_f);
 800036a:	2108      	movs	r1, #8
 800036c:	481c      	ldr	r0, [pc, #112]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 800036e:	f000 fd37 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 8000372:	e02c      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
	case 4:
	case '4':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_a);
 8000374:	2103      	movs	r1, #3
 8000376:	481a      	ldr	r0, [pc, #104]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000378:	f000 fd32 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_d);
 800037c:	2106      	movs	r1, #6
 800037e:	4818      	ldr	r0, [pc, #96]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000380:	f000 fd2e 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 8000384:	e023      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
	case 5:
	case '5':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_b);
 8000386:	2104      	movs	r1, #4
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 800038a:	f000 fd29 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 800038e:	e01e      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
	case 6:
	case '6':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_b);
 8000390:	2104      	movs	r1, #4
 8000392:	4813      	ldr	r0, [pc, #76]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 8000394:	f000 fd24 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_e);
 8000398:	2107      	movs	r1, #7
 800039a:	4811      	ldr	r0, [pc, #68]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 800039c:	f000 fd20 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 80003a0:	e015      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
	case 7:
	case '7':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_d);
 80003a2:	2106      	movs	r1, #6
 80003a4:	480e      	ldr	r0, [pc, #56]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 80003a6:	f000 fd1b 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_f);
 80003aa:	2108      	movs	r1, #8
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 80003ae:	f000 fd17 	bl	8000de0 <MCAL_GPIO_TogglePin>
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_g);
 80003b2:	2109      	movs	r1, #9
 80003b4:	480a      	ldr	r0, [pc, #40]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 80003b6:	f000 fd13 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 80003ba:	e008      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
	case 8:
	case '8':
		MCAL_GPIO_TogglePin(SevenSegPort, SevenSeg_e);
 80003bc:	2107      	movs	r1, #7
 80003be:	4808      	ldr	r0, [pc, #32]	; (80003e0 <SevenSeg_DisplayNumber+0x20c>)
 80003c0:	f000 fd0e 	bl	8000de0 <MCAL_GPIO_TogglePin>
		break;
 80003c4:	e003      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
		/*nothing to toggle*/
		break;
	default:
		/*wrong entry*/
		/*Clear the 7Seg Display*/
		SevenSeg_Clear();
 80003c6:	f000 f80d 	bl	80003e4 <SevenSeg_Clear>
		break;
 80003ca:	e000      	b.n	80003ce <SevenSeg_DisplayNumber+0x1fa>
		break;
 80003cc:	bf00      	nop
	}
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000088 	.word	0x20000088
 80003dc:	0800206c 	.word	0x0800206c
 80003e0:	40010c00 	.word	0x40010c00

080003e4 <SevenSeg_Clear>:
 * @Fn			- SevenSeg_Clear
 * @brief		- Clears the 7Seg Display
 * @returnValue	- None
 * @Notes		- None
 */
void SevenSeg_Clear(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	uint8_t i; /*iterator*/
	uint8_t resetVal = SevenSeg_Type == Com_Cath ? GPIO_PIN_Value_Low : GPIO_PIN_Value_High;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <SevenSeg_Clear+0x40>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	bf14      	ite	ne
 80003f2:	2301      	movne	r3, #1
 80003f4:	2300      	moveq	r3, #0
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	71bb      	strb	r3, [r7, #6]
	/*reset all pins*/
	for(i = 0 ; i < SevenSeg_nPins;i++){
 80003fa:	2300      	movs	r3, #0
 80003fc:	71fb      	strb	r3, [r7, #7]
 80003fe:	e00a      	b.n	8000416 <SevenSeg_Clear+0x32>
		MCAL_GPIO_WritePin(SevenSegPort, SevenSegPins[i], resetVal);
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	4a09      	ldr	r2, [pc, #36]	; (8000428 <SevenSeg_Clear+0x44>)
 8000404:	5cd3      	ldrb	r3, [r2, r3]
 8000406:	79ba      	ldrb	r2, [r7, #6]
 8000408:	4619      	mov	r1, r3
 800040a:	4808      	ldr	r0, [pc, #32]	; (800042c <SevenSeg_Clear+0x48>)
 800040c:	f000 fcb6 	bl	8000d7c <MCAL_GPIO_WritePin>
	for(i = 0 ; i < SevenSeg_nPins;i++){
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	3301      	adds	r3, #1
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b06      	cmp	r3, #6
 800041a:	d9f1      	bls.n	8000400 <SevenSeg_Clear+0x1c>
	}
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000088 	.word	0x20000088
 8000428:	0800206c 	.word	0x0800206c
 800042c:	40010c00 	.word	0x40010c00

08000430 <keyPad_Init>:
 * @Fn			- keyPad_Init
 * @brief		- Initialize the KeyPad to be ready to use
 * @returnValue	- None
 * @notes		- None
 */
void keyPad_Init(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	uint8_t i;
	/*define keypad pins directions*/
	/*Rows as output*/
	GPIO_PinConfig_t pinConfig;
	pinConfig.pinMode     = GPIO_PIN_MODE_Out_PushPull;
 8000436:	2300      	movs	r3, #0
 8000438:	717b      	strb	r3, [r7, #5]
	pinConfig.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 800043a:	2301      	movs	r3, #1
 800043c:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < n_Rows; i++){
 800043e:	2300      	movs	r3, #0
 8000440:	71fb      	strb	r3, [r7, #7]
 8000442:	e00b      	b.n	800045c <keyPad_Init+0x2c>
		pinConfig.pinNumber   = KeyPad_Rows[i];
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <keyPad_Init+0x84>)
 8000448:	5cd3      	ldrb	r3, [r2, r3]
 800044a:	713b      	strb	r3, [r7, #4]
		MCAL_GPIO_Init(KeyPad_Rows_Port, &pinConfig);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	4819      	ldr	r0, [pc, #100]	; (80004b8 <keyPad_Init+0x88>)
 8000452:	f000 fb8d 	bl	8000b70 <MCAL_GPIO_Init>
	for(i = 0; i < n_Rows; i++){
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	3301      	adds	r3, #1
 800045a:	71fb      	strb	r3, [r7, #7]
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b03      	cmp	r3, #3
 8000460:	d9f0      	bls.n	8000444 <keyPad_Init+0x14>
	}
	/*all Rows are high at initialization*/
	for(i = 0; i < n_Rows; i++){
 8000462:	2300      	movs	r3, #0
 8000464:	71fb      	strb	r3, [r7, #7]
 8000466:	e00a      	b.n	800047e <keyPad_Init+0x4e>
		MCAL_GPIO_WritePin(KeyPad_Rows_Port, KeyPad_Rows[i], GPIO_PIN_Value_Low);
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <keyPad_Init+0x84>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	2200      	movs	r2, #0
 8000470:	4619      	mov	r1, r3
 8000472:	4811      	ldr	r0, [pc, #68]	; (80004b8 <keyPad_Init+0x88>)
 8000474:	f000 fc82 	bl	8000d7c <MCAL_GPIO_WritePin>
	for(i = 0; i < n_Rows; i++){
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	3301      	adds	r3, #1
 800047c:	71fb      	strb	r3, [r7, #7]
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b03      	cmp	r3, #3
 8000482:	d9f1      	bls.n	8000468 <keyPad_Init+0x38>
	}

	/*Columns as input*/
	pinConfig.pinMode = GPIO_PIN_MODE_IN_PullDown;
 8000484:	2306      	movs	r3, #6
 8000486:	717b      	strb	r3, [r7, #5]
	for(i = 0; i < n_Cols; i++){
 8000488:	2300      	movs	r3, #0
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	e00b      	b.n	80004a6 <keyPad_Init+0x76>
		pinConfig.pinNumber   = KeyPad_Cols[i];
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <keyPad_Init+0x8c>)
 8000492:	5cd3      	ldrb	r3, [r2, r3]
 8000494:	713b      	strb	r3, [r7, #4]
		MCAL_GPIO_Init(KeyPad_Cols_Port, &pinConfig);
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4807      	ldr	r0, [pc, #28]	; (80004b8 <keyPad_Init+0x88>)
 800049c:	f000 fb68 	bl	8000b70 <MCAL_GPIO_Init>
	for(i = 0; i < n_Cols; i++){
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	3301      	adds	r3, #1
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d9f0      	bls.n	800048e <keyPad_Init+0x5e>
	}
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000000 	.word	0x20000000
 80004b8:	40010800 	.word	0x40010800
 80004bc:	20000004 	.word	0x20000004

080004c0 <KeyPad_GetKeyPressed>:
 * @Fn			- KeyPad_GetKeyPressed
 * @brief		- read the pressed button value
 * @returnValue	- the value of the pressed key
 * 				  Null if no key is pressed
 */
char KeyPad_GetKeyPressed(void){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i = 0; i < n_Rows; i++){
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e04d      	b.n	8000568 <KeyPad_GetKeyPressed+0xa8>
		/*light up only one row at a time*/
		MCAL_GPIO_WritePin(KeyPad_Rows_Port, KeyPad_Rows[i], GPIO_PIN_Value_High);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4a2a      	ldr	r2, [pc, #168]	; (8000578 <KeyPad_GetKeyPressed+0xb8>)
 80004d0:	5cd3      	ldrb	r3, [r2, r3]
 80004d2:	2201      	movs	r2, #1
 80004d4:	4619      	mov	r1, r3
 80004d6:	4829      	ldr	r0, [pc, #164]	; (800057c <KeyPad_GetKeyPressed+0xbc>)
 80004d8:	f000 fc50 	bl	8000d7c <MCAL_GPIO_WritePin>

		for (j = 0; j < n_Cols; j++)
 80004dc:	2300      	movs	r3, #0
 80004de:	71bb      	strb	r3, [r7, #6]
 80004e0:	e034      	b.n	800054c <KeyPad_GetKeyPressed+0x8c>
		{
			if(MCAL_GPIO_ReadPin(KeyPad_Cols_Port, KeyPad_Cols[j]) == GPIO_PIN_Value_High){
 80004e2:	79bb      	ldrb	r3, [r7, #6]
 80004e4:	4a26      	ldr	r2, [pc, #152]	; (8000580 <KeyPad_GetKeyPressed+0xc0>)
 80004e6:	5cd3      	ldrb	r3, [r2, r3]
 80004e8:	4619      	mov	r1, r3
 80004ea:	4824      	ldr	r0, [pc, #144]	; (800057c <KeyPad_GetKeyPressed+0xbc>)
 80004ec:	f000 fc24 	bl	8000d38 <MCAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d127      	bne.n	8000546 <KeyPad_GetKeyPressed+0x86>
				_delay_ms(20); /*avoid debouncing*/
 80004f6:	2014      	movs	r0, #20
 80004f8:	f000 f846 	bl	8000588 <_delay_ms>
				if(MCAL_GPIO_ReadPin(KeyPad_Cols_Port, KeyPad_Cols[j]) == GPIO_PIN_Value_High){
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	4a20      	ldr	r2, [pc, #128]	; (8000580 <KeyPad_GetKeyPressed+0xc0>)
 8000500:	5cd3      	ldrb	r3, [r2, r3]
 8000502:	4619      	mov	r1, r3
 8000504:	481d      	ldr	r0, [pc, #116]	; (800057c <KeyPad_GetKeyPressed+0xbc>)
 8000506:	f000 fc17 	bl	8000d38 <MCAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	2b01      	cmp	r3, #1
 800050e:	d11a      	bne.n	8000546 <KeyPad_GetKeyPressed+0x86>
					/*avoid long press*/
					while(MCAL_GPIO_ReadPin(KeyPad_Cols_Port, KeyPad_Cols[j]) == GPIO_PIN_Value_High);
 8000510:	bf00      	nop
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	4a1a      	ldr	r2, [pc, #104]	; (8000580 <KeyPad_GetKeyPressed+0xc0>)
 8000516:	5cd3      	ldrb	r3, [r2, r3]
 8000518:	4619      	mov	r1, r3
 800051a:	4818      	ldr	r0, [pc, #96]	; (800057c <KeyPad_GetKeyPressed+0xbc>)
 800051c:	f000 fc0c 	bl	8000d38 <MCAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b01      	cmp	r3, #1
 8000524:	d0f5      	beq.n	8000512 <KeyPad_GetKeyPressed+0x52>
					MCAL_GPIO_WritePin(KeyPad_Rows_Port, KeyPad_Rows[i], GPIO_PIN_Value_Low); /*Turn off the row*/
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <KeyPad_GetKeyPressed+0xb8>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <KeyPad_GetKeyPressed+0xbc>)
 8000532:	f000 fc23 	bl	8000d7c <MCAL_GPIO_WritePin>
					return KeyPad_Character_Matrix[i][j]; /*return the pressed key*/
 8000536:	79fa      	ldrb	r2, [r7, #7]
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	4912      	ldr	r1, [pc, #72]	; (8000584 <KeyPad_GetKeyPressed+0xc4>)
 800053c:	0092      	lsls	r2, r2, #2
 800053e:	440a      	add	r2, r1
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	e014      	b.n	8000570 <KeyPad_GetKeyPressed+0xb0>
		for (j = 0; j < n_Cols; j++)
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	3301      	adds	r3, #1
 800054a:	71bb      	strb	r3, [r7, #6]
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d9c7      	bls.n	80004e2 <KeyPad_GetKeyPressed+0x22>
				}
			}
		}
		MCAL_GPIO_WritePin(KeyPad_Rows_Port, KeyPad_Rows[i], GPIO_PIN_Value_Low); /*Turn off that row*/
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <KeyPad_GetKeyPressed+0xb8>)
 8000556:	5cd3      	ldrb	r3, [r2, r3]
 8000558:	2200      	movs	r2, #0
 800055a:	4619      	mov	r1, r3
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <KeyPad_GetKeyPressed+0xbc>)
 800055e:	f000 fc0d 	bl	8000d7c <MCAL_GPIO_WritePin>
	for(i = 0; i < n_Rows; i++){
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	3301      	adds	r3, #1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d9ae      	bls.n	80004cc <KeyPad_GetKeyPressed+0xc>
	}
	return NULL; /*no character is pressed */
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000000 	.word	0x20000000
 800057c:	40010800 	.word	0x40010800
 8000580:	20000004 	.word	0x20000004
 8000584:	08002074 	.word	0x08002074

08000588 <_delay_ms>:
 * @brief		- Force software Delay
 * @param [in]	- time : Simulate numer of milliseconds you want to hang up
 * @returnValue	- None
 * @Notes		- This Function Simulates waiting for (time)ms.
 */
static void _delay_ms(uint16_t time){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	while(time--){
 8000592:	bf00      	nop
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	80fa      	strh	r2, [r7, #6]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1fa      	bne.n	8000594 <_delay_ms+0xc>
//		uint32_t i ;
//		for(i = 0 ; i < 255; i++);
	}
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <LCD_Init>:
 * @Notes		- False Configuration is handled by assigning default values
 * 				  default LCDconfig->function_set = Function_Set_8bit_2line_5x8
 * 				  default LCDconfig->Display_control = Display_Control_D_On_C_On_B_On
 * 				  default LCDconfig->Entry_mode = Entry_Mode_Inc_No_S
 */
void LCD_Init(LCD_Config_t* LCDconfig){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	int8_t i; /*iterator*/
	GPIO_PinConfig_t PinConfig; /*a structure to hold configurations of pins*/
	/*initialize directions for LCD pins*/
	/*Control pins as output*/
	PinConfig.pinMode     = GPIO_PIN_MODE_Out_PushPull;
 80005b0:	2300      	movs	r3, #0
 80005b2:	737b      	strb	r3, [r7, #13]
	PinConfig.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73bb      	strb	r3, [r7, #14]
	/*RS*/
	PinConfig.pinNumber   = RS;
 80005b8:	230a      	movs	r3, #10
 80005ba:	733b      	strb	r3, [r7, #12]
	MCAL_GPIO_Init(LCD_Control_Port, &PinConfig);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	487b      	ldr	r0, [pc, #492]	; (80007b0 <LCD_Init+0x208>)
 80005c4:	f000 fad4 	bl	8000b70 <MCAL_GPIO_Init>
	/*RW*/
	PinConfig.pinNumber   = RW;
 80005c8:	2309      	movs	r3, #9
 80005ca:	733b      	strb	r3, [r7, #12]
	MCAL_GPIO_Init(LCD_Control_Port, &PinConfig);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	4877      	ldr	r0, [pc, #476]	; (80007b0 <LCD_Init+0x208>)
 80005d4:	f000 facc 	bl	8000b70 <MCAL_GPIO_Init>
	/*E*/
	PinConfig.pinNumber   = E;
 80005d8:	2308      	movs	r3, #8
 80005da:	733b      	strb	r3, [r7, #12]
	MCAL_GPIO_Init(LCD_Control_Port, &PinConfig);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	4873      	ldr	r0, [pc, #460]	; (80007b0 <LCD_Init+0x208>)
 80005e4:	f000 fac4 	bl	8000b70 <MCAL_GPIO_Init>


	/*disable LCD*/
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	4870      	ldr	r0, [pc, #448]	; (80007b0 <LCD_Init+0x208>)
 80005ee:	f000 fbc5 	bl	8000d7c <MCAL_GPIO_WritePin>
	_delay_ms(20); /*waiting until automatic initialization finishes*/
 80005f2:	2014      	movs	r0, #20
 80005f4:	f000 fa92 	bl	8000b1c <_delay_ms>

	switch(LCDconfig->function_set){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3b20      	subs	r3, #32
 80005fe:	2b18      	cmp	r3, #24
 8000600:	f200 809d 	bhi.w	800073e <LCD_Init+0x196>
 8000604:	a201      	add	r2, pc, #4	; (adr r2, 800060c <LCD_Init+0x64>)
 8000606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060a:	bf00      	nop
 800060c:	08000671 	.word	0x08000671
 8000610:	0800073f 	.word	0x0800073f
 8000614:	0800073f 	.word	0x0800073f
 8000618:	0800073f 	.word	0x0800073f
 800061c:	08000671 	.word	0x08000671
 8000620:	0800073f 	.word	0x0800073f
 8000624:	0800073f 	.word	0x0800073f
 8000628:	0800073f 	.word	0x0800073f
 800062c:	08000671 	.word	0x08000671
 8000630:	0800073f 	.word	0x0800073f
 8000634:	0800073f 	.word	0x0800073f
 8000638:	0800073f 	.word	0x0800073f
 800063c:	0800073f 	.word	0x0800073f
 8000640:	0800073f 	.word	0x0800073f
 8000644:	0800073f 	.word	0x0800073f
 8000648:	0800073f 	.word	0x0800073f
 800064c:	08000737 	.word	0x08000737
 8000650:	0800073f 	.word	0x0800073f
 8000654:	0800073f 	.word	0x0800073f
 8000658:	0800073f 	.word	0x0800073f
 800065c:	08000737 	.word	0x08000737
 8000660:	0800073f 	.word	0x0800073f
 8000664:	0800073f 	.word	0x0800073f
 8000668:	0800073f 	.word	0x0800073f
 800066c:	08000737 	.word	0x08000737
	case Function_Set_4bit_1line_5x8  :
	case Function_Set_4bit_1line_5x10 :
	case Function_Set_4bit_2line_5x8  :
		LCD_Interface = LCD_4_bit; /*set the LCD interface*/
 8000670:	4b50      	ldr	r3, [pc, #320]	; (80007b4 <LCD_Init+0x20c>)
 8000672:	2204      	movs	r2, #4
 8000674:	701a      	strb	r2, [r3, #0]
		/*Sets the LCD to 4-bit operation*/
		/*1. Configure LCD High pins as output*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000676:	2307      	movs	r3, #7
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e010      	b.n	800069e <LCD_Init+0xf6>
			PinConfig.pinNumber   = LCD_DataPins[i];
 800067c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000680:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <LCD_Init+0x210>)
 8000682:	5cd3      	ldrb	r3, [r2, r3]
 8000684:	733b      	strb	r3, [r7, #12]
			MCAL_GPIO_Init(LCD_Data_Port, &PinConfig);
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4619      	mov	r1, r3
 800068c:	484b      	ldr	r0, [pc, #300]	; (80007bc <LCD_Init+0x214>)
 800068e:	f000 fa6f 	bl	8000b70 <MCAL_GPIO_Init>
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3b01      	subs	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	73fb      	strb	r3, [r7, #15]
 800069e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006a2:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <LCD_Init+0x20c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f1c3 0308 	rsb	r3, r3, #8
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dae6      	bge.n	800067c <LCD_Init+0xd4>
		}
		/*2. then send the command*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80006ae:	2307      	movs	r3, #7
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e018      	b.n	80006e6 <LCD_Init+0x13e>
			MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (LCDconfig->function_set >> i) &1);
 80006b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b8:	4a3f      	ldr	r2, [pc, #252]	; (80007b8 <LCD_Init+0x210>)
 80006ba:	5cd1      	ldrb	r1, [r2, r3]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c6:	fa42 f303 	asr.w	r3, r2, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	4839      	ldr	r0, [pc, #228]	; (80007bc <LCD_Init+0x214>)
 80006d6:	f000 fb51 	bl	8000d7c <MCAL_GPIO_WritePin>
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80006da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006ea:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <LCD_Init+0x20c>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f1c3 0308 	rsb	r3, r3, #8
 80006f2:	429a      	cmp	r2, r3
 80006f4:	dade      	bge.n	80006b4 <LCD_Init+0x10c>
		}

		MCAL_GPIO_WritePin(LCD_Control_Port, RS, GPIO_PIN_Value_Low);/*Instruction*/
 80006f6:	2200      	movs	r2, #0
 80006f8:	210a      	movs	r1, #10
 80006fa:	482d      	ldr	r0, [pc, #180]	; (80007b0 <LCD_Init+0x208>)
 80006fc:	f000 fb3e 	bl	8000d7c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_Control_Port, RW, GPIO_PIN_Value_Low);/*Write*/
 8000700:	2200      	movs	r2, #0
 8000702:	2109      	movs	r1, #9
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <LCD_Init+0x208>)
 8000706:	f000 fb39 	bl	8000d7c <MCAL_GPIO_WritePin>

		_delay_ns(40); /*TAS = 50ns (min= 40ns)*/
 800070a:	2028      	movs	r0, #40	; 0x28
 800070c:	f000 fa20 	bl	8000b50 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 8000710:	2201      	movs	r2, #1
 8000712:	2108      	movs	r1, #8
 8000714:	4826      	ldr	r0, [pc, #152]	; (80007b0 <LCD_Init+0x208>)
 8000716:	f000 fb31 	bl	8000d7c <MCAL_GPIO_WritePin>
		_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 800071a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800071e:	f000 fa17 	bl	8000b50 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000722:	2200      	movs	r2, #0
 8000724:	2108      	movs	r1, #8
 8000726:	4822      	ldr	r0, [pc, #136]	; (80007b0 <LCD_Init+0x208>)
 8000728:	f000 fb28 	bl	8000d7c <MCAL_GPIO_WritePin>
		_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 800072c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000730:	f000 fa0e 	bl	8000b50 <_delay_ns>
		/*only this instruction completes with one write.*/
		break;
 8000734:	e00a      	b.n	800074c <LCD_Init+0x1a4>
	case Function_Set_8bit_1line_5x8 :
	case Function_Set_8bit_1line_5x10:
	case Function_Set_8bit_2line_5x8 :
		LCD_Interface = LCD_8_bit;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <LCD_Init+0x20c>)
 8000738:	2208      	movs	r2, #8
 800073a:	701a      	strb	r2, [r3, #0]
		break;
 800073c:	e006      	b.n	800074c <LCD_Init+0x1a4>
	default:
		LCD_Interface = LCD_8_bit;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <LCD_Init+0x20c>)
 8000740:	2208      	movs	r2, #8
 8000742:	701a      	strb	r2, [r3, #0]
		LCDconfig->function_set = Function_Set_8bit_2line_5x8;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2238      	movs	r2, #56	; 0x38
 8000748:	701a      	strb	r2, [r3, #0]
		break;
 800074a:	bf00      	nop
	}
	switch (LCDconfig->Display_control) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	2b08      	cmp	r3, #8
 8000752:	d008      	beq.n	8000766 <LCD_Init+0x1be>
 8000754:	2b08      	cmp	r3, #8
 8000756:	db02      	blt.n	800075e <LCD_Init+0x1b6>
 8000758:	3b0c      	subs	r3, #12
 800075a:	2b03      	cmp	r3, #3
 800075c:	d903      	bls.n	8000766 <LCD_Init+0x1be>
		/*Correct Initialization*/
		/*do nothing*/
		break;
	default:
		/*false initialization*/
		LCDconfig->Display_control = Display_Control_D_On_C_On_B_On;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	220f      	movs	r2, #15
 8000762:	705a      	strb	r2, [r3, #1]
		break;
 8000764:	e000      	b.n	8000768 <LCD_Init+0x1c0>
		break;
 8000766:	bf00      	nop
	}

	switch (LCDconfig->Entry_mode) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	3b04      	subs	r3, #4
 800076e:	2b03      	cmp	r3, #3
 8000770:	d903      	bls.n	800077a <LCD_Init+0x1d2>
		/*Correct Initialization*/
		/*do nothing*/
		break;
	default:
		/*false initialization*/
		LCDconfig->Entry_mode = Entry_Mode_Inc_No_S;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2206      	movs	r2, #6
 8000776:	709a      	strb	r2, [r3, #2]
		break;
 8000778:	e000      	b.n	800077c <LCD_Init+0x1d4>
		break;
 800077a:	bf00      	nop
	}
	/*after the LCD is ready Start Sending the Commands*/
	LCD_Write_Command(LCDconfig->function_set);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f81d 	bl	80007c0 <LCD_Write_Command>
	LCD_Write_Command(LCDconfig->Entry_mode);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	789b      	ldrb	r3, [r3, #2]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f818 	bl	80007c0 <LCD_Write_Command>
	LCD_Write_Command(LCDconfig->Display_control);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	785b      	ldrb	r3, [r3, #1]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f813 	bl	80007c0 <LCD_Write_Command>
	LCD_Write_Command(LCD_Clear);
 800079a:	2001      	movs	r0, #1
 800079c:	f000 f810 	bl	80007c0 <LCD_Write_Command>
	LCD_Write_Command(LCD_Return_Home);
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 f80d 	bl	80007c0 <LCD_Write_Command>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010800 	.word	0x40010800
 80007b4:	2000008a 	.word	0x2000008a
 80007b8:	08002084 	.word	0x08002084
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <LCD_Write_Command>:
 * @brief		- Send Command To the LCD
 * @Param [in]	- command : the command to be sent
 * @returnValue	- None
 * @Notes		- Wrong or Invalid Command is not handled
 */
void LCD_Write_Command(char command){
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	int8_t i; /*iterator*/
	GPIO_PinConfig_t pinConfig; /*a structure to hold configurations of pins*/

	/*Change direction of data bins to be output*/
	pinConfig.pinMode     = GPIO_PIN_MODE_Out_PushPull;
 80007ca:	2300      	movs	r3, #0
 80007cc:	737b      	strb	r3, [r7, #13]
	pinConfig.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73bb      	strb	r3, [r7, #14]
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80007d2:	2307      	movs	r3, #7
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e010      	b.n	80007fa <LCD_Write_Command+0x3a>
		pinConfig.pinNumber   = LCD_DataPins[i];
 80007d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007dc:	4a5d      	ldr	r2, [pc, #372]	; (8000954 <LCD_Write_Command+0x194>)
 80007de:	5cd3      	ldrb	r3, [r2, r3]
 80007e0:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(LCD_Data_Port, &pinConfig);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	485b      	ldr	r0, [pc, #364]	; (8000958 <LCD_Write_Command+0x198>)
 80007ea:	f000 f9c1 	bl	8000b70 <MCAL_GPIO_Init>
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	3b01      	subs	r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007fe:	4b57      	ldr	r3, [pc, #348]	; (800095c <LCD_Write_Command+0x19c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f1c3 0308 	rsb	r3, r3, #8
 8000806:	429a      	cmp	r2, r3
 8000808:	dae6      	bge.n	80007d8 <LCD_Write_Command+0x18>
	}

	MCAL_GPIO_WritePin(LCD_Control_Port, RS, GPIO_PIN_Value_Low);/*Instruction*/
 800080a:	2200      	movs	r2, #0
 800080c:	210a      	movs	r1, #10
 800080e:	4854      	ldr	r0, [pc, #336]	; (8000960 <LCD_Write_Command+0x1a0>)
 8000810:	f000 fab4 	bl	8000d7c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control_Port, RW, GPIO_PIN_Value_Low);/*Write*/
 8000814:	2200      	movs	r2, #0
 8000816:	2109      	movs	r1, #9
 8000818:	4851      	ldr	r0, [pc, #324]	; (8000960 <LCD_Write_Command+0x1a0>)
 800081a:	f000 faaf 	bl	8000d7c <MCAL_GPIO_WritePin>

	/*Write command*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 800081e:	2307      	movs	r3, #7
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e016      	b.n	8000852 <LCD_Write_Command+0x92>
		MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i) &1);
 8000824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000828:	4a4a      	ldr	r2, [pc, #296]	; (8000954 <LCD_Write_Command+0x194>)
 800082a:	5cd1      	ldrb	r1, [r2, r3]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000832:	fa42 f303 	asr.w	r3, r2, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	4845      	ldr	r0, [pc, #276]	; (8000958 <LCD_Write_Command+0x198>)
 8000842:	f000 fa9b 	bl	8000d7c <MCAL_GPIO_WritePin>
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	3b01      	subs	r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <LCD_Write_Command+0x19c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	f1c3 0308 	rsb	r3, r3, #8
 800085e:	429a      	cmp	r2, r3
 8000860:	dae0      	bge.n	8000824 <LCD_Write_Command+0x64>
	}
	if(LCD_Interface == LCD_4_bit){
 8000862:	4b3e      	ldr	r3, [pc, #248]	; (800095c <LCD_Write_Command+0x19c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b04      	cmp	r3, #4
 8000868:	d141      	bne.n	80008ee <LCD_Write_Command+0x12e>
		_delay_ns(50); /*TAS = 50ns (min = 40ns)*/
 800086a:	2032      	movs	r0, #50	; 0x32
 800086c:	f000 f970 	bl	8000b50 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 8000870:	2201      	movs	r2, #1
 8000872:	2108      	movs	r1, #8
 8000874:	483a      	ldr	r0, [pc, #232]	; (8000960 <LCD_Write_Command+0x1a0>)
 8000876:	f000 fa81 	bl	8000d7c <MCAL_GPIO_WritePin>
		_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 800087a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800087e:	f000 f967 	bl	8000b50 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4836      	ldr	r0, [pc, #216]	; (8000960 <LCD_Write_Command+0x1a0>)
 8000888:	f000 fa78 	bl	8000d7c <MCAL_GPIO_WritePin>
		_delay_ns(20); /*TH = 20ns (min = 10ns)*/
 800088c:	2014      	movs	r0, #20
 800088e:	f000 f95f 	bl	8000b50 <_delay_ns>
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000892:	2307      	movs	r3, #7
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	e01e      	b.n	80008d6 <LCD_Write_Command+0x116>
			MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i % LCD_Interface) &1);
 8000898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089c:	4a2d      	ldr	r2, [pc, #180]	; (8000954 <LCD_Write_Command+0x194>)
 800089e:	5cd4      	ldrb	r4, [r2, r3]
 80008a0:	79f9      	ldrb	r1, [r7, #7]
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4a2d      	ldr	r2, [pc, #180]	; (800095c <LCD_Write_Command+0x19c>)
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	fb93 f0f2 	sdiv	r0, r3, r2
 80008ae:	fb02 f200 	mul.w	r2, r2, r0
 80008b2:	1a9b      	subs	r3, r3, r2
 80008b4:	fa41 f303 	asr.w	r3, r1, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	4621      	mov	r1, r4
 80008c4:	4824      	ldr	r0, [pc, #144]	; (8000958 <LCD_Write_Command+0x198>)
 80008c6:	f000 fa59 	bl	8000d7c <MCAL_GPIO_WritePin>
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80008ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <LCD_Write_Command+0x19c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	f1c3 0308 	rsb	r3, r3, #8
 80008e2:	429a      	cmp	r2, r3
 80008e4:	dad8      	bge.n	8000898 <LCD_Write_Command+0xd8>
		}
		_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 80008e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008ea:	f000 f931 	bl	8000b50 <_delay_ns>
	}

	_delay_ns(50); /*TAS = 50ns (min = 40ns)*/
 80008ee:	2032      	movs	r0, #50	; 0x32
 80008f0:	f000 f92e 	bl	8000b50 <_delay_ns>
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 80008f4:	2201      	movs	r2, #1
 80008f6:	2108      	movs	r1, #8
 80008f8:	4819      	ldr	r0, [pc, #100]	; (8000960 <LCD_Write_Command+0x1a0>)
 80008fa:	f000 fa3f 	bl	8000d7c <MCAL_GPIO_WritePin>
	_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 80008fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000902:	f000 f925 	bl	8000b50 <_delay_ns>
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	4815      	ldr	r0, [pc, #84]	; (8000960 <LCD_Write_Command+0x1a0>)
 800090c:	f000 fa36 	bl	8000d7c <MCAL_GPIO_WritePin>
	_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 8000910:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000914:	f000 f91c 	bl	8000b50 <_delay_ns>
	_delay_ms(2); /*wait 2ms before performing any other command*/
 8000918:	2002      	movs	r0, #2
 800091a:	f000 f8ff 	bl	8000b1c <_delay_ms>

	/*update the counter if the command was change cursor position*/
	if(command >= F00){
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	da0c      	bge.n	8000940 <LCD_Write_Command+0x180>
		if(command < S00){
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2bbf      	cmp	r3, #191	; 0xbf
 800092a:	d803      	bhi.n	8000934 <LCD_Write_Command+0x174>
			counter = command - 0xF00;
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LCD_Write_Command+0x1a4>)
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	7013      	strb	r3, [r2, #0]
			counter = 17 + (command - S00);
		}
	}else if(command == LCD_Return_Home){
		counter = 0;
	}
}
 8000932:	e00b      	b.n	800094c <LCD_Write_Command+0x18c>
			counter = 17 + (command - S00);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	3351      	adds	r3, #81	; 0x51
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <LCD_Write_Command+0x1a4>)
 800093c:	701a      	strb	r2, [r3, #0]
}
 800093e:	e005      	b.n	800094c <LCD_Write_Command+0x18c>
	}else if(command == LCD_Return_Home){
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d102      	bne.n	800094c <LCD_Write_Command+0x18c>
		counter = 0;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <LCD_Write_Command+0x1a4>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	08002084 	.word	0x08002084
 8000958:	40010c00 	.word	0x40010c00
 800095c:	2000008a 	.word	0x2000008a
 8000960:	40010800 	.word	0x40010800
 8000964:	20000089 	.word	0x20000089

08000968 <LCD_SendCharacter>:
 * @brief		- Send a character to be displayed on the LCD
 * @Param [in]	- c : the character to be displayed
 * @returnValue	- None
 * @Notes		- None
 */
void LCD_SendCharacter(char c){
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	int8_t i; /*iterator*/
	GPIO_PinConfig_t pinConfig; /*a structure to hold configurations of pins*/

	if(counter++ == LCD_Line_Length){ /*first line filled*/
 8000972:	4b64      	ldr	r3, [pc, #400]	; (8000b04 <LCD_SendCharacter+0x19c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	b2d1      	uxtb	r1, r2
 800097a:	4a62      	ldr	r2, [pc, #392]	; (8000b04 <LCD_SendCharacter+0x19c>)
 800097c:	7011      	strb	r1, [r2, #0]
 800097e:	2b10      	cmp	r3, #16
 8000980:	d108      	bne.n	8000994 <LCD_SendCharacter+0x2c>
		DDRAM_Address = S00;
 8000982:	4b61      	ldr	r3, [pc, #388]	; (8000b08 <LCD_SendCharacter+0x1a0>)
 8000984:	22c0      	movs	r2, #192	; 0xc0
 8000986:	701a      	strb	r2, [r3, #0]
		LCD_Write_Command(DDRAM_Address);
 8000988:	4b5f      	ldr	r3, [pc, #380]	; (8000b08 <LCD_SendCharacter+0x1a0>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff17 	bl	80007c0 <LCD_Write_Command>
 8000992:	e00c      	b.n	80009ae <LCD_SendCharacter+0x46>
	}else if(counter > LCD_Line_Length * 2){ /*both lines are filled*/
 8000994:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <LCD_SendCharacter+0x19c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b20      	cmp	r3, #32
 800099a:	d908      	bls.n	80009ae <LCD_SendCharacter+0x46>
		/*Clear Screen*/
		LCD_Write_Command(LCD_Clear);
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff ff0f 	bl	80007c0 <LCD_Write_Command>
		LCD_Write_Command(LCD_Return_Home);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff ff0c 	bl	80007c0 <LCD_Write_Command>
		counter = 0;
 80009a8:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <LCD_SendCharacter+0x19c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
	}
	/*Change direction of data bins to be output*/
	pinConfig.pinMode     = GPIO_PIN_MODE_Out_PushPull;
 80009ae:	2300      	movs	r3, #0
 80009b0:	737b      	strb	r3, [r7, #13]
	pinConfig.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 80009b2:	2301      	movs	r3, #1
 80009b4:	73bb      	strb	r3, [r7, #14]
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80009b6:	2307      	movs	r3, #7
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e010      	b.n	80009de <LCD_SendCharacter+0x76>
		pinConfig.pinNumber   = LCD_DataPins[i];
 80009bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c0:	4a52      	ldr	r2, [pc, #328]	; (8000b0c <LCD_SendCharacter+0x1a4>)
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(LCD_Data_Port, &pinConfig);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4619      	mov	r1, r3
 80009cc:	4850      	ldr	r0, [pc, #320]	; (8000b10 <LCD_SendCharacter+0x1a8>)
 80009ce:	f000 f8cf 	bl	8000b70 <MCAL_GPIO_Init>
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	3b01      	subs	r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80009e2:	4b4c      	ldr	r3, [pc, #304]	; (8000b14 <LCD_SendCharacter+0x1ac>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f1c3 0308 	rsb	r3, r3, #8
 80009ea:	429a      	cmp	r2, r3
 80009ec:	dae6      	bge.n	80009bc <LCD_SendCharacter+0x54>
	}

	MCAL_GPIO_WritePin(LCD_Control_Port, RS, GPIO_PIN_Value_High);/*data*/
 80009ee:	2201      	movs	r2, #1
 80009f0:	210a      	movs	r1, #10
 80009f2:	4849      	ldr	r0, [pc, #292]	; (8000b18 <LCD_SendCharacter+0x1b0>)
 80009f4:	f000 f9c2 	bl	8000d7c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control_Port, RW, GPIO_PIN_Value_Low);/*Write*/
 80009f8:	2200      	movs	r2, #0
 80009fa:	2109      	movs	r1, #9
 80009fc:	4846      	ldr	r0, [pc, #280]	; (8000b18 <LCD_SendCharacter+0x1b0>)
 80009fe:	f000 f9bd 	bl	8000d7c <MCAL_GPIO_WritePin>

	/*write the character*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000a02:	2307      	movs	r3, #7
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e016      	b.n	8000a36 <LCD_SendCharacter+0xce>
		MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i) &1);
 8000a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0c:	4a3f      	ldr	r2, [pc, #252]	; (8000b0c <LCD_SendCharacter+0x1a4>)
 8000a0e:	5cd1      	ldrb	r1, [r2, r3]
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	fa42 f303 	asr.w	r3, r2, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	483a      	ldr	r0, [pc, #232]	; (8000b10 <LCD_SendCharacter+0x1a8>)
 8000a26:	f000 f9a9 	bl	8000d7c <MCAL_GPIO_WritePin>
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	3b01      	subs	r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000a3a:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <LCD_SendCharacter+0x1ac>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	f1c3 0308 	rsb	r3, r3, #8
 8000a42:	429a      	cmp	r2, r3
 8000a44:	dae0      	bge.n	8000a08 <LCD_SendCharacter+0xa0>
	}
	if(LCD_Interface == LCD_4_bit){
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <LCD_SendCharacter+0x1ac>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d141      	bne.n	8000ad2 <LCD_SendCharacter+0x16a>
		_delay_ns(50); /*TAS = 50ns (min = 40ns)*/
 8000a4e:	2032      	movs	r0, #50	; 0x32
 8000a50:	f000 f87e 	bl	8000b50 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 8000a54:	2201      	movs	r2, #1
 8000a56:	2108      	movs	r1, #8
 8000a58:	482f      	ldr	r0, [pc, #188]	; (8000b18 <LCD_SendCharacter+0x1b0>)
 8000a5a:	f000 f98f 	bl	8000d7c <MCAL_GPIO_WritePin>
		_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 8000a5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a62:	f000 f875 	bl	8000b50 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	482b      	ldr	r0, [pc, #172]	; (8000b18 <LCD_SendCharacter+0x1b0>)
 8000a6c:	f000 f986 	bl	8000d7c <MCAL_GPIO_WritePin>
		_delay_ns(20); /*TH = 20ns (min = 10ns)*/
 8000a70:	2014      	movs	r0, #20
 8000a72:	f000 f86d 	bl	8000b50 <_delay_ns>
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000a76:	2307      	movs	r3, #7
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e01e      	b.n	8000aba <LCD_SendCharacter+0x152>
			MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i % LCD_Interface) &1);
 8000a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a80:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <LCD_SendCharacter+0x1a4>)
 8000a82:	5cd4      	ldrb	r4, [r2, r3]
 8000a84:	79f9      	ldrb	r1, [r7, #7]
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <LCD_SendCharacter+0x1ac>)
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	fb93 f0f2 	sdiv	r0, r3, r2
 8000a92:	fb02 f200 	mul.w	r2, r2, r0
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	fa41 f303 	asr.w	r3, r1, r3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	4819      	ldr	r0, [pc, #100]	; (8000b10 <LCD_SendCharacter+0x1a8>)
 8000aaa:	f000 f967 	bl	8000d7c <MCAL_GPIO_WritePin>
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <LCD_SendCharacter+0x1ac>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f1c3 0308 	rsb	r3, r3, #8
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dad8      	bge.n	8000a7c <LCD_SendCharacter+0x114>
		}
		_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 8000aca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ace:	f000 f83f 	bl	8000b50 <_delay_ns>
	}

	_delay_ns(50); /*TAS = 50ns (min = 40ns)*/
 8000ad2:	2032      	movs	r0, #50	; 0x32
 8000ad4:	f000 f83c 	bl	8000b50 <_delay_ns>
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2108      	movs	r1, #8
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <LCD_SendCharacter+0x1b0>)
 8000ade:	f000 f94d 	bl	8000d7c <MCAL_GPIO_WritePin>
	_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 8000ae2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ae6:	f000 f833 	bl	8000b50 <_delay_ns>
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000aea:	2200      	movs	r2, #0
 8000aec:	2108      	movs	r1, #8
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <LCD_SendCharacter+0x1b0>)
 8000af0:	f000 f944 	bl	8000d7c <MCAL_GPIO_WritePin>
	_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 8000af4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000af8:	f000 f82a 	bl	8000b50 <_delay_ns>
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	20000089 	.word	0x20000089
 8000b08:	20000099 	.word	0x20000099
 8000b0c:	08002084 	.word	0x08002084
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	2000008a 	.word	0x2000008a
 8000b18:	40010800 	.word	0x40010800

08000b1c <_delay_ms>:
 * @Fn			- _delay_ms
 * @brief		- Software delay
 * @returnValue	- None
 * @Notes		- a private function used for LCD.c only
 */
static void _delay_ms( uint16_t time){
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	while(time--){
 8000b26:	e009      	b.n	8000b3c <_delay_ms+0x20>
		uint32_t i ;
		for(i = 0 ; i < 1000; i++);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	e002      	b.n	8000b34 <_delay_ms+0x18>
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b3a:	d3f8      	bcc.n	8000b2e <_delay_ms+0x12>
	while(time--){
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	1e5a      	subs	r2, r3, #1
 8000b40:	80fa      	strh	r2, [r7, #6]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1f0      	bne.n	8000b28 <_delay_ms+0xc>
	}
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <_delay_ns>:
 * @Fn			- _delay_ns
 * @brief		- Software delay
 * @returnValue	- None
 * @Notes		- a private function used for LCD.c only
 */
static void _delay_ns( uint16_t time){
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
	while(time--);
 8000b5a:	bf00      	nop
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	80fa      	strh	r2, [r7, #6]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1fa      	bne.n	8000b5c <_delay_ns+0xc>
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <MCAL_GPIO_Init>:
 * 				  Can be a value of GPIO[A,B,C,D]
 * @Param [in]	- pinConfig: a pointer to a structure that contains pin configuration
 * @returnValue - None
 * Note			- None
 */
void MCAL_GPIO_Init(GPIO_T* GPIOx, GPIO_PinConfig_t* pinConfig){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	assert(pinConfig->pinNumber <= GPIO_PIN_15); /*GPIO has only 16 pin*/
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	d905      	bls.n	8000b8e <MCAL_GPIO_Init+0x1e>
 8000b82:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <MCAL_GPIO_Init+0x1b8>)
 8000b84:	4a69      	ldr	r2, [pc, #420]	; (8000d2c <MCAL_GPIO_Init+0x1bc>)
 8000b86:	2114      	movs	r1, #20
 8000b88:	4869      	ldr	r0, [pc, #420]	; (8000d30 <MCAL_GPIO_Init+0x1c0>)
 8000b8a:	f000 fa7b 	bl	8001084 <__assert_func>
	volatile uint32_t *gpioConfigReg =  pinConfig->pinNumber < 8 ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d801      	bhi.n	8000b9a <MCAL_GPIO_Init+0x2a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	e001      	b.n	8000b9e <MCAL_GPIO_Init+0x2e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	60fb      	str	r3, [r7, #12]

	switch (pinConfig->pinMode) {
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	f200 80b9 	bhi.w	8000d1c <MCAL_GPIO_Init+0x1ac>
 8000baa:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <MCAL_GPIO_Init+0x40>)
 8000bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb0:	08000bd1 	.word	0x08000bd1
 8000bb4:	08000bd1 	.word	0x08000bd1
 8000bb8:	08000bd1 	.word	0x08000bd1
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	08000c41 	.word	0x08000c41
 8000bc4:	08000c41 	.word	0x08000c41
 8000bc8:	08000c7f 	.word	0x08000c7f
 8000bcc:	08000ccf 	.word	0x08000ccf
	case GPIO_PIN_MODE_Out_PushPull:
	case GPIO_PIN_MODE_Out_OpenDrain:
	case GPIO_PIN_MODE_AF_Out_PushPull:
	case GPIO_PIN_MODE_AF_Out_OpenDrain:
		/*GPIO speed must be <= 50MHZ*/
		assert(pinConfig->pinOutSpeed <= GPIO_PIN_OUT_SPEED_50MHZ);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d905      	bls.n	8000be4 <MCAL_GPIO_Init+0x74>
 8000bd8:	4b56      	ldr	r3, [pc, #344]	; (8000d34 <MCAL_GPIO_Init+0x1c4>)
 8000bda:	4a54      	ldr	r2, [pc, #336]	; (8000d2c <MCAL_GPIO_Init+0x1bc>)
 8000bdc:	211d      	movs	r1, #29
 8000bde:	4854      	ldr	r0, [pc, #336]	; (8000d30 <MCAL_GPIO_Init+0x1c0>)
 8000be0:	f000 fa50 	bl	8001084 <__assert_func>
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	7812      	ldrb	r2, [r2, #0]
 8000bec:	f002 0207 	and.w	r2, r2, #7
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	601a      	str	r2, [r3, #0]
		/*MODE[1:0]*/
		*gpioConfigReg |= (pinConfig->pinOutSpeed << ((pinConfig->pinNumber % GPIO_PIN_8) * 4));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	7892      	ldrb	r2, [r2, #2]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	f002 0207 	and.w	r2, r2, #7
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	601a      	str	r2, [r3, #0]
		/*CNF[1:0]*/
		*gpioConfigReg |= (pinConfig->pinMode << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	7852      	ldrb	r2, [r2, #1]
 8000c26:	4611      	mov	r1, r2
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	7812      	ldrb	r2, [r2, #0]
 8000c2c:	f002 0207 	and.w	r2, r2, #7
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	601a      	str	r2, [r3, #0]
		break;
 8000c3e:	e06e      	b.n	8000d1e <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_Analog:
	case GPIO_PIN_MODE_IN_Floating:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	f002 0207 	and.w	r2, r2, #7
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	210f      	movs	r1, #15
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	401a      	ands	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	601a      	str	r2, [r3, #0]
		/*CNF[1:0]*/
		*gpioConfigReg |= ((pinConfig->pinMode-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	7852      	ldrb	r2, [r2, #1]
 8000c64:	1f11      	subs	r1, r2, #4
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	f002 0207 	and.w	r2, r2, #7
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	0092      	lsls	r2, r2, #2
 8000c76:	431a      	orrs	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	601a      	str	r2, [r3, #0]
		break;
 8000c7c:	e04f      	b.n	8000d1e <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_PullDown:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	f002 0207 	and.w	r2, r2, #7
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c92:	43d2      	mvns	r2, r2
 8000c94:	401a      	ands	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	601a      	str	r2, [r3, #0]
		/*CNF[1:0] = 2 & ODR = 0*/
		*gpioConfigReg |= ((GPIO_PIN_MODE_IN_PullDown-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	f002 0207 	and.w	r2, r2, #7
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	2102      	movs	r1, #2
 8000caa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	601a      	str	r2, [r3, #0]
		GPIOx->ODR &= ~(1<<pinConfig->pinNumber);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	408a      	lsls	r2, r1
 8000cc4:	43d2      	mvns	r2, r2
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	60da      	str	r2, [r3, #12]
		break;
 8000ccc:	e027      	b.n	8000d1e <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_PullUp:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	f002 0207 	and.w	r2, r2, #7
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	210f      	movs	r1, #15
 8000cde:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce2:	43d2      	mvns	r2, r2
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	601a      	str	r2, [r3, #0]
		/*CNF[1:0] = 2 & ODR = 1*/
		*gpioConfigReg |= ((GPIO_PIN_MODE_IN_PullDown-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	f002 0207 	and.w	r2, r2, #7
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	431a      	orrs	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	601a      	str	r2, [r3, #0]
		GPIOx->ODR |= (1<<pinConfig->pinNumber);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	2201      	movs	r2, #1
 8000d12:	408a      	lsls	r2, r1
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60da      	str	r2, [r3, #12]
		break;
 8000d1a:	e000      	b.n	8000d1e <MCAL_GPIO_Init+0x1ae>
	default:
		break;
 8000d1c:	bf00      	nop
	}

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08001fa4 	.word	0x08001fa4
 8000d2c:	0800208c 	.word	0x0800208c
 8000d30:	08001fc8 	.word	0x08001fc8
 8000d34:	08002000 	.word	0x08002000

08000d38 <MCAL_GPIO_ReadPin>:
 * 				  Can be a value of @ref GPIO_PIN_define
 * @returnValue	- the value of the required pin
 * 				  Can be a value of @ref GPIO_PIN_Value_define
 * Notes		- None
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_T* GPIOx,uint8_t pinNumber){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	assert(pinNumber <= GPIO_PIN_15);
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	2b0f      	cmp	r3, #15
 8000d48:	d905      	bls.n	8000d56 <MCAL_GPIO_ReadPin+0x1e>
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MCAL_GPIO_ReadPin+0x38>)
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <MCAL_GPIO_ReadPin+0x3c>)
 8000d4e:	2167      	movs	r1, #103	; 0x67
 8000d50:	4809      	ldr	r0, [pc, #36]	; (8000d78 <MCAL_GPIO_ReadPin+0x40>)
 8000d52:	f000 f997 	bl	8001084 <__assert_func>
	return (GPIOx->IDR >> pinNumber) & GPIO_PIN_Value_High;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	08002034 	.word	0x08002034
 8000d74:	0800209c 	.word	0x0800209c
 8000d78:	08001fc8 	.word	0x08001fc8

08000d7c <MCAL_GPIO_WritePin>:
 * @Param [in]	- val : the value to be written on the pin
 * 				  Can be a value of @ref GPIO_PIN_Value_define
 * @returnValue	- None
 * Notes		- None
 */
void MCAL_GPIO_WritePin(GPIO_T* GPIOx, uint8_t pinNumber,uint8_t val){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	70bb      	strb	r3, [r7, #2]
	assert(pinNumber <= GPIO_PIN_15);  /*GPIO has only 16 pin*/
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d905      	bls.n	8000d9e <MCAL_GPIO_WritePin+0x22>
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MCAL_GPIO_WritePin+0x58>)
 8000d94:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <MCAL_GPIO_WritePin+0x5c>)
 8000d96:	2184      	movs	r1, #132	; 0x84
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <MCAL_GPIO_WritePin+0x60>)
 8000d9a:	f000 f973 	bl	8001084 <__assert_func>
	switch(val){
 8000d9e:	78bb      	ldrb	r3, [r7, #2]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00a      	beq.n	8000dba <MCAL_GPIO_WritePin+0x3e>
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d000      	beq.n	8000daa <MCAL_GPIO_WritePin+0x2e>
	case GPIO_PIN_Value_Low:
		GPIOx->BRR = (1 << pinNumber);
		break;
	default:
		/*do nothing*/
		break;
 8000da8:	e00f      	b.n	8000dca <MCAL_GPIO_WritePin+0x4e>
		GPIOx->BSRR = (1 << pinNumber);
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	2201      	movs	r2, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	611a      	str	r2, [r3, #16]
		break;
 8000db8:	e007      	b.n	8000dca <MCAL_GPIO_WritePin+0x4e>
		GPIOx->BRR = (1 << pinNumber);
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	615a      	str	r2, [r3, #20]
		break;
 8000dc8:	bf00      	nop
	}
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	08002034 	.word	0x08002034
 8000dd8:	080020b0 	.word	0x080020b0
 8000ddc:	08001fc8 	.word	0x08001fc8

08000de0 <MCAL_GPIO_TogglePin>:
 * @Param [in]	- pinNumber : defines the pin to be toggled
 * 				  Can be a value of @ref GPIO_PIN_define
 * @returnValue	- None
 * Notes		- None
 */
void MCAL_GPIO_TogglePin(GPIO_T* GPIOx,uint8_t pinNumber){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	assert(pinNumber <= GPIO_PIN_15);
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	d905      	bls.n	8000dfe <MCAL_GPIO_TogglePin+0x1e>
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MCAL_GPIO_TogglePin+0x38>)
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <MCAL_GPIO_TogglePin+0x3c>)
 8000df6:	21a8      	movs	r1, #168	; 0xa8
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <MCAL_GPIO_TogglePin+0x40>)
 8000dfa:	f000 f943 	bl	8001084 <__assert_func>
	GPIOx->ODR ^= (1<<pinNumber);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	78fa      	ldrb	r2, [r7, #3]
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	405a      	eors	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	60da      	str	r2, [r3, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	08002034 	.word	0x08002034
 8000e1c:	080020c4 	.word	0x080020c4
 8000e20:	08001fc8 	.word	0x08001fc8

08000e24 <main>:
#include "LCD.h"
#include "KeyPad.h"
#include "7Seg.h"
void clock_Init(void);
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
	LCD_Config_t LCD_Config;
	LCD_Config.Display_control = Display_Control_D_On_C_On_B_On;
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	717b      	strb	r3, [r7, #5]
	LCD_Config.Entry_mode      = Entry_Mode_Inc_No_S;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	71bb      	strb	r3, [r7, #6]
	LCD_Config.function_set    = Function_Set_4bit_2line_5x8;
 8000e32:	2328      	movs	r3, #40	; 0x28
 8000e34:	713b      	strb	r3, [r7, #4]
	clock_Init();
 8000e36:	f000 f827 	bl	8000e88 <clock_Init>
	SevenSeg_Init(SevenSeg_Type_Com_An);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff f998 	bl	8000170 <SevenSeg_Init>
	keyPad_Init();
 8000e40:	f7ff faf6 	bl	8000430 <keyPad_Init>
	LCD_Init(&LCD_Config);
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fbae 	bl	80005a8 <LCD_Init>


	while (1)
	{
		char c = KeyPad_GetKeyPressed();
 8000e4c:	f7ff fb38 	bl	80004c0 <KeyPad_GetKeyPressed>
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
		switch (c) {
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d013      	beq.n	8000e82 <main+0x5e>
 8000e5a:	2b20      	cmp	r3, #32
 8000e5c:	d108      	bne.n	8000e70 <main+0x4c>
		case ' ':
			/*clear 7Seg*/
			SevenSeg_Clear();
 8000e5e:	f7ff fac1 	bl	80003e4 <SevenSeg_Clear>
			/*Clear Screen*/
			LCD_Write_Command(LCD_Clear);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff fcac 	bl	80007c0 <LCD_Write_Command>
			LCD_Write_Command(LCD_Return_Home);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff fca9 	bl	80007c0 <LCD_Write_Command>
			break;
 8000e6e:	e009      	b.n	8000e84 <main+0x60>
		case 0:
			/*do nothing no character is pressed*/
			break;
		default:
			SevenSeg_DisplayNumber(c);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f9ae 	bl	80001d4 <SevenSeg_DisplayNumber>
			LCD_SendCharacter(c);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fd74 	bl	8000968 <LCD_SendCharacter>
			break;
 8000e80:	e000      	b.n	8000e84 <main+0x60>
			break;
 8000e82:	bf00      	nop
	{
 8000e84:	e7e2      	b.n	8000e4c <main+0x28>
	...

08000e88 <clock_Init>:
		}
	}
}
void clock_Init(void){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	GPIOA_Clock_Enable;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <clock_Init+0x24>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <clock_Init+0x24>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6193      	str	r3, [r2, #24]
	GPIOB_Clock_Enable;
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <clock_Init+0x24>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a03      	ldr	r2, [pc, #12]	; (8000eac <clock_Init+0x24>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6193      	str	r3, [r2, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40021000 	.word	0x40021000

08000eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <_kill>:

int _kill(int pid, int sig)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ec8:	f000 f8fa 	bl	80010c0 <__errno>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	2316      	movs	r3, #22
 8000ed0:	6013      	str	r3, [r2, #0]
	return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_exit>:

void _exit (int status)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffe7 	bl	8000ebe <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ef0:	e7fe      	b.n	8000ef0 <_exit+0x12>

08000ef2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e00a      	b.n	8000f1a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f04:	f3af 8000 	nop.w
 8000f08:	4601      	mov	r1, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	b2ca      	uxtb	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf0      	blt.n	8000f04 <_read+0x12>
	}

return len;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e009      	b.n	8000f52 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	60ba      	str	r2, [r7, #8]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbf1      	blt.n	8000f3e <_write+0x12>
	}
	return len;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_close>:

int _close(int file)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <_isatty>:

int _isatty(int file)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	return 1;
 8000fa0:	2301      	movs	r3, #1
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f000 f864 	bl	80010c0 <__errno>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20002800 	.word	0x20002800
 8001024:	00000400 	.word	0x00000400
 8001028:	2000008c 	.word	0x2000008c
 800102c:	200000a0 	.word	0x200000a0

08001030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001034:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800105e:	f000 f847 	bl	80010f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff fedf 	bl	8000e24 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   r0, =_estack
 8001068:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001074:	080021b4 	.word	0x080021b4
  ldr r2, =_sbss
 8001078:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800107c:	200000a0 	.word	0x200000a0

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>
	...

08001084 <__assert_func>:
 8001084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001086:	461c      	mov	r4, r3
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <__assert_func+0x2c>)
 800108a:	4605      	mov	r5, r0
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68d8      	ldr	r0, [r3, #12]
 8001090:	b152      	cbz	r2, 80010a8 <__assert_func+0x24>
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <__assert_func+0x30>)
 8001094:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001098:	9100      	str	r1, [sp, #0]
 800109a:	462b      	mov	r3, r5
 800109c:	4622      	mov	r2, r4
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <__assert_func+0x34>)
 80010a0:	f000 f814 	bl	80010cc <fiprintf>
 80010a4:	f000 fbd6 	bl	8001854 <abort>
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__assert_func+0x38>)
 80010aa:	461a      	mov	r2, r3
 80010ac:	e7f2      	b.n	8001094 <__assert_func+0x10>
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	080020d8 	.word	0x080020d8
 80010b8:	080020e5 	.word	0x080020e5
 80010bc:	08002113 	.word	0x08002113

080010c0 <__errno>:
 80010c0:	4b01      	ldr	r3, [pc, #4]	; (80010c8 <__errno+0x8>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <fiprintf>:
 80010cc:	b40e      	push	{r1, r2, r3}
 80010ce:	b503      	push	{r0, r1, lr}
 80010d0:	4601      	mov	r1, r0
 80010d2:	ab03      	add	r3, sp, #12
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <fiprintf+0x20>)
 80010d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80010da:	6800      	ldr	r0, [r0, #0]
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f000 f85b 	bl	8001198 <_vfiprintf_r>
 80010e2:	b002      	add	sp, #8
 80010e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80010e8:	b003      	add	sp, #12
 80010ea:	4770      	bx	lr
 80010ec:	20000008 	.word	0x20000008

080010f0 <__libc_init_array>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	2500      	movs	r5, #0
 80010f4:	4e0c      	ldr	r6, [pc, #48]	; (8001128 <__libc_init_array+0x38>)
 80010f6:	4c0d      	ldr	r4, [pc, #52]	; (800112c <__libc_init_array+0x3c>)
 80010f8:	1ba4      	subs	r4, r4, r6
 80010fa:	10a4      	asrs	r4, r4, #2
 80010fc:	42a5      	cmp	r5, r4
 80010fe:	d109      	bne.n	8001114 <__libc_init_array+0x24>
 8001100:	f000 ff44 	bl	8001f8c <_init>
 8001104:	2500      	movs	r5, #0
 8001106:	4e0a      	ldr	r6, [pc, #40]	; (8001130 <__libc_init_array+0x40>)
 8001108:	4c0a      	ldr	r4, [pc, #40]	; (8001134 <__libc_init_array+0x44>)
 800110a:	1ba4      	subs	r4, r4, r6
 800110c:	10a4      	asrs	r4, r4, #2
 800110e:	42a5      	cmp	r5, r4
 8001110:	d105      	bne.n	800111e <__libc_init_array+0x2e>
 8001112:	bd70      	pop	{r4, r5, r6, pc}
 8001114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001118:	4798      	blx	r3
 800111a:	3501      	adds	r5, #1
 800111c:	e7ee      	b.n	80010fc <__libc_init_array+0xc>
 800111e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001122:	4798      	blx	r3
 8001124:	3501      	adds	r5, #1
 8001126:	e7f2      	b.n	800110e <__libc_init_array+0x1e>
 8001128:	080021ac 	.word	0x080021ac
 800112c:	080021ac 	.word	0x080021ac
 8001130:	080021ac 	.word	0x080021ac
 8001134:	080021b0 	.word	0x080021b0

08001138 <memset>:
 8001138:	4603      	mov	r3, r0
 800113a:	4402      	add	r2, r0
 800113c:	4293      	cmp	r3, r2
 800113e:	d100      	bne.n	8001142 <memset+0xa>
 8001140:	4770      	bx	lr
 8001142:	f803 1b01 	strb.w	r1, [r3], #1
 8001146:	e7f9      	b.n	800113c <memset+0x4>

08001148 <__sfputc_r>:
 8001148:	6893      	ldr	r3, [r2, #8]
 800114a:	b410      	push	{r4}
 800114c:	3b01      	subs	r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	6093      	str	r3, [r2, #8]
 8001152:	da07      	bge.n	8001164 <__sfputc_r+0x1c>
 8001154:	6994      	ldr	r4, [r2, #24]
 8001156:	42a3      	cmp	r3, r4
 8001158:	db01      	blt.n	800115e <__sfputc_r+0x16>
 800115a:	290a      	cmp	r1, #10
 800115c:	d102      	bne.n	8001164 <__sfputc_r+0x1c>
 800115e:	bc10      	pop	{r4}
 8001160:	f000 bab8 	b.w	80016d4 <__swbuf_r>
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	1c58      	adds	r0, r3, #1
 8001168:	6010      	str	r0, [r2, #0]
 800116a:	7019      	strb	r1, [r3, #0]
 800116c:	4608      	mov	r0, r1
 800116e:	bc10      	pop	{r4}
 8001170:	4770      	bx	lr

08001172 <__sfputs_r>:
 8001172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001174:	4606      	mov	r6, r0
 8001176:	460f      	mov	r7, r1
 8001178:	4614      	mov	r4, r2
 800117a:	18d5      	adds	r5, r2, r3
 800117c:	42ac      	cmp	r4, r5
 800117e:	d101      	bne.n	8001184 <__sfputs_r+0x12>
 8001180:	2000      	movs	r0, #0
 8001182:	e007      	b.n	8001194 <__sfputs_r+0x22>
 8001184:	463a      	mov	r2, r7
 8001186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800118a:	4630      	mov	r0, r6
 800118c:	f7ff ffdc 	bl	8001148 <__sfputc_r>
 8001190:	1c43      	adds	r3, r0, #1
 8001192:	d1f3      	bne.n	800117c <__sfputs_r+0xa>
 8001194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001198 <_vfiprintf_r>:
 8001198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800119c:	460c      	mov	r4, r1
 800119e:	b09d      	sub	sp, #116	; 0x74
 80011a0:	4617      	mov	r7, r2
 80011a2:	461d      	mov	r5, r3
 80011a4:	4606      	mov	r6, r0
 80011a6:	b118      	cbz	r0, 80011b0 <_vfiprintf_r+0x18>
 80011a8:	6983      	ldr	r3, [r0, #24]
 80011aa:	b90b      	cbnz	r3, 80011b0 <_vfiprintf_r+0x18>
 80011ac:	f000 fc4a 	bl	8001a44 <__sinit>
 80011b0:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <_vfiprintf_r+0x20c>)
 80011b2:	429c      	cmp	r4, r3
 80011b4:	d158      	bne.n	8001268 <_vfiprintf_r+0xd0>
 80011b6:	6874      	ldr	r4, [r6, #4]
 80011b8:	89a3      	ldrh	r3, [r4, #12]
 80011ba:	0718      	lsls	r0, r3, #28
 80011bc:	d55e      	bpl.n	800127c <_vfiprintf_r+0xe4>
 80011be:	6923      	ldr	r3, [r4, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d05b      	beq.n	800127c <_vfiprintf_r+0xe4>
 80011c4:	2300      	movs	r3, #0
 80011c6:	9309      	str	r3, [sp, #36]	; 0x24
 80011c8:	2320      	movs	r3, #32
 80011ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011ce:	2330      	movs	r3, #48	; 0x30
 80011d0:	f04f 0b01 	mov.w	fp, #1
 80011d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011d8:	9503      	str	r5, [sp, #12]
 80011da:	46b8      	mov	r8, r7
 80011dc:	4645      	mov	r5, r8
 80011de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80011e2:	b10b      	cbz	r3, 80011e8 <_vfiprintf_r+0x50>
 80011e4:	2b25      	cmp	r3, #37	; 0x25
 80011e6:	d154      	bne.n	8001292 <_vfiprintf_r+0xfa>
 80011e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80011ec:	d00b      	beq.n	8001206 <_vfiprintf_r+0x6e>
 80011ee:	4653      	mov	r3, sl
 80011f0:	463a      	mov	r2, r7
 80011f2:	4621      	mov	r1, r4
 80011f4:	4630      	mov	r0, r6
 80011f6:	f7ff ffbc 	bl	8001172 <__sfputs_r>
 80011fa:	3001      	adds	r0, #1
 80011fc:	f000 80c2 	beq.w	8001384 <_vfiprintf_r+0x1ec>
 8001200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001202:	4453      	add	r3, sl
 8001204:	9309      	str	r3, [sp, #36]	; 0x24
 8001206:	f898 3000 	ldrb.w	r3, [r8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 80ba 	beq.w	8001384 <_vfiprintf_r+0x1ec>
 8001210:	2300      	movs	r3, #0
 8001212:	f04f 32ff 	mov.w	r2, #4294967295
 8001216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800121a:	9304      	str	r3, [sp, #16]
 800121c:	9307      	str	r3, [sp, #28]
 800121e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001222:	931a      	str	r3, [sp, #104]	; 0x68
 8001224:	46a8      	mov	r8, r5
 8001226:	2205      	movs	r2, #5
 8001228:	f818 1b01 	ldrb.w	r1, [r8], #1
 800122c:	485e      	ldr	r0, [pc, #376]	; (80013a8 <_vfiprintf_r+0x210>)
 800122e:	f000 fcf7 	bl	8001c20 <memchr>
 8001232:	9b04      	ldr	r3, [sp, #16]
 8001234:	bb78      	cbnz	r0, 8001296 <_vfiprintf_r+0xfe>
 8001236:	06d9      	lsls	r1, r3, #27
 8001238:	bf44      	itt	mi
 800123a:	2220      	movmi	r2, #32
 800123c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001240:	071a      	lsls	r2, r3, #28
 8001242:	bf44      	itt	mi
 8001244:	222b      	movmi	r2, #43	; 0x2b
 8001246:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800124a:	782a      	ldrb	r2, [r5, #0]
 800124c:	2a2a      	cmp	r2, #42	; 0x2a
 800124e:	d02a      	beq.n	80012a6 <_vfiprintf_r+0x10e>
 8001250:	46a8      	mov	r8, r5
 8001252:	2000      	movs	r0, #0
 8001254:	250a      	movs	r5, #10
 8001256:	9a07      	ldr	r2, [sp, #28]
 8001258:	4641      	mov	r1, r8
 800125a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800125e:	3b30      	subs	r3, #48	; 0x30
 8001260:	2b09      	cmp	r3, #9
 8001262:	d969      	bls.n	8001338 <_vfiprintf_r+0x1a0>
 8001264:	b360      	cbz	r0, 80012c0 <_vfiprintf_r+0x128>
 8001266:	e024      	b.n	80012b2 <_vfiprintf_r+0x11a>
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <_vfiprintf_r+0x214>)
 800126a:	429c      	cmp	r4, r3
 800126c:	d101      	bne.n	8001272 <_vfiprintf_r+0xda>
 800126e:	68b4      	ldr	r4, [r6, #8]
 8001270:	e7a2      	b.n	80011b8 <_vfiprintf_r+0x20>
 8001272:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <_vfiprintf_r+0x218>)
 8001274:	429c      	cmp	r4, r3
 8001276:	bf08      	it	eq
 8001278:	68f4      	ldreq	r4, [r6, #12]
 800127a:	e79d      	b.n	80011b8 <_vfiprintf_r+0x20>
 800127c:	4621      	mov	r1, r4
 800127e:	4630      	mov	r0, r6
 8001280:	f000 fa7a 	bl	8001778 <__swsetup_r>
 8001284:	2800      	cmp	r0, #0
 8001286:	d09d      	beq.n	80011c4 <_vfiprintf_r+0x2c>
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	b01d      	add	sp, #116	; 0x74
 800128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001292:	46a8      	mov	r8, r5
 8001294:	e7a2      	b.n	80011dc <_vfiprintf_r+0x44>
 8001296:	4a44      	ldr	r2, [pc, #272]	; (80013a8 <_vfiprintf_r+0x210>)
 8001298:	4645      	mov	r5, r8
 800129a:	1a80      	subs	r0, r0, r2
 800129c:	fa0b f000 	lsl.w	r0, fp, r0
 80012a0:	4318      	orrs	r0, r3
 80012a2:	9004      	str	r0, [sp, #16]
 80012a4:	e7be      	b.n	8001224 <_vfiprintf_r+0x8c>
 80012a6:	9a03      	ldr	r2, [sp, #12]
 80012a8:	1d11      	adds	r1, r2, #4
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	9103      	str	r1, [sp, #12]
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	db01      	blt.n	80012b6 <_vfiprintf_r+0x11e>
 80012b2:	9207      	str	r2, [sp, #28]
 80012b4:	e004      	b.n	80012c0 <_vfiprintf_r+0x128>
 80012b6:	4252      	negs	r2, r2
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	9207      	str	r2, [sp, #28]
 80012be:	9304      	str	r3, [sp, #16]
 80012c0:	f898 3000 	ldrb.w	r3, [r8]
 80012c4:	2b2e      	cmp	r3, #46	; 0x2e
 80012c6:	d10e      	bne.n	80012e6 <_vfiprintf_r+0x14e>
 80012c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80012cc:	2b2a      	cmp	r3, #42	; 0x2a
 80012ce:	d138      	bne.n	8001342 <_vfiprintf_r+0x1aa>
 80012d0:	9b03      	ldr	r3, [sp, #12]
 80012d2:	f108 0802 	add.w	r8, r8, #2
 80012d6:	1d1a      	adds	r2, r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	9203      	str	r2, [sp, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfb8      	it	lt
 80012e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80012e4:	9305      	str	r3, [sp, #20]
 80012e6:	4d33      	ldr	r5, [pc, #204]	; (80013b4 <_vfiprintf_r+0x21c>)
 80012e8:	2203      	movs	r2, #3
 80012ea:	f898 1000 	ldrb.w	r1, [r8]
 80012ee:	4628      	mov	r0, r5
 80012f0:	f000 fc96 	bl	8001c20 <memchr>
 80012f4:	b140      	cbz	r0, 8001308 <_vfiprintf_r+0x170>
 80012f6:	2340      	movs	r3, #64	; 0x40
 80012f8:	1b40      	subs	r0, r0, r5
 80012fa:	fa03 f000 	lsl.w	r0, r3, r0
 80012fe:	9b04      	ldr	r3, [sp, #16]
 8001300:	f108 0801 	add.w	r8, r8, #1
 8001304:	4303      	orrs	r3, r0
 8001306:	9304      	str	r3, [sp, #16]
 8001308:	f898 1000 	ldrb.w	r1, [r8]
 800130c:	2206      	movs	r2, #6
 800130e:	482a      	ldr	r0, [pc, #168]	; (80013b8 <_vfiprintf_r+0x220>)
 8001310:	f108 0701 	add.w	r7, r8, #1
 8001314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001318:	f000 fc82 	bl	8001c20 <memchr>
 800131c:	2800      	cmp	r0, #0
 800131e:	d037      	beq.n	8001390 <_vfiprintf_r+0x1f8>
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <_vfiprintf_r+0x224>)
 8001322:	bb1b      	cbnz	r3, 800136c <_vfiprintf_r+0x1d4>
 8001324:	9b03      	ldr	r3, [sp, #12]
 8001326:	3307      	adds	r3, #7
 8001328:	f023 0307 	bic.w	r3, r3, #7
 800132c:	3308      	adds	r3, #8
 800132e:	9303      	str	r3, [sp, #12]
 8001330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001332:	444b      	add	r3, r9
 8001334:	9309      	str	r3, [sp, #36]	; 0x24
 8001336:	e750      	b.n	80011da <_vfiprintf_r+0x42>
 8001338:	fb05 3202 	mla	r2, r5, r2, r3
 800133c:	2001      	movs	r0, #1
 800133e:	4688      	mov	r8, r1
 8001340:	e78a      	b.n	8001258 <_vfiprintf_r+0xc0>
 8001342:	2300      	movs	r3, #0
 8001344:	250a      	movs	r5, #10
 8001346:	4619      	mov	r1, r3
 8001348:	f108 0801 	add.w	r8, r8, #1
 800134c:	9305      	str	r3, [sp, #20]
 800134e:	4640      	mov	r0, r8
 8001350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001354:	3a30      	subs	r2, #48	; 0x30
 8001356:	2a09      	cmp	r2, #9
 8001358:	d903      	bls.n	8001362 <_vfiprintf_r+0x1ca>
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0c3      	beq.n	80012e6 <_vfiprintf_r+0x14e>
 800135e:	9105      	str	r1, [sp, #20]
 8001360:	e7c1      	b.n	80012e6 <_vfiprintf_r+0x14e>
 8001362:	fb05 2101 	mla	r1, r5, r1, r2
 8001366:	2301      	movs	r3, #1
 8001368:	4680      	mov	r8, r0
 800136a:	e7f0      	b.n	800134e <_vfiprintf_r+0x1b6>
 800136c:	ab03      	add	r3, sp, #12
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	4622      	mov	r2, r4
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_vfiprintf_r+0x228>)
 8001374:	a904      	add	r1, sp, #16
 8001376:	4630      	mov	r0, r6
 8001378:	f3af 8000 	nop.w
 800137c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001380:	4681      	mov	r9, r0
 8001382:	d1d5      	bne.n	8001330 <_vfiprintf_r+0x198>
 8001384:	89a3      	ldrh	r3, [r4, #12]
 8001386:	065b      	lsls	r3, r3, #25
 8001388:	f53f af7e 	bmi.w	8001288 <_vfiprintf_r+0xf0>
 800138c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800138e:	e77d      	b.n	800128c <_vfiprintf_r+0xf4>
 8001390:	ab03      	add	r3, sp, #12
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	4622      	mov	r2, r4
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_vfiprintf_r+0x228>)
 8001398:	a904      	add	r1, sp, #16
 800139a:	4630      	mov	r0, r6
 800139c:	f000 f888 	bl	80014b0 <_printf_i>
 80013a0:	e7ec      	b.n	800137c <_vfiprintf_r+0x1e4>
 80013a2:	bf00      	nop
 80013a4:	0800216c 	.word	0x0800216c
 80013a8:	08002118 	.word	0x08002118
 80013ac:	0800218c 	.word	0x0800218c
 80013b0:	0800214c 	.word	0x0800214c
 80013b4:	0800211e 	.word	0x0800211e
 80013b8:	08002122 	.word	0x08002122
 80013bc:	00000000 	.word	0x00000000
 80013c0:	08001173 	.word	0x08001173

080013c4 <_printf_common>:
 80013c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013c8:	4691      	mov	r9, r2
 80013ca:	461f      	mov	r7, r3
 80013cc:	688a      	ldr	r2, [r1, #8]
 80013ce:	690b      	ldr	r3, [r1, #16]
 80013d0:	4606      	mov	r6, r0
 80013d2:	4293      	cmp	r3, r2
 80013d4:	bfb8      	it	lt
 80013d6:	4613      	movlt	r3, r2
 80013d8:	f8c9 3000 	str.w	r3, [r9]
 80013dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013e0:	460c      	mov	r4, r1
 80013e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80013e6:	b112      	cbz	r2, 80013ee <_printf_common+0x2a>
 80013e8:	3301      	adds	r3, #1
 80013ea:	f8c9 3000 	str.w	r3, [r9]
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	0699      	lsls	r1, r3, #26
 80013f2:	bf42      	ittt	mi
 80013f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80013f8:	3302      	addmi	r3, #2
 80013fa:	f8c9 3000 	strmi.w	r3, [r9]
 80013fe:	6825      	ldr	r5, [r4, #0]
 8001400:	f015 0506 	ands.w	r5, r5, #6
 8001404:	d107      	bne.n	8001416 <_printf_common+0x52>
 8001406:	f104 0a19 	add.w	sl, r4, #25
 800140a:	68e3      	ldr	r3, [r4, #12]
 800140c:	f8d9 2000 	ldr.w	r2, [r9]
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	42ab      	cmp	r3, r5
 8001414:	dc29      	bgt.n	800146a <_printf_common+0xa6>
 8001416:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800141a:	6822      	ldr	r2, [r4, #0]
 800141c:	3300      	adds	r3, #0
 800141e:	bf18      	it	ne
 8001420:	2301      	movne	r3, #1
 8001422:	0692      	lsls	r2, r2, #26
 8001424:	d42e      	bmi.n	8001484 <_printf_common+0xc0>
 8001426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800142a:	4639      	mov	r1, r7
 800142c:	4630      	mov	r0, r6
 800142e:	47c0      	blx	r8
 8001430:	3001      	adds	r0, #1
 8001432:	d021      	beq.n	8001478 <_printf_common+0xb4>
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	68e5      	ldr	r5, [r4, #12]
 8001438:	f003 0306 	and.w	r3, r3, #6
 800143c:	2b04      	cmp	r3, #4
 800143e:	bf18      	it	ne
 8001440:	2500      	movne	r5, #0
 8001442:	f8d9 2000 	ldr.w	r2, [r9]
 8001446:	f04f 0900 	mov.w	r9, #0
 800144a:	bf08      	it	eq
 800144c:	1aad      	subeq	r5, r5, r2
 800144e:	68a3      	ldr	r3, [r4, #8]
 8001450:	6922      	ldr	r2, [r4, #16]
 8001452:	bf08      	it	eq
 8001454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001458:	4293      	cmp	r3, r2
 800145a:	bfc4      	itt	gt
 800145c:	1a9b      	subgt	r3, r3, r2
 800145e:	18ed      	addgt	r5, r5, r3
 8001460:	341a      	adds	r4, #26
 8001462:	454d      	cmp	r5, r9
 8001464:	d11a      	bne.n	800149c <_printf_common+0xd8>
 8001466:	2000      	movs	r0, #0
 8001468:	e008      	b.n	800147c <_printf_common+0xb8>
 800146a:	2301      	movs	r3, #1
 800146c:	4652      	mov	r2, sl
 800146e:	4639      	mov	r1, r7
 8001470:	4630      	mov	r0, r6
 8001472:	47c0      	blx	r8
 8001474:	3001      	adds	r0, #1
 8001476:	d103      	bne.n	8001480 <_printf_common+0xbc>
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001480:	3501      	adds	r5, #1
 8001482:	e7c2      	b.n	800140a <_printf_common+0x46>
 8001484:	2030      	movs	r0, #48	; 0x30
 8001486:	18e1      	adds	r1, r4, r3
 8001488:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001492:	4422      	add	r2, r4
 8001494:	3302      	adds	r3, #2
 8001496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800149a:	e7c4      	b.n	8001426 <_printf_common+0x62>
 800149c:	2301      	movs	r3, #1
 800149e:	4622      	mov	r2, r4
 80014a0:	4639      	mov	r1, r7
 80014a2:	4630      	mov	r0, r6
 80014a4:	47c0      	blx	r8
 80014a6:	3001      	adds	r0, #1
 80014a8:	d0e6      	beq.n	8001478 <_printf_common+0xb4>
 80014aa:	f109 0901 	add.w	r9, r9, #1
 80014ae:	e7d8      	b.n	8001462 <_printf_common+0x9e>

080014b0 <_printf_i>:
 80014b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80014b8:	460c      	mov	r4, r1
 80014ba:	7e09      	ldrb	r1, [r1, #24]
 80014bc:	b085      	sub	sp, #20
 80014be:	296e      	cmp	r1, #110	; 0x6e
 80014c0:	4617      	mov	r7, r2
 80014c2:	4606      	mov	r6, r0
 80014c4:	4698      	mov	r8, r3
 80014c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80014c8:	f000 80b3 	beq.w	8001632 <_printf_i+0x182>
 80014cc:	d822      	bhi.n	8001514 <_printf_i+0x64>
 80014ce:	2963      	cmp	r1, #99	; 0x63
 80014d0:	d036      	beq.n	8001540 <_printf_i+0x90>
 80014d2:	d80a      	bhi.n	80014ea <_printf_i+0x3a>
 80014d4:	2900      	cmp	r1, #0
 80014d6:	f000 80b9 	beq.w	800164c <_printf_i+0x19c>
 80014da:	2958      	cmp	r1, #88	; 0x58
 80014dc:	f000 8083 	beq.w	80015e6 <_printf_i+0x136>
 80014e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80014e8:	e032      	b.n	8001550 <_printf_i+0xa0>
 80014ea:	2964      	cmp	r1, #100	; 0x64
 80014ec:	d001      	beq.n	80014f2 <_printf_i+0x42>
 80014ee:	2969      	cmp	r1, #105	; 0x69
 80014f0:	d1f6      	bne.n	80014e0 <_printf_i+0x30>
 80014f2:	6820      	ldr	r0, [r4, #0]
 80014f4:	6813      	ldr	r3, [r2, #0]
 80014f6:	0605      	lsls	r5, r0, #24
 80014f8:	f103 0104 	add.w	r1, r3, #4
 80014fc:	d52a      	bpl.n	8001554 <_printf_i+0xa4>
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6011      	str	r1, [r2, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	da03      	bge.n	800150e <_printf_i+0x5e>
 8001506:	222d      	movs	r2, #45	; 0x2d
 8001508:	425b      	negs	r3, r3
 800150a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800150e:	486f      	ldr	r0, [pc, #444]	; (80016cc <_printf_i+0x21c>)
 8001510:	220a      	movs	r2, #10
 8001512:	e039      	b.n	8001588 <_printf_i+0xd8>
 8001514:	2973      	cmp	r1, #115	; 0x73
 8001516:	f000 809d 	beq.w	8001654 <_printf_i+0x1a4>
 800151a:	d808      	bhi.n	800152e <_printf_i+0x7e>
 800151c:	296f      	cmp	r1, #111	; 0x6f
 800151e:	d020      	beq.n	8001562 <_printf_i+0xb2>
 8001520:	2970      	cmp	r1, #112	; 0x70
 8001522:	d1dd      	bne.n	80014e0 <_printf_i+0x30>
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	f043 0320 	orr.w	r3, r3, #32
 800152a:	6023      	str	r3, [r4, #0]
 800152c:	e003      	b.n	8001536 <_printf_i+0x86>
 800152e:	2975      	cmp	r1, #117	; 0x75
 8001530:	d017      	beq.n	8001562 <_printf_i+0xb2>
 8001532:	2978      	cmp	r1, #120	; 0x78
 8001534:	d1d4      	bne.n	80014e0 <_printf_i+0x30>
 8001536:	2378      	movs	r3, #120	; 0x78
 8001538:	4865      	ldr	r0, [pc, #404]	; (80016d0 <_printf_i+0x220>)
 800153a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800153e:	e055      	b.n	80015ec <_printf_i+0x13c>
 8001540:	6813      	ldr	r3, [r2, #0]
 8001542:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001546:	1d19      	adds	r1, r3, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6011      	str	r1, [r2, #0]
 800154c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001550:	2301      	movs	r3, #1
 8001552:	e08c      	b.n	800166e <_printf_i+0x1be>
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f010 0f40 	tst.w	r0, #64	; 0x40
 800155a:	6011      	str	r1, [r2, #0]
 800155c:	bf18      	it	ne
 800155e:	b21b      	sxthne	r3, r3
 8001560:	e7cf      	b.n	8001502 <_printf_i+0x52>
 8001562:	6813      	ldr	r3, [r2, #0]
 8001564:	6825      	ldr	r5, [r4, #0]
 8001566:	1d18      	adds	r0, r3, #4
 8001568:	6010      	str	r0, [r2, #0]
 800156a:	0628      	lsls	r0, r5, #24
 800156c:	d501      	bpl.n	8001572 <_printf_i+0xc2>
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e002      	b.n	8001578 <_printf_i+0xc8>
 8001572:	0668      	lsls	r0, r5, #25
 8001574:	d5fb      	bpl.n	800156e <_printf_i+0xbe>
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	296f      	cmp	r1, #111	; 0x6f
 800157a:	bf14      	ite	ne
 800157c:	220a      	movne	r2, #10
 800157e:	2208      	moveq	r2, #8
 8001580:	4852      	ldr	r0, [pc, #328]	; (80016cc <_printf_i+0x21c>)
 8001582:	2100      	movs	r1, #0
 8001584:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001588:	6865      	ldr	r5, [r4, #4]
 800158a:	2d00      	cmp	r5, #0
 800158c:	60a5      	str	r5, [r4, #8]
 800158e:	f2c0 8095 	blt.w	80016bc <_printf_i+0x20c>
 8001592:	6821      	ldr	r1, [r4, #0]
 8001594:	f021 0104 	bic.w	r1, r1, #4
 8001598:	6021      	str	r1, [r4, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d13d      	bne.n	800161a <_printf_i+0x16a>
 800159e:	2d00      	cmp	r5, #0
 80015a0:	f040 808e 	bne.w	80016c0 <_printf_i+0x210>
 80015a4:	4665      	mov	r5, ip
 80015a6:	2a08      	cmp	r2, #8
 80015a8:	d10b      	bne.n	80015c2 <_printf_i+0x112>
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	07db      	lsls	r3, r3, #31
 80015ae:	d508      	bpl.n	80015c2 <_printf_i+0x112>
 80015b0:	6923      	ldr	r3, [r4, #16]
 80015b2:	6862      	ldr	r2, [r4, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	bfde      	ittt	le
 80015b8:	2330      	movle	r3, #48	; 0x30
 80015ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80015be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80015c2:	ebac 0305 	sub.w	r3, ip, r5
 80015c6:	6123      	str	r3, [r4, #16]
 80015c8:	f8cd 8000 	str.w	r8, [sp]
 80015cc:	463b      	mov	r3, r7
 80015ce:	aa03      	add	r2, sp, #12
 80015d0:	4621      	mov	r1, r4
 80015d2:	4630      	mov	r0, r6
 80015d4:	f7ff fef6 	bl	80013c4 <_printf_common>
 80015d8:	3001      	adds	r0, #1
 80015da:	d14d      	bne.n	8001678 <_printf_i+0x1c8>
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	b005      	add	sp, #20
 80015e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015e6:	4839      	ldr	r0, [pc, #228]	; (80016cc <_printf_i+0x21c>)
 80015e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80015ec:	6813      	ldr	r3, [r2, #0]
 80015ee:	6821      	ldr	r1, [r4, #0]
 80015f0:	1d1d      	adds	r5, r3, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6015      	str	r5, [r2, #0]
 80015f6:	060a      	lsls	r2, r1, #24
 80015f8:	d50b      	bpl.n	8001612 <_printf_i+0x162>
 80015fa:	07ca      	lsls	r2, r1, #31
 80015fc:	bf44      	itt	mi
 80015fe:	f041 0120 	orrmi.w	r1, r1, #32
 8001602:	6021      	strmi	r1, [r4, #0]
 8001604:	b91b      	cbnz	r3, 800160e <_printf_i+0x15e>
 8001606:	6822      	ldr	r2, [r4, #0]
 8001608:	f022 0220 	bic.w	r2, r2, #32
 800160c:	6022      	str	r2, [r4, #0]
 800160e:	2210      	movs	r2, #16
 8001610:	e7b7      	b.n	8001582 <_printf_i+0xd2>
 8001612:	064d      	lsls	r5, r1, #25
 8001614:	bf48      	it	mi
 8001616:	b29b      	uxthmi	r3, r3
 8001618:	e7ef      	b.n	80015fa <_printf_i+0x14a>
 800161a:	4665      	mov	r5, ip
 800161c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001620:	fb02 3311 	mls	r3, r2, r1, r3
 8001624:	5cc3      	ldrb	r3, [r0, r3]
 8001626:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800162a:	460b      	mov	r3, r1
 800162c:	2900      	cmp	r1, #0
 800162e:	d1f5      	bne.n	800161c <_printf_i+0x16c>
 8001630:	e7b9      	b.n	80015a6 <_printf_i+0xf6>
 8001632:	6813      	ldr	r3, [r2, #0]
 8001634:	6825      	ldr	r5, [r4, #0]
 8001636:	1d18      	adds	r0, r3, #4
 8001638:	6961      	ldr	r1, [r4, #20]
 800163a:	6010      	str	r0, [r2, #0]
 800163c:	0628      	lsls	r0, r5, #24
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	d501      	bpl.n	8001646 <_printf_i+0x196>
 8001642:	6019      	str	r1, [r3, #0]
 8001644:	e002      	b.n	800164c <_printf_i+0x19c>
 8001646:	066a      	lsls	r2, r5, #25
 8001648:	d5fb      	bpl.n	8001642 <_printf_i+0x192>
 800164a:	8019      	strh	r1, [r3, #0]
 800164c:	2300      	movs	r3, #0
 800164e:	4665      	mov	r5, ip
 8001650:	6123      	str	r3, [r4, #16]
 8001652:	e7b9      	b.n	80015c8 <_printf_i+0x118>
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	1d19      	adds	r1, r3, #4
 8001658:	6011      	str	r1, [r2, #0]
 800165a:	681d      	ldr	r5, [r3, #0]
 800165c:	6862      	ldr	r2, [r4, #4]
 800165e:	2100      	movs	r1, #0
 8001660:	4628      	mov	r0, r5
 8001662:	f000 fadd 	bl	8001c20 <memchr>
 8001666:	b108      	cbz	r0, 800166c <_printf_i+0x1bc>
 8001668:	1b40      	subs	r0, r0, r5
 800166a:	6060      	str	r0, [r4, #4]
 800166c:	6863      	ldr	r3, [r4, #4]
 800166e:	6123      	str	r3, [r4, #16]
 8001670:	2300      	movs	r3, #0
 8001672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001676:	e7a7      	b.n	80015c8 <_printf_i+0x118>
 8001678:	6923      	ldr	r3, [r4, #16]
 800167a:	462a      	mov	r2, r5
 800167c:	4639      	mov	r1, r7
 800167e:	4630      	mov	r0, r6
 8001680:	47c0      	blx	r8
 8001682:	3001      	adds	r0, #1
 8001684:	d0aa      	beq.n	80015dc <_printf_i+0x12c>
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	079b      	lsls	r3, r3, #30
 800168a:	d413      	bmi.n	80016b4 <_printf_i+0x204>
 800168c:	68e0      	ldr	r0, [r4, #12]
 800168e:	9b03      	ldr	r3, [sp, #12]
 8001690:	4298      	cmp	r0, r3
 8001692:	bfb8      	it	lt
 8001694:	4618      	movlt	r0, r3
 8001696:	e7a3      	b.n	80015e0 <_printf_i+0x130>
 8001698:	2301      	movs	r3, #1
 800169a:	464a      	mov	r2, r9
 800169c:	4639      	mov	r1, r7
 800169e:	4630      	mov	r0, r6
 80016a0:	47c0      	blx	r8
 80016a2:	3001      	adds	r0, #1
 80016a4:	d09a      	beq.n	80015dc <_printf_i+0x12c>
 80016a6:	3501      	adds	r5, #1
 80016a8:	68e3      	ldr	r3, [r4, #12]
 80016aa:	9a03      	ldr	r2, [sp, #12]
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	42ab      	cmp	r3, r5
 80016b0:	dcf2      	bgt.n	8001698 <_printf_i+0x1e8>
 80016b2:	e7eb      	b.n	800168c <_printf_i+0x1dc>
 80016b4:	2500      	movs	r5, #0
 80016b6:	f104 0919 	add.w	r9, r4, #25
 80016ba:	e7f5      	b.n	80016a8 <_printf_i+0x1f8>
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ac      	bne.n	800161a <_printf_i+0x16a>
 80016c0:	7803      	ldrb	r3, [r0, #0]
 80016c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016ca:	e76c      	b.n	80015a6 <_printf_i+0xf6>
 80016cc:	08002129 	.word	0x08002129
 80016d0:	0800213a 	.word	0x0800213a

080016d4 <__swbuf_r>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	460e      	mov	r6, r1
 80016d8:	4614      	mov	r4, r2
 80016da:	4605      	mov	r5, r0
 80016dc:	b118      	cbz	r0, 80016e6 <__swbuf_r+0x12>
 80016de:	6983      	ldr	r3, [r0, #24]
 80016e0:	b90b      	cbnz	r3, 80016e6 <__swbuf_r+0x12>
 80016e2:	f000 f9af 	bl	8001a44 <__sinit>
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <__swbuf_r+0x98>)
 80016e8:	429c      	cmp	r4, r3
 80016ea:	d12a      	bne.n	8001742 <__swbuf_r+0x6e>
 80016ec:	686c      	ldr	r4, [r5, #4]
 80016ee:	69a3      	ldr	r3, [r4, #24]
 80016f0:	60a3      	str	r3, [r4, #8]
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	071a      	lsls	r2, r3, #28
 80016f6:	d52e      	bpl.n	8001756 <__swbuf_r+0x82>
 80016f8:	6923      	ldr	r3, [r4, #16]
 80016fa:	b363      	cbz	r3, 8001756 <__swbuf_r+0x82>
 80016fc:	6923      	ldr	r3, [r4, #16]
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	b2f6      	uxtb	r6, r6
 8001702:	1ac0      	subs	r0, r0, r3
 8001704:	6963      	ldr	r3, [r4, #20]
 8001706:	4637      	mov	r7, r6
 8001708:	4283      	cmp	r3, r0
 800170a:	dc04      	bgt.n	8001716 <__swbuf_r+0x42>
 800170c:	4621      	mov	r1, r4
 800170e:	4628      	mov	r0, r5
 8001710:	f000 f92e 	bl	8001970 <_fflush_r>
 8001714:	bb28      	cbnz	r0, 8001762 <__swbuf_r+0x8e>
 8001716:	68a3      	ldr	r3, [r4, #8]
 8001718:	3001      	adds	r0, #1
 800171a:	3b01      	subs	r3, #1
 800171c:	60a3      	str	r3, [r4, #8]
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	6022      	str	r2, [r4, #0]
 8001724:	701e      	strb	r6, [r3, #0]
 8001726:	6963      	ldr	r3, [r4, #20]
 8001728:	4283      	cmp	r3, r0
 800172a:	d004      	beq.n	8001736 <__swbuf_r+0x62>
 800172c:	89a3      	ldrh	r3, [r4, #12]
 800172e:	07db      	lsls	r3, r3, #31
 8001730:	d519      	bpl.n	8001766 <__swbuf_r+0x92>
 8001732:	2e0a      	cmp	r6, #10
 8001734:	d117      	bne.n	8001766 <__swbuf_r+0x92>
 8001736:	4621      	mov	r1, r4
 8001738:	4628      	mov	r0, r5
 800173a:	f000 f919 	bl	8001970 <_fflush_r>
 800173e:	b190      	cbz	r0, 8001766 <__swbuf_r+0x92>
 8001740:	e00f      	b.n	8001762 <__swbuf_r+0x8e>
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <__swbuf_r+0x9c>)
 8001744:	429c      	cmp	r4, r3
 8001746:	d101      	bne.n	800174c <__swbuf_r+0x78>
 8001748:	68ac      	ldr	r4, [r5, #8]
 800174a:	e7d0      	b.n	80016ee <__swbuf_r+0x1a>
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <__swbuf_r+0xa0>)
 800174e:	429c      	cmp	r4, r3
 8001750:	bf08      	it	eq
 8001752:	68ec      	ldreq	r4, [r5, #12]
 8001754:	e7cb      	b.n	80016ee <__swbuf_r+0x1a>
 8001756:	4621      	mov	r1, r4
 8001758:	4628      	mov	r0, r5
 800175a:	f000 f80d 	bl	8001778 <__swsetup_r>
 800175e:	2800      	cmp	r0, #0
 8001760:	d0cc      	beq.n	80016fc <__swbuf_r+0x28>
 8001762:	f04f 37ff 	mov.w	r7, #4294967295
 8001766:	4638      	mov	r0, r7
 8001768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800176a:	bf00      	nop
 800176c:	0800216c 	.word	0x0800216c
 8001770:	0800218c 	.word	0x0800218c
 8001774:	0800214c 	.word	0x0800214c

08001778 <__swsetup_r>:
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <__swsetup_r+0xcc>)
 800177a:	b570      	push	{r4, r5, r6, lr}
 800177c:	681d      	ldr	r5, [r3, #0]
 800177e:	4606      	mov	r6, r0
 8001780:	460c      	mov	r4, r1
 8001782:	b125      	cbz	r5, 800178e <__swsetup_r+0x16>
 8001784:	69ab      	ldr	r3, [r5, #24]
 8001786:	b913      	cbnz	r3, 800178e <__swsetup_r+0x16>
 8001788:	4628      	mov	r0, r5
 800178a:	f000 f95b 	bl	8001a44 <__sinit>
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <__swsetup_r+0xd0>)
 8001790:	429c      	cmp	r4, r3
 8001792:	d10f      	bne.n	80017b4 <__swsetup_r+0x3c>
 8001794:	686c      	ldr	r4, [r5, #4]
 8001796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800179a:	b29a      	uxth	r2, r3
 800179c:	0715      	lsls	r5, r2, #28
 800179e:	d42c      	bmi.n	80017fa <__swsetup_r+0x82>
 80017a0:	06d0      	lsls	r0, r2, #27
 80017a2:	d411      	bmi.n	80017c8 <__swsetup_r+0x50>
 80017a4:	2209      	movs	r2, #9
 80017a6:	6032      	str	r2, [r6, #0]
 80017a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ac:	81a3      	strh	r3, [r4, #12]
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
 80017b2:	e03e      	b.n	8001832 <__swsetup_r+0xba>
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <__swsetup_r+0xd4>)
 80017b6:	429c      	cmp	r4, r3
 80017b8:	d101      	bne.n	80017be <__swsetup_r+0x46>
 80017ba:	68ac      	ldr	r4, [r5, #8]
 80017bc:	e7eb      	b.n	8001796 <__swsetup_r+0x1e>
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <__swsetup_r+0xd8>)
 80017c0:	429c      	cmp	r4, r3
 80017c2:	bf08      	it	eq
 80017c4:	68ec      	ldreq	r4, [r5, #12]
 80017c6:	e7e6      	b.n	8001796 <__swsetup_r+0x1e>
 80017c8:	0751      	lsls	r1, r2, #29
 80017ca:	d512      	bpl.n	80017f2 <__swsetup_r+0x7a>
 80017cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017ce:	b141      	cbz	r1, 80017e2 <__swsetup_r+0x6a>
 80017d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017d4:	4299      	cmp	r1, r3
 80017d6:	d002      	beq.n	80017de <__swsetup_r+0x66>
 80017d8:	4630      	mov	r0, r6
 80017da:	f000 fa2f 	bl	8001c3c <_free_r>
 80017de:	2300      	movs	r3, #0
 80017e0:	6363      	str	r3, [r4, #52]	; 0x34
 80017e2:	89a3      	ldrh	r3, [r4, #12]
 80017e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80017e8:	81a3      	strh	r3, [r4, #12]
 80017ea:	2300      	movs	r3, #0
 80017ec:	6063      	str	r3, [r4, #4]
 80017ee:	6923      	ldr	r3, [r4, #16]
 80017f0:	6023      	str	r3, [r4, #0]
 80017f2:	89a3      	ldrh	r3, [r4, #12]
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	81a3      	strh	r3, [r4, #12]
 80017fa:	6923      	ldr	r3, [r4, #16]
 80017fc:	b94b      	cbnz	r3, 8001812 <__swsetup_r+0x9a>
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001808:	d003      	beq.n	8001812 <__swsetup_r+0x9a>
 800180a:	4621      	mov	r1, r4
 800180c:	4630      	mov	r0, r6
 800180e:	f000 f9c7 	bl	8001ba0 <__smakebuf_r>
 8001812:	89a2      	ldrh	r2, [r4, #12]
 8001814:	f012 0301 	ands.w	r3, r2, #1
 8001818:	d00c      	beq.n	8001834 <__swsetup_r+0xbc>
 800181a:	2300      	movs	r3, #0
 800181c:	60a3      	str	r3, [r4, #8]
 800181e:	6963      	ldr	r3, [r4, #20]
 8001820:	425b      	negs	r3, r3
 8001822:	61a3      	str	r3, [r4, #24]
 8001824:	6923      	ldr	r3, [r4, #16]
 8001826:	b953      	cbnz	r3, 800183e <__swsetup_r+0xc6>
 8001828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800182c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001830:	d1ba      	bne.n	80017a8 <__swsetup_r+0x30>
 8001832:	bd70      	pop	{r4, r5, r6, pc}
 8001834:	0792      	lsls	r2, r2, #30
 8001836:	bf58      	it	pl
 8001838:	6963      	ldrpl	r3, [r4, #20]
 800183a:	60a3      	str	r3, [r4, #8]
 800183c:	e7f2      	b.n	8001824 <__swsetup_r+0xac>
 800183e:	2000      	movs	r0, #0
 8001840:	e7f7      	b.n	8001832 <__swsetup_r+0xba>
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	0800216c 	.word	0x0800216c
 800184c:	0800218c 	.word	0x0800218c
 8001850:	0800214c 	.word	0x0800214c

08001854 <abort>:
 8001854:	b508      	push	{r3, lr}
 8001856:	2006      	movs	r0, #6
 8001858:	f000 face 	bl	8001df8 <raise>
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff fb3e 	bl	8000ede <_exit>
	...

08001864 <__sflush_r>:
 8001864:	898a      	ldrh	r2, [r1, #12]
 8001866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800186a:	4605      	mov	r5, r0
 800186c:	0710      	lsls	r0, r2, #28
 800186e:	460c      	mov	r4, r1
 8001870:	d458      	bmi.n	8001924 <__sflush_r+0xc0>
 8001872:	684b      	ldr	r3, [r1, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	dc05      	bgt.n	8001884 <__sflush_r+0x20>
 8001878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800187a:	2b00      	cmp	r3, #0
 800187c:	dc02      	bgt.n	8001884 <__sflush_r+0x20>
 800187e:	2000      	movs	r0, #0
 8001880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001886:	2e00      	cmp	r6, #0
 8001888:	d0f9      	beq.n	800187e <__sflush_r+0x1a>
 800188a:	2300      	movs	r3, #0
 800188c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001890:	682f      	ldr	r7, [r5, #0]
 8001892:	6a21      	ldr	r1, [r4, #32]
 8001894:	602b      	str	r3, [r5, #0]
 8001896:	d032      	beq.n	80018fe <__sflush_r+0x9a>
 8001898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800189a:	89a3      	ldrh	r3, [r4, #12]
 800189c:	075a      	lsls	r2, r3, #29
 800189e:	d505      	bpl.n	80018ac <__sflush_r+0x48>
 80018a0:	6863      	ldr	r3, [r4, #4]
 80018a2:	1ac0      	subs	r0, r0, r3
 80018a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018a6:	b10b      	cbz	r3, 80018ac <__sflush_r+0x48>
 80018a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018aa:	1ac0      	subs	r0, r0, r3
 80018ac:	2300      	movs	r3, #0
 80018ae:	4602      	mov	r2, r0
 80018b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018b2:	6a21      	ldr	r1, [r4, #32]
 80018b4:	4628      	mov	r0, r5
 80018b6:	47b0      	blx	r6
 80018b8:	1c43      	adds	r3, r0, #1
 80018ba:	89a3      	ldrh	r3, [r4, #12]
 80018bc:	d106      	bne.n	80018cc <__sflush_r+0x68>
 80018be:	6829      	ldr	r1, [r5, #0]
 80018c0:	291d      	cmp	r1, #29
 80018c2:	d848      	bhi.n	8001956 <__sflush_r+0xf2>
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <__sflush_r+0x108>)
 80018c6:	40ca      	lsrs	r2, r1
 80018c8:	07d6      	lsls	r6, r2, #31
 80018ca:	d544      	bpl.n	8001956 <__sflush_r+0xf2>
 80018cc:	2200      	movs	r2, #0
 80018ce:	6062      	str	r2, [r4, #4]
 80018d0:	6922      	ldr	r2, [r4, #16]
 80018d2:	04d9      	lsls	r1, r3, #19
 80018d4:	6022      	str	r2, [r4, #0]
 80018d6:	d504      	bpl.n	80018e2 <__sflush_r+0x7e>
 80018d8:	1c42      	adds	r2, r0, #1
 80018da:	d101      	bne.n	80018e0 <__sflush_r+0x7c>
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	b903      	cbnz	r3, 80018e2 <__sflush_r+0x7e>
 80018e0:	6560      	str	r0, [r4, #84]	; 0x54
 80018e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018e4:	602f      	str	r7, [r5, #0]
 80018e6:	2900      	cmp	r1, #0
 80018e8:	d0c9      	beq.n	800187e <__sflush_r+0x1a>
 80018ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018ee:	4299      	cmp	r1, r3
 80018f0:	d002      	beq.n	80018f8 <__sflush_r+0x94>
 80018f2:	4628      	mov	r0, r5
 80018f4:	f000 f9a2 	bl	8001c3c <_free_r>
 80018f8:	2000      	movs	r0, #0
 80018fa:	6360      	str	r0, [r4, #52]	; 0x34
 80018fc:	e7c0      	b.n	8001880 <__sflush_r+0x1c>
 80018fe:	2301      	movs	r3, #1
 8001900:	4628      	mov	r0, r5
 8001902:	47b0      	blx	r6
 8001904:	1c41      	adds	r1, r0, #1
 8001906:	d1c8      	bne.n	800189a <__sflush_r+0x36>
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0c5      	beq.n	800189a <__sflush_r+0x36>
 800190e:	2b1d      	cmp	r3, #29
 8001910:	d001      	beq.n	8001916 <__sflush_r+0xb2>
 8001912:	2b16      	cmp	r3, #22
 8001914:	d101      	bne.n	800191a <__sflush_r+0xb6>
 8001916:	602f      	str	r7, [r5, #0]
 8001918:	e7b1      	b.n	800187e <__sflush_r+0x1a>
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	81a3      	strh	r3, [r4, #12]
 8001922:	e7ad      	b.n	8001880 <__sflush_r+0x1c>
 8001924:	690f      	ldr	r7, [r1, #16]
 8001926:	2f00      	cmp	r7, #0
 8001928:	d0a9      	beq.n	800187e <__sflush_r+0x1a>
 800192a:	0793      	lsls	r3, r2, #30
 800192c:	bf18      	it	ne
 800192e:	2300      	movne	r3, #0
 8001930:	680e      	ldr	r6, [r1, #0]
 8001932:	bf08      	it	eq
 8001934:	694b      	ldreq	r3, [r1, #20]
 8001936:	eba6 0807 	sub.w	r8, r6, r7
 800193a:	600f      	str	r7, [r1, #0]
 800193c:	608b      	str	r3, [r1, #8]
 800193e:	f1b8 0f00 	cmp.w	r8, #0
 8001942:	dd9c      	ble.n	800187e <__sflush_r+0x1a>
 8001944:	4643      	mov	r3, r8
 8001946:	463a      	mov	r2, r7
 8001948:	6a21      	ldr	r1, [r4, #32]
 800194a:	4628      	mov	r0, r5
 800194c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800194e:	47b0      	blx	r6
 8001950:	2800      	cmp	r0, #0
 8001952:	dc06      	bgt.n	8001962 <__sflush_r+0xfe>
 8001954:	89a3      	ldrh	r3, [r4, #12]
 8001956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800195a:	81a3      	strh	r3, [r4, #12]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	e78e      	b.n	8001880 <__sflush_r+0x1c>
 8001962:	4407      	add	r7, r0
 8001964:	eba8 0800 	sub.w	r8, r8, r0
 8001968:	e7e9      	b.n	800193e <__sflush_r+0xda>
 800196a:	bf00      	nop
 800196c:	20400001 	.word	0x20400001

08001970 <_fflush_r>:
 8001970:	b538      	push	{r3, r4, r5, lr}
 8001972:	690b      	ldr	r3, [r1, #16]
 8001974:	4605      	mov	r5, r0
 8001976:	460c      	mov	r4, r1
 8001978:	b1db      	cbz	r3, 80019b2 <_fflush_r+0x42>
 800197a:	b118      	cbz	r0, 8001984 <_fflush_r+0x14>
 800197c:	6983      	ldr	r3, [r0, #24]
 800197e:	b90b      	cbnz	r3, 8001984 <_fflush_r+0x14>
 8001980:	f000 f860 	bl	8001a44 <__sinit>
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <_fflush_r+0x48>)
 8001986:	429c      	cmp	r4, r3
 8001988:	d109      	bne.n	800199e <_fflush_r+0x2e>
 800198a:	686c      	ldr	r4, [r5, #4]
 800198c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001990:	b17b      	cbz	r3, 80019b2 <_fflush_r+0x42>
 8001992:	4621      	mov	r1, r4
 8001994:	4628      	mov	r0, r5
 8001996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800199a:	f7ff bf63 	b.w	8001864 <__sflush_r>
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <_fflush_r+0x4c>)
 80019a0:	429c      	cmp	r4, r3
 80019a2:	d101      	bne.n	80019a8 <_fflush_r+0x38>
 80019a4:	68ac      	ldr	r4, [r5, #8]
 80019a6:	e7f1      	b.n	800198c <_fflush_r+0x1c>
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <_fflush_r+0x50>)
 80019aa:	429c      	cmp	r4, r3
 80019ac:	bf08      	it	eq
 80019ae:	68ec      	ldreq	r4, [r5, #12]
 80019b0:	e7ec      	b.n	800198c <_fflush_r+0x1c>
 80019b2:	2000      	movs	r0, #0
 80019b4:	bd38      	pop	{r3, r4, r5, pc}
 80019b6:	bf00      	nop
 80019b8:	0800216c 	.word	0x0800216c
 80019bc:	0800218c 	.word	0x0800218c
 80019c0:	0800214c 	.word	0x0800214c

080019c4 <std>:
 80019c4:	2300      	movs	r3, #0
 80019c6:	b510      	push	{r4, lr}
 80019c8:	4604      	mov	r4, r0
 80019ca:	e9c0 3300 	strd	r3, r3, [r0]
 80019ce:	6083      	str	r3, [r0, #8]
 80019d0:	8181      	strh	r1, [r0, #12]
 80019d2:	6643      	str	r3, [r0, #100]	; 0x64
 80019d4:	81c2      	strh	r2, [r0, #14]
 80019d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019da:	6183      	str	r3, [r0, #24]
 80019dc:	4619      	mov	r1, r3
 80019de:	2208      	movs	r2, #8
 80019e0:	305c      	adds	r0, #92	; 0x5c
 80019e2:	f7ff fba9 	bl	8001138 <memset>
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <std+0x38>)
 80019e8:	6224      	str	r4, [r4, #32]
 80019ea:	6263      	str	r3, [r4, #36]	; 0x24
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <std+0x3c>)
 80019ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <std+0x40>)
 80019f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <std+0x44>)
 80019f6:	6323      	str	r3, [r4, #48]	; 0x30
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	bf00      	nop
 80019fc:	08001e31 	.word	0x08001e31
 8001a00:	08001e53 	.word	0x08001e53
 8001a04:	08001e8b 	.word	0x08001e8b
 8001a08:	08001eaf 	.word	0x08001eaf

08001a0c <_cleanup_r>:
 8001a0c:	4901      	ldr	r1, [pc, #4]	; (8001a14 <_cleanup_r+0x8>)
 8001a0e:	f000 b885 	b.w	8001b1c <_fwalk_reent>
 8001a12:	bf00      	nop
 8001a14:	08001971 	.word	0x08001971

08001a18 <__sfmoreglue>:
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	2568      	movs	r5, #104	; 0x68
 8001a1c:	1e4a      	subs	r2, r1, #1
 8001a1e:	4355      	muls	r5, r2
 8001a20:	460e      	mov	r6, r1
 8001a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a26:	f000 f955 	bl	8001cd4 <_malloc_r>
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	b140      	cbz	r0, 8001a40 <__sfmoreglue+0x28>
 8001a2e:	2100      	movs	r1, #0
 8001a30:	e9c0 1600 	strd	r1, r6, [r0]
 8001a34:	300c      	adds	r0, #12
 8001a36:	60a0      	str	r0, [r4, #8]
 8001a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a3c:	f7ff fb7c 	bl	8001138 <memset>
 8001a40:	4620      	mov	r0, r4
 8001a42:	bd70      	pop	{r4, r5, r6, pc}

08001a44 <__sinit>:
 8001a44:	6983      	ldr	r3, [r0, #24]
 8001a46:	b510      	push	{r4, lr}
 8001a48:	4604      	mov	r4, r0
 8001a4a:	bb33      	cbnz	r3, 8001a9a <__sinit+0x56>
 8001a4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001a50:	6503      	str	r3, [r0, #80]	; 0x50
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <__sinit+0x58>)
 8001a54:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <__sinit+0x5c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6282      	str	r2, [r0, #40]	; 0x28
 8001a5a:	4298      	cmp	r0, r3
 8001a5c:	bf04      	itt	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	6183      	streq	r3, [r0, #24]
 8001a62:	f000 f81f 	bl	8001aa4 <__sfp>
 8001a66:	6060      	str	r0, [r4, #4]
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f000 f81b 	bl	8001aa4 <__sfp>
 8001a6e:	60a0      	str	r0, [r4, #8]
 8001a70:	4620      	mov	r0, r4
 8001a72:	f000 f817 	bl	8001aa4 <__sfp>
 8001a76:	2200      	movs	r2, #0
 8001a78:	60e0      	str	r0, [r4, #12]
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	6860      	ldr	r0, [r4, #4]
 8001a7e:	f7ff ffa1 	bl	80019c4 <std>
 8001a82:	2201      	movs	r2, #1
 8001a84:	2109      	movs	r1, #9
 8001a86:	68a0      	ldr	r0, [r4, #8]
 8001a88:	f7ff ff9c 	bl	80019c4 <std>
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	2112      	movs	r1, #18
 8001a90:	68e0      	ldr	r0, [r4, #12]
 8001a92:	f7ff ff97 	bl	80019c4 <std>
 8001a96:	2301      	movs	r3, #1
 8001a98:	61a3      	str	r3, [r4, #24]
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	08002114 	.word	0x08002114
 8001aa0:	08001a0d 	.word	0x08001a0d

08001aa4 <__sfp>:
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <__sfp+0x70>)
 8001aa8:	4607      	mov	r7, r0
 8001aaa:	681e      	ldr	r6, [r3, #0]
 8001aac:	69b3      	ldr	r3, [r6, #24]
 8001aae:	b913      	cbnz	r3, 8001ab6 <__sfp+0x12>
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	f7ff ffc7 	bl	8001a44 <__sinit>
 8001ab6:	3648      	adds	r6, #72	; 0x48
 8001ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	d503      	bpl.n	8001ac8 <__sfp+0x24>
 8001ac0:	6833      	ldr	r3, [r6, #0]
 8001ac2:	b133      	cbz	r3, 8001ad2 <__sfp+0x2e>
 8001ac4:	6836      	ldr	r6, [r6, #0]
 8001ac6:	e7f7      	b.n	8001ab8 <__sfp+0x14>
 8001ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001acc:	b16d      	cbz	r5, 8001aea <__sfp+0x46>
 8001ace:	3468      	adds	r4, #104	; 0x68
 8001ad0:	e7f4      	b.n	8001abc <__sfp+0x18>
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4638      	mov	r0, r7
 8001ad6:	f7ff ff9f 	bl	8001a18 <__sfmoreglue>
 8001ada:	6030      	str	r0, [r6, #0]
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d1f1      	bne.n	8001ac4 <__sfp+0x20>
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <__sfp+0x74>)
 8001aec:	6665      	str	r5, [r4, #100]	; 0x64
 8001aee:	e9c4 5500 	strd	r5, r5, [r4]
 8001af2:	60a5      	str	r5, [r4, #8]
 8001af4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001af8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001afc:	2208      	movs	r2, #8
 8001afe:	4629      	mov	r1, r5
 8001b00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b04:	f7ff fb18 	bl	8001138 <memset>
 8001b08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b10:	e7e9      	b.n	8001ae6 <__sfp+0x42>
 8001b12:	bf00      	nop
 8001b14:	08002114 	.word	0x08002114
 8001b18:	ffff0001 	.word	0xffff0001

08001b1c <_fwalk_reent>:
 8001b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b20:	4680      	mov	r8, r0
 8001b22:	4689      	mov	r9, r1
 8001b24:	2600      	movs	r6, #0
 8001b26:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001b2a:	b914      	cbnz	r4, 8001b32 <_fwalk_reent+0x16>
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001b36:	3f01      	subs	r7, #1
 8001b38:	d501      	bpl.n	8001b3e <_fwalk_reent+0x22>
 8001b3a:	6824      	ldr	r4, [r4, #0]
 8001b3c:	e7f5      	b.n	8001b2a <_fwalk_reent+0xe>
 8001b3e:	89ab      	ldrh	r3, [r5, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d907      	bls.n	8001b54 <_fwalk_reent+0x38>
 8001b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	d003      	beq.n	8001b54 <_fwalk_reent+0x38>
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	4640      	mov	r0, r8
 8001b50:	47c8      	blx	r9
 8001b52:	4306      	orrs	r6, r0
 8001b54:	3568      	adds	r5, #104	; 0x68
 8001b56:	e7ee      	b.n	8001b36 <_fwalk_reent+0x1a>

08001b58 <__swhatbuf_r>:
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	460e      	mov	r6, r1
 8001b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b60:	b096      	sub	sp, #88	; 0x58
 8001b62:	2900      	cmp	r1, #0
 8001b64:	4614      	mov	r4, r2
 8001b66:	461d      	mov	r5, r3
 8001b68:	da07      	bge.n	8001b7a <__swhatbuf_r+0x22>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	602b      	str	r3, [r5, #0]
 8001b6e:	89b3      	ldrh	r3, [r6, #12]
 8001b70:	061a      	lsls	r2, r3, #24
 8001b72:	d410      	bmi.n	8001b96 <__swhatbuf_r+0x3e>
 8001b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b78:	e00e      	b.n	8001b98 <__swhatbuf_r+0x40>
 8001b7a:	466a      	mov	r2, sp
 8001b7c:	f000 f9be 	bl	8001efc <_fstat_r>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	dbf2      	blt.n	8001b6a <__swhatbuf_r+0x12>
 8001b84:	9a01      	ldr	r2, [sp, #4]
 8001b86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b8e:	425a      	negs	r2, r3
 8001b90:	415a      	adcs	r2, r3
 8001b92:	602a      	str	r2, [r5, #0]
 8001b94:	e7ee      	b.n	8001b74 <__swhatbuf_r+0x1c>
 8001b96:	2340      	movs	r3, #64	; 0x40
 8001b98:	2000      	movs	r0, #0
 8001b9a:	6023      	str	r3, [r4, #0]
 8001b9c:	b016      	add	sp, #88	; 0x58
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}

08001ba0 <__smakebuf_r>:
 8001ba0:	898b      	ldrh	r3, [r1, #12]
 8001ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ba4:	079d      	lsls	r5, r3, #30
 8001ba6:	4606      	mov	r6, r0
 8001ba8:	460c      	mov	r4, r1
 8001baa:	d507      	bpl.n	8001bbc <__smakebuf_r+0x1c>
 8001bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001bb0:	6023      	str	r3, [r4, #0]
 8001bb2:	6123      	str	r3, [r4, #16]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	6163      	str	r3, [r4, #20]
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
 8001bbc:	ab01      	add	r3, sp, #4
 8001bbe:	466a      	mov	r2, sp
 8001bc0:	f7ff ffca 	bl	8001b58 <__swhatbuf_r>
 8001bc4:	9900      	ldr	r1, [sp, #0]
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	4630      	mov	r0, r6
 8001bca:	f000 f883 	bl	8001cd4 <_malloc_r>
 8001bce:	b948      	cbnz	r0, 8001be4 <__smakebuf_r+0x44>
 8001bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bd4:	059a      	lsls	r2, r3, #22
 8001bd6:	d4ef      	bmi.n	8001bb8 <__smakebuf_r+0x18>
 8001bd8:	f023 0303 	bic.w	r3, r3, #3
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	81a3      	strh	r3, [r4, #12]
 8001be2:	e7e3      	b.n	8001bac <__smakebuf_r+0xc>
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <__smakebuf_r+0x7c>)
 8001be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001be8:	89a3      	ldrh	r3, [r4, #12]
 8001bea:	6020      	str	r0, [r4, #0]
 8001bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf0:	81a3      	strh	r3, [r4, #12]
 8001bf2:	9b00      	ldr	r3, [sp, #0]
 8001bf4:	6120      	str	r0, [r4, #16]
 8001bf6:	6163      	str	r3, [r4, #20]
 8001bf8:	9b01      	ldr	r3, [sp, #4]
 8001bfa:	b15b      	cbz	r3, 8001c14 <__smakebuf_r+0x74>
 8001bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c00:	4630      	mov	r0, r6
 8001c02:	f000 f98d 	bl	8001f20 <_isatty_r>
 8001c06:	b128      	cbz	r0, 8001c14 <__smakebuf_r+0x74>
 8001c08:	89a3      	ldrh	r3, [r4, #12]
 8001c0a:	f023 0303 	bic.w	r3, r3, #3
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	81a3      	strh	r3, [r4, #12]
 8001c14:	89a3      	ldrh	r3, [r4, #12]
 8001c16:	431d      	orrs	r5, r3
 8001c18:	81a5      	strh	r5, [r4, #12]
 8001c1a:	e7cd      	b.n	8001bb8 <__smakebuf_r+0x18>
 8001c1c:	08001a0d 	.word	0x08001a0d

08001c20 <memchr>:
 8001c20:	b510      	push	{r4, lr}
 8001c22:	b2c9      	uxtb	r1, r1
 8001c24:	4402      	add	r2, r0
 8001c26:	4290      	cmp	r0, r2
 8001c28:	4603      	mov	r3, r0
 8001c2a:	d101      	bne.n	8001c30 <memchr+0x10>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e003      	b.n	8001c38 <memchr+0x18>
 8001c30:	781c      	ldrb	r4, [r3, #0]
 8001c32:	3001      	adds	r0, #1
 8001c34:	428c      	cmp	r4, r1
 8001c36:	d1f6      	bne.n	8001c26 <memchr+0x6>
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd10      	pop	{r4, pc}

08001c3c <_free_r>:
 8001c3c:	b538      	push	{r3, r4, r5, lr}
 8001c3e:	4605      	mov	r5, r0
 8001c40:	2900      	cmp	r1, #0
 8001c42:	d043      	beq.n	8001ccc <_free_r+0x90>
 8001c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c48:	1f0c      	subs	r4, r1, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bfb8      	it	lt
 8001c4e:	18e4      	addlt	r4, r4, r3
 8001c50:	f000 f988 	bl	8001f64 <__malloc_lock>
 8001c54:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <_free_r+0x94>)
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	b933      	cbnz	r3, 8001c6a <_free_r+0x2e>
 8001c5c:	6063      	str	r3, [r4, #4]
 8001c5e:	6014      	str	r4, [r2, #0]
 8001c60:	4628      	mov	r0, r5
 8001c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c66:	f000 b97e 	b.w	8001f66 <__malloc_unlock>
 8001c6a:	42a3      	cmp	r3, r4
 8001c6c:	d90b      	bls.n	8001c86 <_free_r+0x4a>
 8001c6e:	6821      	ldr	r1, [r4, #0]
 8001c70:	1862      	adds	r2, r4, r1
 8001c72:	4293      	cmp	r3, r2
 8001c74:	bf01      	itttt	eq
 8001c76:	681a      	ldreq	r2, [r3, #0]
 8001c78:	685b      	ldreq	r3, [r3, #4]
 8001c7a:	1852      	addeq	r2, r2, r1
 8001c7c:	6022      	streq	r2, [r4, #0]
 8001c7e:	6063      	str	r3, [r4, #4]
 8001c80:	6004      	str	r4, [r0, #0]
 8001c82:	e7ed      	b.n	8001c60 <_free_r+0x24>
 8001c84:	4613      	mov	r3, r2
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	b10a      	cbz	r2, 8001c8e <_free_r+0x52>
 8001c8a:	42a2      	cmp	r2, r4
 8001c8c:	d9fa      	bls.n	8001c84 <_free_r+0x48>
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	1858      	adds	r0, r3, r1
 8001c92:	42a0      	cmp	r0, r4
 8001c94:	d10b      	bne.n	8001cae <_free_r+0x72>
 8001c96:	6820      	ldr	r0, [r4, #0]
 8001c98:	4401      	add	r1, r0
 8001c9a:	1858      	adds	r0, r3, r1
 8001c9c:	4282      	cmp	r2, r0
 8001c9e:	6019      	str	r1, [r3, #0]
 8001ca0:	d1de      	bne.n	8001c60 <_free_r+0x24>
 8001ca2:	6810      	ldr	r0, [r2, #0]
 8001ca4:	6852      	ldr	r2, [r2, #4]
 8001ca6:	4401      	add	r1, r0
 8001ca8:	6019      	str	r1, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	e7d8      	b.n	8001c60 <_free_r+0x24>
 8001cae:	d902      	bls.n	8001cb6 <_free_r+0x7a>
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	602b      	str	r3, [r5, #0]
 8001cb4:	e7d4      	b.n	8001c60 <_free_r+0x24>
 8001cb6:	6820      	ldr	r0, [r4, #0]
 8001cb8:	1821      	adds	r1, r4, r0
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	bf01      	itttt	eq
 8001cbe:	6811      	ldreq	r1, [r2, #0]
 8001cc0:	6852      	ldreq	r2, [r2, #4]
 8001cc2:	1809      	addeq	r1, r1, r0
 8001cc4:	6021      	streq	r1, [r4, #0]
 8001cc6:	6062      	str	r2, [r4, #4]
 8001cc8:	605c      	str	r4, [r3, #4]
 8001cca:	e7c9      	b.n	8001c60 <_free_r+0x24>
 8001ccc:	bd38      	pop	{r3, r4, r5, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000090 	.word	0x20000090

08001cd4 <_malloc_r>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	1ccd      	adds	r5, r1, #3
 8001cd8:	f025 0503 	bic.w	r5, r5, #3
 8001cdc:	3508      	adds	r5, #8
 8001cde:	2d0c      	cmp	r5, #12
 8001ce0:	bf38      	it	cc
 8001ce2:	250c      	movcc	r5, #12
 8001ce4:	2d00      	cmp	r5, #0
 8001ce6:	4606      	mov	r6, r0
 8001ce8:	db01      	blt.n	8001cee <_malloc_r+0x1a>
 8001cea:	42a9      	cmp	r1, r5
 8001cec:	d903      	bls.n	8001cf6 <_malloc_r+0x22>
 8001cee:	230c      	movs	r3, #12
 8001cf0:	6033      	str	r3, [r6, #0]
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	bd70      	pop	{r4, r5, r6, pc}
 8001cf6:	f000 f935 	bl	8001f64 <__malloc_lock>
 8001cfa:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <_malloc_r+0xac>)
 8001cfc:	6814      	ldr	r4, [r2, #0]
 8001cfe:	4621      	mov	r1, r4
 8001d00:	b991      	cbnz	r1, 8001d28 <_malloc_r+0x54>
 8001d02:	4c20      	ldr	r4, [pc, #128]	; (8001d84 <_malloc_r+0xb0>)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	b91b      	cbnz	r3, 8001d10 <_malloc_r+0x3c>
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f000 f83d 	bl	8001d88 <_sbrk_r>
 8001d0e:	6020      	str	r0, [r4, #0]
 8001d10:	4629      	mov	r1, r5
 8001d12:	4630      	mov	r0, r6
 8001d14:	f000 f838 	bl	8001d88 <_sbrk_r>
 8001d18:	1c43      	adds	r3, r0, #1
 8001d1a:	d124      	bne.n	8001d66 <_malloc_r+0x92>
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	4630      	mov	r0, r6
 8001d20:	6033      	str	r3, [r6, #0]
 8001d22:	f000 f920 	bl	8001f66 <__malloc_unlock>
 8001d26:	e7e4      	b.n	8001cf2 <_malloc_r+0x1e>
 8001d28:	680b      	ldr	r3, [r1, #0]
 8001d2a:	1b5b      	subs	r3, r3, r5
 8001d2c:	d418      	bmi.n	8001d60 <_malloc_r+0x8c>
 8001d2e:	2b0b      	cmp	r3, #11
 8001d30:	d90f      	bls.n	8001d52 <_malloc_r+0x7e>
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	18cc      	adds	r4, r1, r3
 8001d36:	50cd      	str	r5, [r1, r3]
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f000 f914 	bl	8001f66 <__malloc_unlock>
 8001d3e:	f104 000b 	add.w	r0, r4, #11
 8001d42:	1d23      	adds	r3, r4, #4
 8001d44:	f020 0007 	bic.w	r0, r0, #7
 8001d48:	1ac3      	subs	r3, r0, r3
 8001d4a:	d0d3      	beq.n	8001cf4 <_malloc_r+0x20>
 8001d4c:	425a      	negs	r2, r3
 8001d4e:	50e2      	str	r2, [r4, r3]
 8001d50:	e7d0      	b.n	8001cf4 <_malloc_r+0x20>
 8001d52:	684b      	ldr	r3, [r1, #4]
 8001d54:	428c      	cmp	r4, r1
 8001d56:	bf16      	itet	ne
 8001d58:	6063      	strne	r3, [r4, #4]
 8001d5a:	6013      	streq	r3, [r2, #0]
 8001d5c:	460c      	movne	r4, r1
 8001d5e:	e7eb      	b.n	8001d38 <_malloc_r+0x64>
 8001d60:	460c      	mov	r4, r1
 8001d62:	6849      	ldr	r1, [r1, #4]
 8001d64:	e7cc      	b.n	8001d00 <_malloc_r+0x2c>
 8001d66:	1cc4      	adds	r4, r0, #3
 8001d68:	f024 0403 	bic.w	r4, r4, #3
 8001d6c:	42a0      	cmp	r0, r4
 8001d6e:	d005      	beq.n	8001d7c <_malloc_r+0xa8>
 8001d70:	1a21      	subs	r1, r4, r0
 8001d72:	4630      	mov	r0, r6
 8001d74:	f000 f808 	bl	8001d88 <_sbrk_r>
 8001d78:	3001      	adds	r0, #1
 8001d7a:	d0cf      	beq.n	8001d1c <_malloc_r+0x48>
 8001d7c:	6025      	str	r5, [r4, #0]
 8001d7e:	e7db      	b.n	8001d38 <_malloc_r+0x64>
 8001d80:	20000090 	.word	0x20000090
 8001d84:	20000094 	.word	0x20000094

08001d88 <_sbrk_r>:
 8001d88:	b538      	push	{r3, r4, r5, lr}
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	4c05      	ldr	r4, [pc, #20]	; (8001da4 <_sbrk_r+0x1c>)
 8001d8e:	4605      	mov	r5, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	6023      	str	r3, [r4, #0]
 8001d94:	f7ff f916 	bl	8000fc4 <_sbrk>
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	d102      	bne.n	8001da2 <_sbrk_r+0x1a>
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	b103      	cbz	r3, 8001da2 <_sbrk_r+0x1a>
 8001da0:	602b      	str	r3, [r5, #0]
 8001da2:	bd38      	pop	{r3, r4, r5, pc}
 8001da4:	2000009c 	.word	0x2000009c

08001da8 <_raise_r>:
 8001da8:	291f      	cmp	r1, #31
 8001daa:	b538      	push	{r3, r4, r5, lr}
 8001dac:	4604      	mov	r4, r0
 8001dae:	460d      	mov	r5, r1
 8001db0:	d904      	bls.n	8001dbc <_raise_r+0x14>
 8001db2:	2316      	movs	r3, #22
 8001db4:	6003      	str	r3, [r0, #0]
 8001db6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001dbe:	b112      	cbz	r2, 8001dc6 <_raise_r+0x1e>
 8001dc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001dc4:	b94b      	cbnz	r3, 8001dda <_raise_r+0x32>
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f000 f830 	bl	8001e2c <_getpid_r>
 8001dcc:	462a      	mov	r2, r5
 8001dce:	4601      	mov	r1, r0
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dd6:	f000 b817 	b.w	8001e08 <_kill_r>
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d00a      	beq.n	8001df4 <_raise_r+0x4c>
 8001dde:	1c59      	adds	r1, r3, #1
 8001de0:	d103      	bne.n	8001dea <_raise_r+0x42>
 8001de2:	2316      	movs	r3, #22
 8001de4:	6003      	str	r3, [r0, #0]
 8001de6:	2001      	movs	r0, #1
 8001de8:	e7e7      	b.n	8001dba <_raise_r+0x12>
 8001dea:	2400      	movs	r4, #0
 8001dec:	4628      	mov	r0, r5
 8001dee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001df2:	4798      	blx	r3
 8001df4:	2000      	movs	r0, #0
 8001df6:	e7e0      	b.n	8001dba <_raise_r+0x12>

08001df8 <raise>:
 8001df8:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <raise+0xc>)
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	f7ff bfd3 	b.w	8001da8 <_raise_r>
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008

08001e08 <_kill_r>:
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	4c06      	ldr	r4, [pc, #24]	; (8001e28 <_kill_r+0x20>)
 8001e0e:	4605      	mov	r5, r0
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	6023      	str	r3, [r4, #0]
 8001e16:	f7ff f852 	bl	8000ebe <_kill>
 8001e1a:	1c43      	adds	r3, r0, #1
 8001e1c:	d102      	bne.n	8001e24 <_kill_r+0x1c>
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	b103      	cbz	r3, 8001e24 <_kill_r+0x1c>
 8001e22:	602b      	str	r3, [r5, #0]
 8001e24:	bd38      	pop	{r3, r4, r5, pc}
 8001e26:	bf00      	nop
 8001e28:	2000009c 	.word	0x2000009c

08001e2c <_getpid_r>:
 8001e2c:	f7ff b840 	b.w	8000eb0 <_getpid>

08001e30 <__sread>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	460c      	mov	r4, r1
 8001e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e38:	f000 f896 	bl	8001f68 <_read_r>
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	bfab      	itete	ge
 8001e40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e42:	89a3      	ldrhlt	r3, [r4, #12]
 8001e44:	181b      	addge	r3, r3, r0
 8001e46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e4a:	bfac      	ite	ge
 8001e4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e4e:	81a3      	strhlt	r3, [r4, #12]
 8001e50:	bd10      	pop	{r4, pc}

08001e52 <__swrite>:
 8001e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e56:	461f      	mov	r7, r3
 8001e58:	898b      	ldrh	r3, [r1, #12]
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4616      	mov	r6, r2
 8001e62:	d505      	bpl.n	8001e70 <__swrite+0x1e>
 8001e64:	2302      	movs	r3, #2
 8001e66:	2200      	movs	r2, #0
 8001e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6c:	f000 f868 	bl	8001f40 <_lseek_r>
 8001e70:	89a3      	ldrh	r3, [r4, #12]
 8001e72:	4632      	mov	r2, r6
 8001e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e78:	81a3      	strh	r3, [r4, #12]
 8001e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e7e:	463b      	mov	r3, r7
 8001e80:	4628      	mov	r0, r5
 8001e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e86:	f000 b817 	b.w	8001eb8 <_write_r>

08001e8a <__sseek>:
 8001e8a:	b510      	push	{r4, lr}
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e92:	f000 f855 	bl	8001f40 <_lseek_r>
 8001e96:	1c43      	adds	r3, r0, #1
 8001e98:	89a3      	ldrh	r3, [r4, #12]
 8001e9a:	bf15      	itete	ne
 8001e9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ea6:	81a3      	strheq	r3, [r4, #12]
 8001ea8:	bf18      	it	ne
 8001eaa:	81a3      	strhne	r3, [r4, #12]
 8001eac:	bd10      	pop	{r4, pc}

08001eae <__sclose>:
 8001eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eb2:	f000 b813 	b.w	8001edc <_close_r>
	...

08001eb8 <_write_r>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4605      	mov	r5, r0
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4c05      	ldr	r4, [pc, #20]	; (8001ed8 <_write_r+0x20>)
 8001ec4:	6022      	str	r2, [r4, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f7ff f830 	bl	8000f2c <_write>
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	d102      	bne.n	8001ed6 <_write_r+0x1e>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	b103      	cbz	r3, 8001ed6 <_write_r+0x1e>
 8001ed4:	602b      	str	r3, [r5, #0]
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}
 8001ed8:	2000009c 	.word	0x2000009c

08001edc <_close_r>:
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	2300      	movs	r3, #0
 8001ee0:	4c05      	ldr	r4, [pc, #20]	; (8001ef8 <_close_r+0x1c>)
 8001ee2:	4605      	mov	r5, r0
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	6023      	str	r3, [r4, #0]
 8001ee8:	f7ff f83c 	bl	8000f64 <_close>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	d102      	bne.n	8001ef6 <_close_r+0x1a>
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	b103      	cbz	r3, 8001ef6 <_close_r+0x1a>
 8001ef4:	602b      	str	r3, [r5, #0]
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
 8001ef8:	2000009c 	.word	0x2000009c

08001efc <_fstat_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	2300      	movs	r3, #0
 8001f00:	4c06      	ldr	r4, [pc, #24]	; (8001f1c <_fstat_r+0x20>)
 8001f02:	4605      	mov	r5, r0
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	6023      	str	r3, [r4, #0]
 8001f0a:	f7ff f836 	bl	8000f7a <_fstat>
 8001f0e:	1c43      	adds	r3, r0, #1
 8001f10:	d102      	bne.n	8001f18 <_fstat_r+0x1c>
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	b103      	cbz	r3, 8001f18 <_fstat_r+0x1c>
 8001f16:	602b      	str	r3, [r5, #0]
 8001f18:	bd38      	pop	{r3, r4, r5, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000009c 	.word	0x2000009c

08001f20 <_isatty_r>:
 8001f20:	b538      	push	{r3, r4, r5, lr}
 8001f22:	2300      	movs	r3, #0
 8001f24:	4c05      	ldr	r4, [pc, #20]	; (8001f3c <_isatty_r+0x1c>)
 8001f26:	4605      	mov	r5, r0
 8001f28:	4608      	mov	r0, r1
 8001f2a:	6023      	str	r3, [r4, #0]
 8001f2c:	f7ff f834 	bl	8000f98 <_isatty>
 8001f30:	1c43      	adds	r3, r0, #1
 8001f32:	d102      	bne.n	8001f3a <_isatty_r+0x1a>
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	b103      	cbz	r3, 8001f3a <_isatty_r+0x1a>
 8001f38:	602b      	str	r3, [r5, #0]
 8001f3a:	bd38      	pop	{r3, r4, r5, pc}
 8001f3c:	2000009c 	.word	0x2000009c

08001f40 <_lseek_r>:
 8001f40:	b538      	push	{r3, r4, r5, lr}
 8001f42:	4605      	mov	r5, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4c05      	ldr	r4, [pc, #20]	; (8001f60 <_lseek_r+0x20>)
 8001f4c:	6022      	str	r2, [r4, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff f82c 	bl	8000fac <_lseek>
 8001f54:	1c43      	adds	r3, r0, #1
 8001f56:	d102      	bne.n	8001f5e <_lseek_r+0x1e>
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	b103      	cbz	r3, 8001f5e <_lseek_r+0x1e>
 8001f5c:	602b      	str	r3, [r5, #0]
 8001f5e:	bd38      	pop	{r3, r4, r5, pc}
 8001f60:	2000009c 	.word	0x2000009c

08001f64 <__malloc_lock>:
 8001f64:	4770      	bx	lr

08001f66 <__malloc_unlock>:
 8001f66:	4770      	bx	lr

08001f68 <_read_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4605      	mov	r5, r0
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	2200      	movs	r2, #0
 8001f72:	4c05      	ldr	r4, [pc, #20]	; (8001f88 <_read_r+0x20>)
 8001f74:	6022      	str	r2, [r4, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7fe ffbb 	bl	8000ef2 <_read>
 8001f7c:	1c43      	adds	r3, r0, #1
 8001f7e:	d102      	bne.n	8001f86 <_read_r+0x1e>
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	b103      	cbz	r3, 8001f86 <_read_r+0x1e>
 8001f84:	602b      	str	r3, [r5, #0]
 8001f86:	bd38      	pop	{r3, r4, r5, pc}
 8001f88:	2000009c 	.word	0x2000009c

08001f8c <_init>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr

08001f98 <_fini>:
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	bf00      	nop
 8001f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9e:	bc08      	pop	{r3}
 8001fa0:	469e      	mov	lr, r3
 8001fa2:	4770      	bx	lr
