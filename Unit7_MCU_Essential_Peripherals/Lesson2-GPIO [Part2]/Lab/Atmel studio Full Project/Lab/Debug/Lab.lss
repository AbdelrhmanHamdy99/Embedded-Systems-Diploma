
Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  0000047e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135e  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085d  00000000  00000000  000018d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000783  00000000  00000000  0000212f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  000028b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a9  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000762  00000000  00000000  00002f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000036d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main>
  8a:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyPad_Init>:
};*/

void keyPad_Init(){
	/*define keypad pins directions*/
	/*Rows as output*/
	SET_BIT(KeyPad_Rows_Dire,KeyPad_Row0);
  92:	a0 9a       	sbi	0x14, 0	; 20
	SET_BIT(KeyPad_Rows_Dire,KeyPad_Row1);
  94:	a1 9a       	sbi	0x14, 1	; 20
	SET_BIT(KeyPad_Rows_Dire,KeyPad_Row2);
  96:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(KeyPad_Rows_Dire,KeyPad_Row3);
  98:	a3 9a       	sbi	0x14, 3	; 20
	/*all Rows are high at initialization*/
	SET_BIT(KeyPad_Rows_Port,KeyPad_Row0);
  9a:	a8 9a       	sbi	0x15, 0	; 21
	SET_BIT(KeyPad_Rows_Port,KeyPad_Row1);
  9c:	a9 9a       	sbi	0x15, 1	; 21
	SET_BIT(KeyPad_Rows_Port,KeyPad_Row2);
  9e:	aa 9a       	sbi	0x15, 2	; 21
	SET_BIT(KeyPad_Rows_Port,KeyPad_Row3);
  a0:	ab 9a       	sbi	0x15, 3	; 21
	
	/*Columns as input*/
	RESET_BIT(KeyPad_Cols_Dire,KeyPad_Col0);
  a2:	a4 98       	cbi	0x14, 4	; 20
	RESET_BIT(KeyPad_Cols_Dire,KeyPad_Col1);
  a4:	a5 98       	cbi	0x14, 5	; 20
	RESET_BIT(KeyPad_Cols_Dire,KeyPad_Col2);
  a6:	a6 98       	cbi	0x14, 6	; 20
	RESET_BIT(KeyPad_Cols_Dire,KeyPad_Col3);
  a8:	a7 98       	cbi	0x14, 7	; 20
	/*activate pull-up resistor for Columns*/
	SET_BIT(KeyPad_Cols_PUR,KeyPad_Col0);
  aa:	ac 9a       	sbi	0x15, 4	; 21
	SET_BIT(KeyPad_Cols_PUR,KeyPad_Col1);
  ac:	ad 9a       	sbi	0x15, 5	; 21
	SET_BIT(KeyPad_Cols_PUR,KeyPad_Col2);
  ae:	ae 9a       	sbi	0x15, 6	; 21
	SET_BIT(KeyPad_Cols_PUR,KeyPad_Col3);
  b0:	af 9a       	sbi	0x15, 7	; 21
  b2:	08 95       	ret

000000b4 <KeyPad_GetKeyPressed>:
}
char KeyPad_GetKeyPressed(void){
  b4:	9f 92       	push	r9
  b6:	af 92       	push	r10
  b8:	bf 92       	push	r11
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	28 97       	sbiw	r28, 0x08	; 8
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
	unsigned char i,j;
	char KeyPad_cols[] = {KeyPad_Col0, KeyPad_Col1, KeyPad_Col2, KeyPad_Col3};
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	8a 83       	std	Y+2, r24	; 0x02
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	8b 83       	std	Y+3, r24	; 0x03
  e6:	87 e0       	ldi	r24, 0x07	; 7
  e8:	8c 83       	std	Y+4, r24	; 0x04
	char KeyPad_rows[] = {KeyPad_Row0, KeyPad_Row1, KeyPad_Row2, KeyPad_Row3};
  ea:	1d 82       	std	Y+5, r1	; 0x05
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8e 83       	std	Y+6, r24	; 0x06
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	8f 83       	std	Y+7, r24	; 0x07
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	88 87       	std	Y+8, r24	; 0x08
  f8:	de 01       	movw	r26, r28
  fa:	15 96       	adiw	r26, 0x05	; 5
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
	for(i = 0; i < n_Rows; i++){
		/*light up only one row at a time*/
		RESET_BIT(KeyPad_Rows_Port, KeyPad_rows[i]);
 100:	ee 24       	eor	r14, r14
 102:	e3 94       	inc	r14
 104:	f1 2c       	mov	r15, r1
 106:	95 b3       	in	r25, 0x15	; 21
 108:	5a 01       	movw	r10, r20
 10a:	6d 01       	movw	r12, r26
 10c:	97 01       	movw	r18, r14
 10e:	0c 90       	ld	r0, X
 110:	02 c0       	rjmp	.+4      	; 0x116 <KeyPad_GetKeyPressed+0x62>
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <KeyPad_GetKeyPressed+0x5e>
 11a:	82 2f       	mov	r24, r18
 11c:	80 95       	com	r24
 11e:	89 23       	and	r24, r25
 120:	85 bb       	out	0x15, r24	; 21
 122:	fe 01       	movw	r30, r28
 124:	31 96       	adiw	r30, 0x01	; 1
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
		
		for (j = 0; j < n_Cols; j++)
		{
			if(!READ_BIT(KeyPad_Cols_PinVal,KeyPad_cols[j])){
 12a:	83 b3       	in	r24, 0x13	; 19
 12c:	b9 01       	movw	r22, r18
 12e:	91 90       	ld	r9, Z+
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	09 2c       	mov	r0, r9
 134:	02 c0       	rjmp	.+4      	; 0x13a <KeyPad_GetKeyPressed+0x86>
 136:	95 95       	asr	r25
 138:	87 95       	ror	r24
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <KeyPad_GetKeyPressed+0x82>
 13e:	80 fd       	sbrc	r24, 0
 140:	37 c0       	rjmp	.+110    	; 0x1b0 <KeyPad_GetKeyPressed+0xfc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	87 e8       	ldi	r24, 0x87	; 135
 144:	93 e1       	ldi	r25, 0x13	; 19
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <KeyPad_GetKeyPressed+0x92>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <KeyPad_GetKeyPressed+0x98>
 14c:	00 00       	nop
				/*avoid debouncing and long press*/
				_delay_ms(20);
				if(!READ_BIT(KeyPad_Cols_PinVal,KeyPad_cols[j])){
 14e:	83 b3       	in	r24, 0x13	; 19
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	09 2c       	mov	r0, r9
 154:	02 c0       	rjmp	.+4      	; 0x15a <KeyPad_GetKeyPressed+0xa6>
 156:	95 95       	asr	r25
 158:	87 95       	ror	r24
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <KeyPad_GetKeyPressed+0xa2>
 15e:	80 fd       	sbrc	r24, 0
 160:	27 c0       	rjmp	.+78     	; 0x1b0 <KeyPad_GetKeyPressed+0xfc>
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <KeyPad_GetKeyPressed+0xb8>
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	9a 94       	dec	r9
 16e:	e2 f7       	brpl	.-8      	; 0x168 <KeyPad_GetKeyPressed+0xb4>
					while(!READ_BIT(KeyPad_Cols_PinVal,KeyPad_cols[j]));
 170:	83 b3       	in	r24, 0x13	; 19
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	82 23       	and	r24, r18
 176:	93 23       	and	r25, r19
 178:	89 2b       	or	r24, r25
 17a:	d1 f3       	breq	.-12     	; 0x170 <KeyPad_GetKeyPressed+0xbc>
					SET_BIT(KeyPad_Rows_Port, KeyPad_rows[i]);
 17c:	25 b3       	in	r18, 0x15	; 21
 17e:	fe 01       	movw	r30, r28
 180:	ea 0d       	add	r30, r10
 182:	fb 1d       	adc	r31, r11
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	05 80       	ldd	r0, Z+5	; 0x05
 18a:	02 c0       	rjmp	.+4      	; 0x190 <KeyPad_GetKeyPressed+0xdc>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <KeyPad_GetKeyPressed+0xd8>
 194:	82 2b       	or	r24, r18
 196:	85 bb       	out	0x15, r24	; 21
					return KeyPad_Character_Matrix[i][j];
 198:	c5 01       	movw	r24, r10
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	80 5a       	subi	r24, 0xA0	; 160
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	fc 01       	movw	r30, r24
 1a8:	e6 0f       	add	r30, r22
 1aa:	f7 1f       	adc	r31, r23
 1ac:	80 81       	ld	r24, Z
 1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <KeyPad_GetKeyPressed+0x12e>
 1b0:	2f 5f       	subi	r18, 0xFF	; 255
 1b2:	3f 4f       	sbci	r19, 0xFF	; 255
	char KeyPad_rows[] = {KeyPad_Row0, KeyPad_Row1, KeyPad_Row2, KeyPad_Row3};
	for(i = 0; i < n_Rows; i++){
		/*light up only one row at a time*/
		RESET_BIT(KeyPad_Rows_Port, KeyPad_rows[i]);
		
		for (j = 0; j < n_Cols; j++)
 1b4:	24 30       	cpi	r18, 0x04	; 4
 1b6:	31 05       	cpc	r19, r1
 1b8:	09 f0       	breq	.+2      	; 0x1bc <KeyPad_GetKeyPressed+0x108>
 1ba:	b7 cf       	rjmp	.-146    	; 0x12a <KeyPad_GetKeyPressed+0x76>
					SET_BIT(KeyPad_Rows_Port, KeyPad_rows[i]);
					return KeyPad_Character_Matrix[i][j];
				}
			}
		}
		SET_BIT(KeyPad_Rows_Port, KeyPad_rows[i]);
 1bc:	25 b3       	in	r18, 0x15	; 21
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	c7 01       	movw	r24, r14
 1c2:	f6 01       	movw	r30, r12
 1c4:	00 80       	ld	r0, Z
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <KeyPad_GetKeyPressed+0x118>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <KeyPad_GetKeyPressed+0x114>
 1d0:	82 2b       	or	r24, r18
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	4f 5f       	subi	r20, 0xFF	; 255
 1d6:	5f 4f       	sbci	r21, 0xFF	; 255
}
char KeyPad_GetKeyPressed(void){
	unsigned char i,j;
	char KeyPad_cols[] = {KeyPad_Col0, KeyPad_Col1, KeyPad_Col2, KeyPad_Col3};
	char KeyPad_rows[] = {KeyPad_Row0, KeyPad_Row1, KeyPad_Row2, KeyPad_Row3};
	for(i = 0; i < n_Rows; i++){
 1d8:	44 30       	cpi	r20, 0x04	; 4
 1da:	51 05       	cpc	r21, r1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <KeyPad_GetKeyPressed+0x12c>
 1de:	93 cf       	rjmp	.-218    	; 0x106 <KeyPad_GetKeyPressed+0x52>
				}
			}
		}
		SET_BIT(KeyPad_Rows_Port, KeyPad_rows[i]);
	}
	return 0; /*null character*/
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	28 96       	adiw	r28, 0x08	; 8
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	df 90       	pop	r13
 1fc:	cf 90       	pop	r12
 1fe:	bf 90       	pop	r11
 200:	af 90       	pop	r10
 202:	9f 90       	pop	r9
 204:	08 95       	ret

00000206 <LCD_Busy>:
	/*Change direction of data bins to be input*/
	#if defined(LCD_8_Bit)
		LCD_Data_Direction = 0; /*input*/
		LCD_Data_Port = 0; /*floating (Tri-Z)*/
	#else
		WRITE_NIBBLE(LCD_Data_Direction,0,nibble_start_position); /*input*/
 206:	8a b3       	in	r24, 0x1a	; 26
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	8a bb       	out	0x1a, r24	; 26
 20c:	8a b3       	in	r24, 0x1a	; 26
 20e:	8a bb       	out	0x1a, r24	; 26
		WRITE_NIBBLE(LCD_Data_Port,0,nibble_start_position); /*floating*/
 210:	8b b3       	in	r24, 0x1b	; 27
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	8b bb       	out	0x1b, r24	; 27
 216:	8b b3       	in	r24, 0x1b	; 27
 218:	8b bb       	out	0x1b, r24	; 27
	#endif
	
	RESET_BIT(LCD_Control_Port,RS); /*Instruction*/
 21a:	c1 98       	cbi	0x18, 1	; 24
	SET_BIT(LCD_Control_Port,RW); /*read*/
 21c:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	00 00       	nop
	
	_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
	SET_BIT(LCD_Control_Port,E); /*Enable the LCD*/
 220:	c3 9a       	sbi	0x18, 3	; 24
 222:	00 00       	nop
	_delay_us(0.2); /*tDDR (wait until data is ready) = 200ns (min = 160ns)*/
	busy = READ_BIT(LCD_Data_PinVal, DB7); /*read busy flag*/
 224:	89 b3       	in	r24, 0x19	; 25
 226:	00 00       	nop
	_delay_us(0.2); /*TCYCE / 2 = 200 + 200 = 400ns (min = 250ns)*/
	RESET_BIT(LCD_Control_Port,E); /*Disable the LCD*/
 228:	c3 98       	cbi	0x18, 3	; 24
 22a:	00 00       	nop
	_delay_us(0.4); /*TCYCE/2 = 400ns (min = 250ns)*/
	#if defined(LCD_4_Bit)	
	/*read the lower nibble of the address*/
	SET_BIT(LCD_Control_Port,E); /*Enable the LCD*/
 22c:	c3 9a       	sbi	0x18, 3	; 24
 22e:	00 00       	nop
 230:	00 00       	nop
	_delay_us(0.2); /*tDDR (wait until data is ready) = 200ns (min = 160ns)*/
	/*****read lower nibble here*****/
	_delay_us(0.2); /*TCYCE / 2 = 200 + 200 = 400ns (min = 250ns)*/
	RESET_BIT(LCD_Control_Port,E); /*Disable the LCD*/
 232:	c3 98       	cbi	0x18, 3	; 24
 234:	00 00       	nop
	_delay_us(0.4); /*TCYCE/2 = 400ns (min = 250ns)*/
	#endif
	
	return busy;
 236:	88 1f       	adc	r24, r24
 238:	88 27       	eor	r24, r24
 23a:	88 1f       	adc	r24, r24
 23c:	08 95       	ret

0000023e <LCD_Write_Command>:
void LCD_Write_Data(char* input){
	while(*input){
		LCD_SendCharacter(*(input++));
	}
}
void LCD_Write_Command(char command){
 23e:	cf 93       	push	r28
 240:	c8 2f       	mov	r28, r24
	while(LCD_Busy()); /*wait until LCD finishes internal operation*/
 242:	0e 94 03 01 	call	0x206	; 0x206 <LCD_Busy>
 246:	81 11       	cpse	r24, r1
 248:	fc cf       	rjmp	.-8      	; 0x242 <LCD_Write_Command+0x4>
		SET_BIT(LCD_Data_Direction, DB0);
		SET_BIT(LCD_Data_Direction, DB1);
		SET_BIT(LCD_Data_Direction, DB2);
		SET_BIT(LCD_Data_Direction, DB3);
	#endif
	SET_BIT(LCD_Data_Direction, DB4);
 24a:	d4 9a       	sbi	0x1a, 4	; 26
	SET_BIT(LCD_Data_Direction, DB5);
 24c:	d5 9a       	sbi	0x1a, 5	; 26
	SET_BIT(LCD_Data_Direction, DB6);
 24e:	d6 9a       	sbi	0x1a, 6	; 26
	SET_BIT(LCD_Data_Direction, DB7);
 250:	d7 9a       	sbi	0x1a, 7	; 26
	
	RESET_BIT(LCD_Control_Port,RS); /*Instruction*/
 252:	c1 98       	cbi	0x18, 1	; 24
	RESET_BIT(LCD_Control_Port,RW); /*Write*/
 254:	c2 98       	cbi	0x18, 2	; 24
	#if defined(LCD_8_Bit)		
		LCD_Data_Port = command;
	#endif
	#ifdef LCD_4_Bit
	    /*send higher order nibble first*/
		WRITE_NIBBLE(LCD_Data_Port,((command>>4) & 0xF),nibble_start_position);
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	8b bb       	out	0x1b, r24	; 27
 25c:	8b b3       	in	r24, 0x1b	; 27
 25e:	9c 2f       	mov	r25, r28
 260:	90 7f       	andi	r25, 0xF0	; 240
 262:	89 2b       	or	r24, r25
 264:	8b bb       	out	0x1b, r24	; 27
 266:	00 00       	nop
		_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
		SET_BIT(LCD_Control_Port,E); /*Enable the LCD*/
 268:	c3 9a       	sbi	0x18, 3	; 24
 26a:	00 00       	nop
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		RESET_BIT(LCD_Control_Port,E); /*Disable the LCD*/
 26c:	c3 98       	cbi	0x18, 3	; 24
 26e:	00 00       	nop
		_delay_us(0.02); /*TH = 20ns (min = 10ns)*/
		/*send lower nibble*/
		WRITE_NIBBLE(LCD_Data_Port,(command & 0xF),nibble_start_position);
 270:	8b b3       	in	r24, 0x1b	; 27
 272:	8f 70       	andi	r24, 0x0F	; 15
 274:	8b bb       	out	0x1b, r24	; 27
 276:	2b b3       	in	r18, 0x1b	; 27
 278:	30 e1       	ldi	r19, 0x10	; 16
 27a:	c3 9f       	mul	r28, r19
 27c:	c0 01       	movw	r24, r0
 27e:	11 24       	eor	r1, r1
 280:	82 2b       	or	r24, r18
 282:	8b bb       	out	0x1b, r24	; 27
 284:	00 00       	nop
 286:	00 00       	nop
		_delay_us(0.3); /*TCYCE/2 = 300ns (min = 250ns)*/
	#endif
	_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
	SET_BIT(LCD_Control_Port,E); /*Enable the LCD*/
 288:	c3 9a       	sbi	0x18, 3	; 24
 28a:	00 00       	nop
	_delay_us(0.3); /*TCYCE / 2 = 300ns (min) = 250ns*/
	RESET_BIT(LCD_Control_Port,E); /*Disable the LCD*/
 28c:	c3 98       	cbi	0x18, 3	; 24
 28e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	83 ef       	ldi	r24, 0xF3	; 243
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_Write_Command+0x56>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_Write_Command+0x5c>
 29a:	00 00       	nop
	_delay_us(0.3); /*TCYCE/2 = 300ns (min = 250ns)*/
	_delay_ms(2); /*wait 2ms before performing any other command*/
	
	/*update the counter if the command was change cursor position*/
	if(command >= F00){
 29c:	cc 23       	and	r28, r28
 29e:	4c f4       	brge	.+18     	; 0x2b2 <LCD_Write_Command+0x74>
		if(command < S00){
 2a0:	c0 3c       	cpi	r28, 0xC0	; 192
 2a2:	18 f4       	brcc	.+6      	; 0x2aa <LCD_Write_Command+0x6c>
			counter = command - 0xF00;
 2a4:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__data_end>
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <LCD_Write_Command+0x7c>
		}else{
			counter = 17 + (command - S00);
 2aa:	cf 5a       	subi	r28, 0xAF	; 175
 2ac:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__data_end>
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <LCD_Write_Command+0x7c>
		}
	}else if(command == LCD_Return_Home){
 2b2:	c2 30       	cpi	r28, 0x02	; 2
 2b4:	11 f4       	brne	.+4      	; 0x2ba <LCD_Write_Command+0x7c>
		counter = 0;
 2b6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
	}
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <LCD_Init>:


void LCD_Init(void){
	/*initialize directions for LCD pins*/
	/*Control pins as output*/
	SET_BIT(LCD_Control_Direction,RS);
 2be:	b9 9a       	sbi	0x17, 1	; 23
	SET_BIT(LCD_Control_Direction,RW);
 2c0:	ba 9a       	sbi	0x17, 2	; 23
	SET_BIT(LCD_Control_Direction,E);
 2c2:	bb 9a       	sbi	0x17, 3	; 23
	
	/*disable LCD*/
	RESET_BIT(LCD_Control_Port,E);
 2c4:	c3 98       	cbi	0x18, 3	; 24
 2c6:	87 e8       	ldi	r24, 0x87	; 135
 2c8:	93 e1       	ldi	r25, 0x13	; 19
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_Init+0xc>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_Init+0x12>
 2d0:	00 00       	nop
	_delay_ms(20); /*waiting until automatic initialization finishes*/
	
	#if defined(LCD_8_Bit)
	Function_Set = eight_bit_2line_5x8;
	#elif defined(LCD_4_Bit)
	Function_Set = four_bit_2line_5x8;
 2d2:	88 e2       	ldi	r24, 0x28	; 40
 2d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Function_Set>
	
	/*Sets the LCD to 4-bit operation*/
	/* only this instruction completes with one write.*/
	WRITE_NIBBLE(LCD_Data_Port,((Function_Set>>4) & 0xF),nibble_start_position);
 2d8:	8b b3       	in	r24, 0x1b	; 27
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	9b b3       	in	r25, 0x1b	; 27
 2e0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Function_Set>
 2e4:	80 7f       	andi	r24, 0xF0	; 240
 2e6:	89 2b       	or	r24, r25
 2e8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	00 00       	nop
	_delay_us(0.05); /*TAS = 50ns (min= 40ns)*/
	SET_BIT(LCD_Control_Port,E); /*Enable the LCD*/
 2ec:	c3 9a       	sbi	0x18, 3	; 24
 2ee:	00 00       	nop
	_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
	RESET_BIT(LCD_Control_Port,E); /*Disable the LCD*/
 2f0:	c3 98       	cbi	0x18, 3	; 24
 2f2:	00 00       	nop
	#define LCD_8_Bit
	Function_Set = eight_bit_2line_5x8;
	# warning "LCD System not defined"
	#endif
	
	Display_Control = Display_on | Cursor_on | Blinking;
 2f4:	8f e0       	ldi	r24, 0x0F	; 15
 2f6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Display_Control>
	entryMode = Increment_No_Shift;/*increment the address by one and shift the cursor to the right 
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <entryMode>
	                                at the time of write to the DD/CGRAM.*/
	
	LCD_Write_Command(Function_Set);
 300:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Function_Set>
 304:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
	LCD_Write_Command(entryMode); 
 308:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <entryMode>
 30c:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
	LCD_Write_Command(Display_Control); 
 310:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Display_Control>
 314:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
	LCD_Write_Command(LCD_Clear);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
	LCD_Write_Command(LCD_Return_Home);
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
 324:	08 95       	ret

00000326 <LCD_SendCharacter>:
		}
	}else if(command == LCD_Return_Home){
		counter = 0;
	}
}
void LCD_SendCharacter(char c){
 326:	cf 93       	push	r28
 328:	c8 2f       	mov	r28, r24
	while(LCD_Busy()); /*wait until LCD finishes internal operation*/
 32a:	0e 94 03 01 	call	0x206	; 0x206 <LCD_Busy>
 32e:	81 11       	cpse	r24, r1
 330:	fc cf       	rjmp	.-8      	; 0x32a <LCD_SendCharacter+0x4>
	
	if(counter++ == LCD_Line_Length){ /*end of 1st line*/
 332:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	98 0f       	add	r25, r24
 33a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__data_end>
 33e:	80 31       	cpi	r24, 0x10	; 16
 340:	31 f4       	brne	.+12     	; 0x34e <LCD_SendCharacter+0x28>
		DDRAM_Address = S00;
 342:	80 ec       	ldi	r24, 0xC0	; 192
 344:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <DDRAM_Address>
		LCD_Write_Command(DDRAM_Address);
 348:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
 34c:	0a c0       	rjmp	.+20     	; 0x362 <LCD_SendCharacter+0x3c>
	}else if(counter > LCD_Line_Length * 2){ /*end of 2nd line*/
 34e:	91 32       	cpi	r25, 0x21	; 33
 350:	40 f0       	brcs	.+16     	; 0x362 <LCD_SendCharacter+0x3c>
		/*Clear Screen*/
		LCD_Write_Command(LCD_Clear);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
		LCD_Write_Command(LCD_Return_Home);
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
		counter =0;
 35e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
	}
	/*Change direction of data bins to be output*/
	#ifdef LCD_8_Bit
		LCD_Data_Direction = 0Xff;
	#else
		WRITE_NIBBLE(LCD_Data_Direction,0Xf,nibble_start_position);
 362:	8a b3       	in	r24, 0x1a	; 26
 364:	8f 70       	andi	r24, 0x0F	; 15
 366:	8a bb       	out	0x1a, r24	; 26
 368:	8a b3       	in	r24, 0x1a	; 26
 36a:	80 6f       	ori	r24, 0xF0	; 240
 36c:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	SET_BIT(LCD_Control_Port,RS); /*data*/
 36e:	c1 9a       	sbi	0x18, 1	; 24
	RESET_BIT(PORTB,RW); /*Write*/
 370:	c2 98       	cbi	0x18, 2	; 24
	
	#ifdef LCD_8_Bit
		LCD_Data_Port = c;
	#else
	    /*send the higher nibble*/
		WRITE_NIBBLE(LCD_Data_Port,((c>>4) & 0xF),nibble_start_position);
 372:	8b b3       	in	r24, 0x1b	; 27
 374:	8f 70       	andi	r24, 0x0F	; 15
 376:	8b bb       	out	0x1b, r24	; 27
 378:	8b b3       	in	r24, 0x1b	; 27
 37a:	9c 2f       	mov	r25, r28
 37c:	90 7f       	andi	r25, 0xF0	; 240
 37e:	89 2b       	or	r24, r25
 380:	8b bb       	out	0x1b, r24	; 27
 382:	00 00       	nop
		_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
		SET_BIT(LCD_Control_Port,E); /*Enable the LCD*/
 384:	c3 9a       	sbi	0x18, 3	; 24
 386:	00 00       	nop
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		RESET_BIT(LCD_Control_Port,E); /*Disable the LCD*/
 388:	c3 98       	cbi	0x18, 3	; 24
 38a:	00 00       	nop
		_delay_us(0.3); /*TCYCE/2 = 300ns (min = 250ns)*/
		/*send the lower nibble*/
		WRITE_NIBBLE(LCD_Data_Port,(c & 0xF),nibble_start_position);
 38c:	8b b3       	in	r24, 0x1b	; 27
 38e:	8f 70       	andi	r24, 0x0F	; 15
 390:	8b bb       	out	0x1b, r24	; 27
 392:	2b b3       	in	r18, 0x1b	; 27
 394:	30 e1       	ldi	r19, 0x10	; 16
 396:	c3 9f       	mul	r28, r19
 398:	c0 01       	movw	r24, r0
 39a:	11 24       	eor	r1, r1
 39c:	82 2b       	or	r24, r18
 39e:	8b bb       	out	0x1b, r24	; 27
 3a0:	00 00       	nop
	#endif
	_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
	SET_BIT(LCD_Control_Port,E); /*Enable the LCD*/
 3a2:	c3 9a       	sbi	0x18, 3	; 24
 3a4:	00 00       	nop
	_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
	RESET_BIT(LCD_Control_Port,E); /*Disable the LCD*/
 3a6:	c3 98       	cbi	0x18, 3	; 24
 3a8:	00 00       	nop
	_delay_us(0.3); /*TCYCE/2 = 300ns (min = 250ns)*/
}
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <main>:
#include "GPIO.h"
#include "KeyPad.h"

int main(void)
{
	LCD_Init();
 3ae:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Init>
	keyPad_Init();
 3b2:	0e 94 49 00 	call	0x92	; 0x92 <keyPad_Init>
    while (1) 
    {	
		char c = KeyPad_GetKeyPressed();
 3b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <KeyPad_GetKeyPressed>
		if(c == ' '){
 3ba:	80 32       	cpi	r24, 0x20	; 32
 3bc:	39 f4       	brne	.+14     	; 0x3cc <main+0x1e>
			/*Clear Screen*/
			LCD_Write_Command(LCD_Clear);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
			LCD_Write_Command(LCD_Return_Home);
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_Write_Command>
 3ca:	f5 cf       	rjmp	.-22     	; 0x3b6 <main+0x8>
		}else if(c == 0){
 3cc:	88 23       	and	r24, r24
 3ce:	99 f3       	breq	.-26     	; 0x3b6 <main+0x8>
			/*do nothing no character is pressed*/
		}else{
			LCD_SendCharacter(c);
 3d0:	0e 94 93 01 	call	0x326	; 0x326 <LCD_SendCharacter>
 3d4:	f0 cf       	rjmp	.-32     	; 0x3b6 <main+0x8>

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
