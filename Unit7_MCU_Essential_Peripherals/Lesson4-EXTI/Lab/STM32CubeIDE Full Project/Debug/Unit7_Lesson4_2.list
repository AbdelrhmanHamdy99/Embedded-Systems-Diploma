
Unit7_Lesson4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ac  080029ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080029ac  080029ac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029ac  080029ac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080029b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000064  08002a18  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002a18  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031df  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a3b  00000000  00000000  0002326c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ff8  00000000  00000000  00023ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000270  00000000  00000000  00024ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f8  00000000  00000000  00024f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003019  00000000  00000000  00025108  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002b28  00000000  00000000  00028121  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ad2b  00000000  00000000  0002ac49  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00035974  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001098  00000000  00000000  000359f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	080025cc 	.word	0x080025cc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	080025cc 	.word	0x080025cc

08000170 <LCD_Init>:
 * @Notes		- False Configuration is handled by assigning default values
 * 				  default LCDconfig->function_set = Function_Set_8bit_2line_5x8
 * 				  default LCDconfig->Display_control = Display_Control_D_On_C_On_B_On
 * 				  default LCDconfig->Entry_mode = Entry_Mode_Inc_No_S
 */
void LCD_Init(LCD_Config_t* LCDconfig){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig; /*a structure to hold configurations of pins*/
	/*initialize directions for LCD pins*/
	/*enable clock for LCD Ports*/
	switch ((uint32_t)LCD_Control_Port) {
	case (uint32_t)GPIOA:
			GPIOA_Clock_Enable;
 8000178:	4b86      	ldr	r3, [pc, #536]	; (8000394 <LCD_Init+0x224>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a85      	ldr	r2, [pc, #532]	; (8000394 <LCD_Init+0x224>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
	break;
 8000184:	bf00      	nop
	switch ((uint32_t)LCD_Data_Port) {
	case (uint32_t)GPIOA:
			GPIOA_Clock_Enable;
	break;
	case (uint32_t)GPIOB:
			GPIOB_Clock_Enable;
 8000186:	4b83      	ldr	r3, [pc, #524]	; (8000394 <LCD_Init+0x224>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	4a82      	ldr	r2, [pc, #520]	; (8000394 <LCD_Init+0x224>)
 800018c:	f043 0308 	orr.w	r3, r3, #8
 8000190:	6193      	str	r3, [r2, #24]
	break;
 8000192:	bf00      	nop
	break;
	default:
		break;
	}
	/*Control pins as output*/
	PinConfig.pinMode     = GPIO_PIN_MODE_Out_PushPull;
 8000194:	2300      	movs	r3, #0
 8000196:	737b      	strb	r3, [r7, #13]
	PinConfig.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 8000198:	2301      	movs	r3, #1
 800019a:	73bb      	strb	r3, [r7, #14]
	/*RS*/
	PinConfig.pinNumber   = RS;
 800019c:	230a      	movs	r3, #10
 800019e:	733b      	strb	r3, [r7, #12]
	MCAL_GPIO_Init(LCD_Control_Port, &PinConfig);
 80001a0:	f107 030c 	add.w	r3, r7, #12
 80001a4:	4619      	mov	r1, r3
 80001a6:	487c      	ldr	r0, [pc, #496]	; (8000398 <LCD_Init+0x228>)
 80001a8:	f001 f84e 	bl	8001248 <MCAL_GPIO_Init>
	/*RW*/
	PinConfig.pinNumber   = RW;
 80001ac:	2309      	movs	r3, #9
 80001ae:	733b      	strb	r3, [r7, #12]
	MCAL_GPIO_Init(LCD_Control_Port, &PinConfig);
 80001b0:	f107 030c 	add.w	r3, r7, #12
 80001b4:	4619      	mov	r1, r3
 80001b6:	4878      	ldr	r0, [pc, #480]	; (8000398 <LCD_Init+0x228>)
 80001b8:	f001 f846 	bl	8001248 <MCAL_GPIO_Init>
	/*E*/
	PinConfig.pinNumber   = E;
 80001bc:	2308      	movs	r3, #8
 80001be:	733b      	strb	r3, [r7, #12]
	MCAL_GPIO_Init(LCD_Control_Port, &PinConfig);
 80001c0:	f107 030c 	add.w	r3, r7, #12
 80001c4:	4619      	mov	r1, r3
 80001c6:	4874      	ldr	r0, [pc, #464]	; (8000398 <LCD_Init+0x228>)
 80001c8:	f001 f83e 	bl	8001248 <MCAL_GPIO_Init>


	/*disable LCD*/
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2108      	movs	r1, #8
 80001d0:	4871      	ldr	r0, [pc, #452]	; (8000398 <LCD_Init+0x228>)
 80001d2:	f001 f91d 	bl	8001410 <MCAL_GPIO_WritePin>
	_delay_ms(20); /*waiting until automatic initialization finishes*/
 80001d6:	2014      	movs	r0, #20
 80001d8:	f000 faa8 	bl	800072c <_delay_ms>

	switch(LCDconfig->function_set){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	3b20      	subs	r3, #32
 80001e2:	2b18      	cmp	r3, #24
 80001e4:	f200 809d 	bhi.w	8000322 <LCD_Init+0x1b2>
 80001e8:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <LCD_Init+0x80>)
 80001ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ee:	bf00      	nop
 80001f0:	08000255 	.word	0x08000255
 80001f4:	08000323 	.word	0x08000323
 80001f8:	08000323 	.word	0x08000323
 80001fc:	08000323 	.word	0x08000323
 8000200:	08000255 	.word	0x08000255
 8000204:	08000323 	.word	0x08000323
 8000208:	08000323 	.word	0x08000323
 800020c:	08000323 	.word	0x08000323
 8000210:	08000255 	.word	0x08000255
 8000214:	08000323 	.word	0x08000323
 8000218:	08000323 	.word	0x08000323
 800021c:	08000323 	.word	0x08000323
 8000220:	08000323 	.word	0x08000323
 8000224:	08000323 	.word	0x08000323
 8000228:	08000323 	.word	0x08000323
 800022c:	08000323 	.word	0x08000323
 8000230:	0800031b 	.word	0x0800031b
 8000234:	08000323 	.word	0x08000323
 8000238:	08000323 	.word	0x08000323
 800023c:	08000323 	.word	0x08000323
 8000240:	0800031b 	.word	0x0800031b
 8000244:	08000323 	.word	0x08000323
 8000248:	08000323 	.word	0x08000323
 800024c:	08000323 	.word	0x08000323
 8000250:	0800031b 	.word	0x0800031b
	case Function_Set_4bit_1line_5x8  :
	case Function_Set_4bit_1line_5x10 :
	case Function_Set_4bit_2line_5x8  :
		LCD_Interface = LCD_4_bit; /*set the LCD interface*/
 8000254:	4b51      	ldr	r3, [pc, #324]	; (800039c <LCD_Init+0x22c>)
 8000256:	2204      	movs	r2, #4
 8000258:	701a      	strb	r2, [r3, #0]
		/*Sets the LCD to 4-bit operation*/
		/*1. Configure LCD High pins as output*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 800025a:	2307      	movs	r3, #7
 800025c:	73fb      	strb	r3, [r7, #15]
 800025e:	e010      	b.n	8000282 <LCD_Init+0x112>
			PinConfig.pinNumber   = LCD_DataPins[i];
 8000260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000264:	4a4e      	ldr	r2, [pc, #312]	; (80003a0 <LCD_Init+0x230>)
 8000266:	5cd3      	ldrb	r3, [r2, r3]
 8000268:	733b      	strb	r3, [r7, #12]
			MCAL_GPIO_Init(LCD_Data_Port, &PinConfig);
 800026a:	f107 030c 	add.w	r3, r7, #12
 800026e:	4619      	mov	r1, r3
 8000270:	484c      	ldr	r0, [pc, #304]	; (80003a4 <LCD_Init+0x234>)
 8000272:	f000 ffe9 	bl	8001248 <MCAL_GPIO_Init>
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	3b01      	subs	r3, #1
 800027e:	b2db      	uxtb	r3, r3
 8000280:	73fb      	strb	r3, [r7, #15]
 8000282:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000286:	4b45      	ldr	r3, [pc, #276]	; (800039c <LCD_Init+0x22c>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	f1c3 0308 	rsb	r3, r3, #8
 800028e:	429a      	cmp	r2, r3
 8000290:	dae6      	bge.n	8000260 <LCD_Init+0xf0>
		}
		/*2. then send the command*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000292:	2307      	movs	r3, #7
 8000294:	73fb      	strb	r3, [r7, #15]
 8000296:	e018      	b.n	80002ca <LCD_Init+0x15a>
			MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (LCDconfig->function_set >> i) &1);
 8000298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800029c:	4a40      	ldr	r2, [pc, #256]	; (80003a0 <LCD_Init+0x230>)
 800029e:	5cd1      	ldrb	r1, [r2, r3]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002aa:	fa42 f303 	asr.w	r3, r2, r3
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	461a      	mov	r2, r3
 80002b8:	483a      	ldr	r0, [pc, #232]	; (80003a4 <LCD_Init+0x234>)
 80002ba:	f001 f8a9 	bl	8001410 <MCAL_GPIO_WritePin>
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80002be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	3b01      	subs	r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	73fb      	strb	r3, [r7, #15]
 80002ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80002ce:	4b33      	ldr	r3, [pc, #204]	; (800039c <LCD_Init+0x22c>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	f1c3 0308 	rsb	r3, r3, #8
 80002d6:	429a      	cmp	r2, r3
 80002d8:	dade      	bge.n	8000298 <LCD_Init+0x128>
		}

		MCAL_GPIO_WritePin(LCD_Control_Port, RS, GPIO_PIN_Value_Low);/*Instruction*/
 80002da:	2200      	movs	r2, #0
 80002dc:	210a      	movs	r1, #10
 80002de:	482e      	ldr	r0, [pc, #184]	; (8000398 <LCD_Init+0x228>)
 80002e0:	f001 f896 	bl	8001410 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_Control_Port, RW, GPIO_PIN_Value_Low);/*Write*/
 80002e4:	2200      	movs	r2, #0
 80002e6:	2109      	movs	r1, #9
 80002e8:	482b      	ldr	r0, [pc, #172]	; (8000398 <LCD_Init+0x228>)
 80002ea:	f001 f891 	bl	8001410 <MCAL_GPIO_WritePin>

		_delay_ns(40); /*TAS = 50ns (min= 40ns)*/
 80002ee:	2028      	movs	r0, #40	; 0x28
 80002f0:	f000 fa36 	bl	8000760 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 80002f4:	2201      	movs	r2, #1
 80002f6:	2108      	movs	r1, #8
 80002f8:	4827      	ldr	r0, [pc, #156]	; (8000398 <LCD_Init+0x228>)
 80002fa:	f001 f889 	bl	8001410 <MCAL_GPIO_WritePin>
		_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 80002fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000302:	f000 fa2d 	bl	8000760 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000306:	2200      	movs	r2, #0
 8000308:	2108      	movs	r1, #8
 800030a:	4823      	ldr	r0, [pc, #140]	; (8000398 <LCD_Init+0x228>)
 800030c:	f001 f880 	bl	8001410 <MCAL_GPIO_WritePin>
		_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 8000310:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000314:	f000 fa24 	bl	8000760 <_delay_ns>
		/*only this instruction completes with one write.*/
		break;
 8000318:	e00a      	b.n	8000330 <LCD_Init+0x1c0>
	case Function_Set_8bit_1line_5x8 :
	case Function_Set_8bit_1line_5x10:
	case Function_Set_8bit_2line_5x8 :
		LCD_Interface = LCD_8_bit;
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <LCD_Init+0x22c>)
 800031c:	2208      	movs	r2, #8
 800031e:	701a      	strb	r2, [r3, #0]
		break;
 8000320:	e006      	b.n	8000330 <LCD_Init+0x1c0>
	default:
		LCD_Interface = LCD_8_bit;
 8000322:	4b1e      	ldr	r3, [pc, #120]	; (800039c <LCD_Init+0x22c>)
 8000324:	2208      	movs	r2, #8
 8000326:	701a      	strb	r2, [r3, #0]
		LCDconfig->function_set = Function_Set_8bit_2line_5x8;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2238      	movs	r2, #56	; 0x38
 800032c:	701a      	strb	r2, [r3, #0]
		break;
 800032e:	bf00      	nop
	}
	switch (LCDconfig->Display_control) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	785b      	ldrb	r3, [r3, #1]
 8000334:	2b08      	cmp	r3, #8
 8000336:	d008      	beq.n	800034a <LCD_Init+0x1da>
 8000338:	2b08      	cmp	r3, #8
 800033a:	db02      	blt.n	8000342 <LCD_Init+0x1d2>
 800033c:	3b0c      	subs	r3, #12
 800033e:	2b03      	cmp	r3, #3
 8000340:	d903      	bls.n	800034a <LCD_Init+0x1da>
		/*Correct Initialization*/
		/*do nothing*/
		break;
	default:
		/*false initialization*/
		LCDconfig->Display_control = Display_Control_D_On_C_On_B_On;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	220f      	movs	r2, #15
 8000346:	705a      	strb	r2, [r3, #1]
		break;
 8000348:	e000      	b.n	800034c <LCD_Init+0x1dc>
		break;
 800034a:	bf00      	nop
	}

	switch (LCDconfig->Entry_mode) {
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	789b      	ldrb	r3, [r3, #2]
 8000350:	3b04      	subs	r3, #4
 8000352:	2b03      	cmp	r3, #3
 8000354:	d903      	bls.n	800035e <LCD_Init+0x1ee>
		/*Correct Initialization*/
		/*do nothing*/
		break;
	default:
		/*false initialization*/
		LCDconfig->Entry_mode = Entry_Mode_Inc_No_S;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2206      	movs	r2, #6
 800035a:	709a      	strb	r2, [r3, #2]
		break;
 800035c:	e000      	b.n	8000360 <LCD_Init+0x1f0>
		break;
 800035e:	bf00      	nop
	}
	/*after the LCD is ready Start Sending the Commands*/
	LCD_Write_Command(LCDconfig->function_set);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f833 	bl	80003d0 <LCD_Write_Command>
	LCD_Write_Command(LCDconfig->Entry_mode);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	789b      	ldrb	r3, [r3, #2]
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f82e 	bl	80003d0 <LCD_Write_Command>
	LCD_Write_Command(LCDconfig->Display_control);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	785b      	ldrb	r3, [r3, #1]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f829 	bl	80003d0 <LCD_Write_Command>
	LCD_Write_Command(LCD_Clear);
 800037e:	2001      	movs	r0, #1
 8000380:	f000 f826 	bl	80003d0 <LCD_Write_Command>
	LCD_Write_Command(LCD_Return_Home);
 8000384:	2002      	movs	r0, #2
 8000386:	f000 f823 	bl	80003d0 <LCD_Write_Command>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40010800 	.word	0x40010800
 800039c:	20000081 	.word	0x20000081
 80003a0:	08002894 	.word	0x08002894
 80003a4:	40010c00 	.word	0x40010c00

080003a8 <LCD_Write_Data>:
 * @brief		- Write a String on the LCD
 * @Param [in]	- input : a pointer to the first character in the string to be written
 * @returnValue	- None
 * @Notes		- None
 */
void LCD_Write_Data(char* input){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	while(*input){
 80003b0:	e006      	b.n	80003c0 <LCD_Write_Data+0x18>
		LCD_SendCharacter(*(input++));
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	1c5a      	adds	r2, r3, #1
 80003b6:	607a      	str	r2, [r7, #4]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f8dc 	bl	8000578 <LCD_SendCharacter>
	while(*input){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1f4      	bne.n	80003b2 <LCD_Write_Data+0xa>
	}
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <LCD_Write_Command>:
 * @brief		- Send Command To the LCD
 * @Param [in]	- command : the command to be sent
 * @returnValue	- None
 * @Notes		- Wrong or Invalid Command is not handled
 */
void LCD_Write_Command(char command){
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	int8_t i; /*iterator*/
	GPIO_PinConfig_t pinConfig; /*a structure to hold configurations of pins*/

	/*Change direction of data bins to be output*/
	pinConfig.pinMode     = GPIO_PIN_MODE_Out_PushPull;
 80003da:	2300      	movs	r3, #0
 80003dc:	737b      	strb	r3, [r7, #13]
	pinConfig.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 80003de:	2301      	movs	r3, #1
 80003e0:	73bb      	strb	r3, [r7, #14]
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80003e2:	2307      	movs	r3, #7
 80003e4:	73fb      	strb	r3, [r7, #15]
 80003e6:	e010      	b.n	800040a <LCD_Write_Command+0x3a>
		pinConfig.pinNumber   = LCD_DataPins[i];
 80003e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ec:	4a5d      	ldr	r2, [pc, #372]	; (8000564 <LCD_Write_Command+0x194>)
 80003ee:	5cd3      	ldrb	r3, [r2, r3]
 80003f0:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(LCD_Data_Port, &pinConfig);
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	4619      	mov	r1, r3
 80003f8:	485b      	ldr	r0, [pc, #364]	; (8000568 <LCD_Write_Command+0x198>)
 80003fa:	f000 ff25 	bl	8001248 <MCAL_GPIO_Init>
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80003fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000402:	b2db      	uxtb	r3, r3
 8000404:	3b01      	subs	r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	73fb      	strb	r3, [r7, #15]
 800040a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800040e:	4b57      	ldr	r3, [pc, #348]	; (800056c <LCD_Write_Command+0x19c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	f1c3 0308 	rsb	r3, r3, #8
 8000416:	429a      	cmp	r2, r3
 8000418:	dae6      	bge.n	80003e8 <LCD_Write_Command+0x18>
	}

	MCAL_GPIO_WritePin(LCD_Control_Port, RS, GPIO_PIN_Value_Low);/*Instruction*/
 800041a:	2200      	movs	r2, #0
 800041c:	210a      	movs	r1, #10
 800041e:	4854      	ldr	r0, [pc, #336]	; (8000570 <LCD_Write_Command+0x1a0>)
 8000420:	f000 fff6 	bl	8001410 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control_Port, RW, GPIO_PIN_Value_Low);/*Write*/
 8000424:	2200      	movs	r2, #0
 8000426:	2109      	movs	r1, #9
 8000428:	4851      	ldr	r0, [pc, #324]	; (8000570 <LCD_Write_Command+0x1a0>)
 800042a:	f000 fff1 	bl	8001410 <MCAL_GPIO_WritePin>

	/*Write command*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 800042e:	2307      	movs	r3, #7
 8000430:	73fb      	strb	r3, [r7, #15]
 8000432:	e016      	b.n	8000462 <LCD_Write_Command+0x92>
		MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i) &1);
 8000434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000438:	4a4a      	ldr	r2, [pc, #296]	; (8000564 <LCD_Write_Command+0x194>)
 800043a:	5cd1      	ldrb	r1, [r2, r3]
 800043c:	79fa      	ldrb	r2, [r7, #7]
 800043e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000442:	fa42 f303 	asr.w	r3, r2, r3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	b2db      	uxtb	r3, r3
 800044e:	461a      	mov	r2, r3
 8000450:	4845      	ldr	r0, [pc, #276]	; (8000568 <LCD_Write_Command+0x198>)
 8000452:	f000 ffdd 	bl	8001410 <MCAL_GPIO_WritePin>
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	3b01      	subs	r3, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000466:	4b41      	ldr	r3, [pc, #260]	; (800056c <LCD_Write_Command+0x19c>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	f1c3 0308 	rsb	r3, r3, #8
 800046e:	429a      	cmp	r2, r3
 8000470:	dae0      	bge.n	8000434 <LCD_Write_Command+0x64>
	}
	if(LCD_Interface == LCD_4_bit){
 8000472:	4b3e      	ldr	r3, [pc, #248]	; (800056c <LCD_Write_Command+0x19c>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b04      	cmp	r3, #4
 8000478:	d141      	bne.n	80004fe <LCD_Write_Command+0x12e>
		_delay_ns(50); /*TAS = 50ns (min = 40ns)*/
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f000 f970 	bl	8000760 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 8000480:	2201      	movs	r2, #1
 8000482:	2108      	movs	r1, #8
 8000484:	483a      	ldr	r0, [pc, #232]	; (8000570 <LCD_Write_Command+0x1a0>)
 8000486:	f000 ffc3 	bl	8001410 <MCAL_GPIO_WritePin>
		_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 800048a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800048e:	f000 f967 	bl	8000760 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000492:	2200      	movs	r2, #0
 8000494:	2108      	movs	r1, #8
 8000496:	4836      	ldr	r0, [pc, #216]	; (8000570 <LCD_Write_Command+0x1a0>)
 8000498:	f000 ffba 	bl	8001410 <MCAL_GPIO_WritePin>
		_delay_ns(20); /*TH = 20ns (min = 10ns)*/
 800049c:	2014      	movs	r0, #20
 800049e:	f000 f95f 	bl	8000760 <_delay_ns>
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80004a2:	2307      	movs	r3, #7
 80004a4:	73fb      	strb	r3, [r7, #15]
 80004a6:	e01e      	b.n	80004e6 <LCD_Write_Command+0x116>
			MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i % LCD_Interface) &1);
 80004a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ac:	4a2d      	ldr	r2, [pc, #180]	; (8000564 <LCD_Write_Command+0x194>)
 80004ae:	5cd4      	ldrb	r4, [r2, r3]
 80004b0:	79f9      	ldrb	r1, [r7, #7]
 80004b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004b6:	4a2d      	ldr	r2, [pc, #180]	; (800056c <LCD_Write_Command+0x19c>)
 80004b8:	7812      	ldrb	r2, [r2, #0]
 80004ba:	fb93 f0f2 	sdiv	r0, r3, r2
 80004be:	fb02 f200 	mul.w	r2, r2, r0
 80004c2:	1a9b      	subs	r3, r3, r2
 80004c4:	fa41 f303 	asr.w	r3, r1, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	461a      	mov	r2, r3
 80004d2:	4621      	mov	r1, r4
 80004d4:	4824      	ldr	r0, [pc, #144]	; (8000568 <LCD_Write_Command+0x198>)
 80004d6:	f000 ff9b 	bl	8001410 <MCAL_GPIO_WritePin>
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80004da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	3b01      	subs	r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	73fb      	strb	r3, [r7, #15]
 80004e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <LCD_Write_Command+0x19c>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	f1c3 0308 	rsb	r3, r3, #8
 80004f2:	429a      	cmp	r2, r3
 80004f4:	dad8      	bge.n	80004a8 <LCD_Write_Command+0xd8>
		}
		_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 80004f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004fa:	f000 f931 	bl	8000760 <_delay_ns>
	}

	_delay_ns(50); /*TAS = 50ns (min = 40ns)*/
 80004fe:	2032      	movs	r0, #50	; 0x32
 8000500:	f000 f92e 	bl	8000760 <_delay_ns>
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	4819      	ldr	r0, [pc, #100]	; (8000570 <LCD_Write_Command+0x1a0>)
 800050a:	f000 ff81 	bl	8001410 <MCAL_GPIO_WritePin>
	_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 800050e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000512:	f000 f925 	bl	8000760 <_delay_ns>
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000516:	2200      	movs	r2, #0
 8000518:	2108      	movs	r1, #8
 800051a:	4815      	ldr	r0, [pc, #84]	; (8000570 <LCD_Write_Command+0x1a0>)
 800051c:	f000 ff78 	bl	8001410 <MCAL_GPIO_WritePin>
	_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 8000520:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000524:	f000 f91c 	bl	8000760 <_delay_ns>
	_delay_ms(2); /*wait 2ms before performing any other command*/
 8000528:	2002      	movs	r0, #2
 800052a:	f000 f8ff 	bl	800072c <_delay_ms>

	/*update the counter if the command was change cursor position*/
	if(command >= F00){
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	2b00      	cmp	r3, #0
 8000534:	da0c      	bge.n	8000550 <LCD_Write_Command+0x180>
		if(command < S00){
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2bbf      	cmp	r3, #191	; 0xbf
 800053a:	d803      	bhi.n	8000544 <LCD_Write_Command+0x174>
			counter = command - 0xF00;
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <LCD_Write_Command+0x1a4>)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	7013      	strb	r3, [r2, #0]
			counter = 17 + (command - S00);
		}
	}else if(command == LCD_Return_Home){
		counter = 0;
	}
}
 8000542:	e00b      	b.n	800055c <LCD_Write_Command+0x18c>
			counter = 17 + (command - S00);
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	3351      	adds	r3, #81	; 0x51
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <LCD_Write_Command+0x1a4>)
 800054c:	701a      	strb	r2, [r3, #0]
}
 800054e:	e005      	b.n	800055c <LCD_Write_Command+0x18c>
	}else if(command == LCD_Return_Home){
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d102      	bne.n	800055c <LCD_Write_Command+0x18c>
		counter = 0;
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <LCD_Write_Command+0x1a4>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	08002894 	.word	0x08002894
 8000568:	40010c00 	.word	0x40010c00
 800056c:	20000081 	.word	0x20000081
 8000570:	40010800 	.word	0x40010800
 8000574:	20000080 	.word	0x20000080

08000578 <LCD_SendCharacter>:
 * @brief		- Send a character to be displayed on the LCD
 * @Param [in]	- c : the character to be displayed
 * @returnValue	- None
 * @Notes		- None
 */
void LCD_SendCharacter(char c){
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	int8_t i; /*iterator*/
	GPIO_PinConfig_t pinConfig; /*a structure to hold configurations of pins*/

	if(counter++ == LCD_Line_Length){ /*first line filled*/
 8000582:	4b64      	ldr	r3, [pc, #400]	; (8000714 <LCD_SendCharacter+0x19c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	b2d1      	uxtb	r1, r2
 800058a:	4a62      	ldr	r2, [pc, #392]	; (8000714 <LCD_SendCharacter+0x19c>)
 800058c:	7011      	strb	r1, [r2, #0]
 800058e:	2b10      	cmp	r3, #16
 8000590:	d108      	bne.n	80005a4 <LCD_SendCharacter+0x2c>
		DDRAM_Address = S00;
 8000592:	4b61      	ldr	r3, [pc, #388]	; (8000718 <LCD_SendCharacter+0x1a0>)
 8000594:	22c0      	movs	r2, #192	; 0xc0
 8000596:	701a      	strb	r2, [r3, #0]
		LCD_Write_Command(DDRAM_Address);
 8000598:	4b5f      	ldr	r3, [pc, #380]	; (8000718 <LCD_SendCharacter+0x1a0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff17 	bl	80003d0 <LCD_Write_Command>
 80005a2:	e00c      	b.n	80005be <LCD_SendCharacter+0x46>
	}else if(counter > LCD_Line_Length * 2){ /*both lines are filled*/
 80005a4:	4b5b      	ldr	r3, [pc, #364]	; (8000714 <LCD_SendCharacter+0x19c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b20      	cmp	r3, #32
 80005aa:	d908      	bls.n	80005be <LCD_SendCharacter+0x46>
		/*Clear Screen*/
		LCD_Write_Command(LCD_Clear);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff ff0f 	bl	80003d0 <LCD_Write_Command>
		LCD_Write_Command(LCD_Return_Home);
 80005b2:	2002      	movs	r0, #2
 80005b4:	f7ff ff0c 	bl	80003d0 <LCD_Write_Command>
		counter = 0;
 80005b8:	4b56      	ldr	r3, [pc, #344]	; (8000714 <LCD_SendCharacter+0x19c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	}
	/*Change direction of data bins to be output*/
	pinConfig.pinMode     = GPIO_PIN_MODE_Out_PushPull;
 80005be:	2300      	movs	r3, #0
 80005c0:	737b      	strb	r3, [r7, #13]
	pinConfig.pinOutSpeed = GPIO_PIN_OUT_SPEED_10MHZ;
 80005c2:	2301      	movs	r3, #1
 80005c4:	73bb      	strb	r3, [r7, #14]
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80005c6:	2307      	movs	r3, #7
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e010      	b.n	80005ee <LCD_SendCharacter+0x76>
		pinConfig.pinNumber   = LCD_DataPins[i];
 80005cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005d0:	4a52      	ldr	r2, [pc, #328]	; (800071c <LCD_SendCharacter+0x1a4>)
 80005d2:	5cd3      	ldrb	r3, [r2, r3]
 80005d4:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(LCD_Data_Port, &pinConfig);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4850      	ldr	r0, [pc, #320]	; (8000720 <LCD_SendCharacter+0x1a8>)
 80005de:	f000 fe33 	bl	8001248 <MCAL_GPIO_Init>
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80005e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80005f2:	4b4c      	ldr	r3, [pc, #304]	; (8000724 <LCD_SendCharacter+0x1ac>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	f1c3 0308 	rsb	r3, r3, #8
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dae6      	bge.n	80005cc <LCD_SendCharacter+0x54>
	}

	MCAL_GPIO_WritePin(LCD_Control_Port, RS, GPIO_PIN_Value_High);/*data*/
 80005fe:	2201      	movs	r2, #1
 8000600:	210a      	movs	r1, #10
 8000602:	4849      	ldr	r0, [pc, #292]	; (8000728 <LCD_SendCharacter+0x1b0>)
 8000604:	f000 ff04 	bl	8001410 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control_Port, RW, GPIO_PIN_Value_Low);/*Write*/
 8000608:	2200      	movs	r2, #0
 800060a:	2109      	movs	r1, #9
 800060c:	4846      	ldr	r0, [pc, #280]	; (8000728 <LCD_SendCharacter+0x1b0>)
 800060e:	f000 feff 	bl	8001410 <MCAL_GPIO_WritePin>

	/*write the character*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000612:	2307      	movs	r3, #7
 8000614:	73fb      	strb	r3, [r7, #15]
 8000616:	e016      	b.n	8000646 <LCD_SendCharacter+0xce>
		MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i) &1);
 8000618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061c:	4a3f      	ldr	r2, [pc, #252]	; (800071c <LCD_SendCharacter+0x1a4>)
 800061e:	5cd1      	ldrb	r1, [r2, r3]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000626:	fa42 f303 	asr.w	r3, r2, r3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	483a      	ldr	r0, [pc, #232]	; (8000720 <LCD_SendCharacter+0x1a8>)
 8000636:	f000 feeb 	bl	8001410 <MCAL_GPIO_WritePin>
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 800063a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	3b01      	subs	r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800064a:	4b36      	ldr	r3, [pc, #216]	; (8000724 <LCD_SendCharacter+0x1ac>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f1c3 0308 	rsb	r3, r3, #8
 8000652:	429a      	cmp	r2, r3
 8000654:	dae0      	bge.n	8000618 <LCD_SendCharacter+0xa0>
	}
	if(LCD_Interface == LCD_4_bit){
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <LCD_SendCharacter+0x1ac>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d141      	bne.n	80006e2 <LCD_SendCharacter+0x16a>
		_delay_ns(50); /*TAS = 50ns (min = 40ns)*/
 800065e:	2032      	movs	r0, #50	; 0x32
 8000660:	f000 f87e 	bl	8000760 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 8000664:	2201      	movs	r2, #1
 8000666:	2108      	movs	r1, #8
 8000668:	482f      	ldr	r0, [pc, #188]	; (8000728 <LCD_SendCharacter+0x1b0>)
 800066a:	f000 fed1 	bl	8001410 <MCAL_GPIO_WritePin>
		_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 800066e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000672:	f000 f875 	bl	8000760 <_delay_ns>
		MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	482b      	ldr	r0, [pc, #172]	; (8000728 <LCD_SendCharacter+0x1b0>)
 800067c:	f000 fec8 	bl	8001410 <MCAL_GPIO_WritePin>
		_delay_ns(20); /*TH = 20ns (min = 10ns)*/
 8000680:	2014      	movs	r0, #20
 8000682:	f000 f86d 	bl	8000760 <_delay_ns>
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 8000686:	2307      	movs	r3, #7
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e01e      	b.n	80006ca <LCD_SendCharacter+0x152>
			MCAL_GPIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i % LCD_Interface) &1);
 800068c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <LCD_SendCharacter+0x1a4>)
 8000692:	5cd4      	ldrb	r4, [r2, r3]
 8000694:	79f9      	ldrb	r1, [r7, #7]
 8000696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069a:	4a22      	ldr	r2, [pc, #136]	; (8000724 <LCD_SendCharacter+0x1ac>)
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	fb93 f0f2 	sdiv	r0, r3, r2
 80006a2:	fb02 f200 	mul.w	r2, r2, r0
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	fa41 f303 	asr.w	r3, r1, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	4621      	mov	r1, r4
 80006b8:	4819      	ldr	r0, [pc, #100]	; (8000720 <LCD_SendCharacter+0x1a8>)
 80006ba:	f000 fea9 	bl	8001410 <MCAL_GPIO_WritePin>
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 80006be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <LCD_SendCharacter+0x1ac>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	f1c3 0308 	rsb	r3, r3, #8
 80006d6:	429a      	cmp	r2, r3
 80006d8:	dad8      	bge.n	800068c <LCD_SendCharacter+0x114>
		}
		_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 80006da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006de:	f000 f83f 	bl	8000760 <_delay_ns>
	}

	_delay_ns(50); /*TAS = 50ns (min = 40ns)*/
 80006e2:	2032      	movs	r0, #50	; 0x32
 80006e4:	f000 f83c 	bl	8000760 <_delay_ns>
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_High);/*Enable the LCD*/
 80006e8:	2201      	movs	r2, #1
 80006ea:	2108      	movs	r1, #8
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <LCD_SendCharacter+0x1b0>)
 80006ee:	f000 fe8f 	bl	8001410 <MCAL_GPIO_WritePin>
	_delay_ns(300); /*TCYCE / 2 = 300ns (min = 250ns)*/
 80006f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006f6:	f000 f833 	bl	8000760 <_delay_ns>
	MCAL_GPIO_WritePin(LCD_Control_Port, E, GPIO_PIN_Value_Low);/*disable the LCD*/
 80006fa:	2200      	movs	r2, #0
 80006fc:	2108      	movs	r1, #8
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <LCD_SendCharacter+0x1b0>)
 8000700:	f000 fe86 	bl	8001410 <MCAL_GPIO_WritePin>
	_delay_ns(300); /*TCYCE/2 = 300ns (min = 250ns)*/
 8000704:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000708:	f000 f82a 	bl	8000760 <_delay_ns>
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	20000080 	.word	0x20000080
 8000718:	200000d9 	.word	0x200000d9
 800071c:	08002894 	.word	0x08002894
 8000720:	40010c00 	.word	0x40010c00
 8000724:	20000081 	.word	0x20000081
 8000728:	40010800 	.word	0x40010800

0800072c <_delay_ms>:
 * @Fn			- _delay_ms
 * @brief		- Software delay
 * @returnValue	- None
 * @Notes		- a private function used for LCD.c only
 */
static void _delay_ms( uint16_t time){
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	80fb      	strh	r3, [r7, #6]
	while(time--){
 8000736:	e009      	b.n	800074c <_delay_ms+0x20>
		uint32_t i ;
		for(i = 0 ; i < 1000; i++);
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e002      	b.n	8000744 <_delay_ms+0x18>
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800074a:	d3f8      	bcc.n	800073e <_delay_ms+0x12>
	while(time--){
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	80fa      	strh	r2, [r7, #6]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f0      	bne.n	8000738 <_delay_ms+0xc>
	}
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <_delay_ns>:
 * @Fn			- _delay_ns
 * @brief		- Software delay
 * @returnValue	- None
 * @Notes		- a private function used for LCD.c only
 */
static void _delay_ns( uint16_t time){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
	while(time--);
 800076a:	bf00      	nop
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	1e5a      	subs	r2, r3, #1
 8000770:	80fa      	strh	r2, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1fa      	bne.n	800076c <_delay_ns+0xc>
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <Button_Init>:
#include "stm32f103c6_EXTI_Driver.h"
#include "stm32f103c6_GPIO_Driver.h"
#include "stm32f103x6.h"

uint8_t IRQ_happened = 0;
void Button_Init(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
	switch ((uint32_t)Button_Port) {
	case (uint32_t)GPIOA:
		GPIOA_Clock_Enable;
		break;
	case (uint32_t)GPIOB:
		GPIOB_Clock_Enable;
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <Button_Init+0x6c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <Button_Init+0x6c>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6193      	str	r3, [r2, #24]
		break;
 8000792:	bf00      	nop
		break;
	default:
		break;
	}
	/*2. enable AFIO Clock*/
	AFIO_Clock_Enable;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <Button_Init+0x6c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <Button_Init+0x6c>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6193      	str	r3, [r2, #24]
	/*3. configure button pin as input floating*/
	buttonPinConfig.pinNumber = Button_Pin;
 80007a0:	2309      	movs	r3, #9
 80007a2:	773b      	strb	r3, [r7, #28]
	buttonPinConfig.pinMode	  = GPIO_PIN_MODE_IN_Floating;
 80007a4:	2305      	movs	r3, #5
 80007a6:	777b      	strb	r3, [r7, #29]
	MCAL_GPIO_Init(Button_Port, &buttonPinConfig);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4810      	ldr	r0, [pc, #64]	; (80007f0 <Button_Init+0x70>)
 80007b0:	f000 fd4a 	bl	8001248 <MCAL_GPIO_Init>
	/*4. Adjust EXTI configuration for Button pin*/
	EXTIx_Config.pinMapping      = MCAL_EXTIx_GetPinMapping(Button_Port, Button_Pin);
 80007b4:	463b      	mov	r3, r7
 80007b6:	2209      	movs	r2, #9
 80007b8:	490d      	ldr	r1, [pc, #52]	; (80007f0 <Button_Init+0x70>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f926 	bl	8000a0c <MCAL_EXTIx_GetPinMapping>
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	463a      	mov	r2, r7
 80007c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ca:	e883 0003 	stmia.w	r3, {r0, r1}
	EXTIx_Config.trigerringEdge  = EXTI_Trigger_Both;
 80007ce:	2303      	movs	r3, #3
 80007d0:	753b      	strb	r3, [r7, #20]
	EXTIx_Config.interruptStatus = EXTI_Status_enable;
 80007d2:	2302      	movs	r3, #2
 80007d4:	757b      	strb	r3, [r7, #21]
	EXTIx_Config.callback = Button_CallBack;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <Button_Init+0x74>)
 80007d8:	61bb      	str	r3, [r7, #24]
	MCAL_EXTIx_Configure(&EXTIx_Config);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f82c 	bl	800083c <MCAL_EXTIx_Configure>
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010c00 	.word	0x40010c00
 80007f4:	080007f9 	.word	0x080007f9

080007f8 <Button_CallBack>:
void Button_CallBack(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	LCD_Write_Command(DDRAM_Address = F04);
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <Button_CallBack+0x34>)
 80007fe:	2284      	movs	r2, #132	; 0x84
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	2084      	movs	r0, #132	; 0x84
 8000804:	f7ff fde4 	bl	80003d0 <LCD_Write_Command>
	LCD_Write_Data("IRQ EXTI9 is -->");
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <Button_CallBack+0x38>)
 800080a:	f7ff fdcd 	bl	80003a8 <LCD_Write_Data>
	LCD_Write_Command(DDRAM_Address = S04);
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <Button_CallBack+0x34>)
 8000810:	22c4      	movs	r2, #196	; 0xc4
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	20c4      	movs	r0, #196	; 0xc4
 8000816:	f7ff fddb 	bl	80003d0 <LCD_Write_Command>
	LCD_Write_Data("happened");
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <Button_CallBack+0x3c>)
 800081c:	f7ff fdc4 	bl	80003a8 <LCD_Write_Data>
	IRQ_happened = 1;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <Button_CallBack+0x40>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000d9 	.word	0x200000d9
 8000830:	080025e4 	.word	0x080025e4
 8000834:	080025f8 	.word	0x080025f8
 8000838:	20000082 	.word	0x20000082

0800083c <MCAL_EXTIx_Configure>:
 * 				  trigerringEdge   		= unKnown behavior
 * 				  pinMapping.GPIOx 		= GPIOA
 * 				  pinMapping.EXTI_Line 	= Error
 * 				  pinMapping.pinNumber 	= Error
 */
void MCAL_EXTIx_Configure(EXTI_Config_t* EXTIx_config){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	uint8_t mapVal; /*variable to hold mapping value according to GPIO number*/
	/*Fire error in case of Invalid EXTI_Line or pinNumber*/
	assert(EXTIx_config->pinMapping.EXTI_Line == EXTIx_config->pinMapping.pinNumber);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	795a      	ldrb	r2, [r3, #5]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	d005      	beq.n	800085c <MCAL_EXTIx_Configure+0x20>
 8000850:	4b63      	ldr	r3, [pc, #396]	; (80009e0 <MCAL_EXTIx_Configure+0x1a4>)
 8000852:	4a64      	ldr	r2, [pc, #400]	; (80009e4 <MCAL_EXTIx_Configure+0x1a8>)
 8000854:	2125      	movs	r1, #37	; 0x25
 8000856:	4864      	ldr	r0, [pc, #400]	; (80009e8 <MCAL_EXTIx_Configure+0x1ac>)
 8000858:	f000 ff34 	bl	80016c4 <__assert_func>
	assert(EXTIx_config->pinMapping.EXTI_Line <= EXTI_Line_15);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	795b      	ldrb	r3, [r3, #5]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d905      	bls.n	8000870 <MCAL_EXTIx_Configure+0x34>
 8000864:	4b61      	ldr	r3, [pc, #388]	; (80009ec <MCAL_EXTIx_Configure+0x1b0>)
 8000866:	4a5f      	ldr	r2, [pc, #380]	; (80009e4 <MCAL_EXTIx_Configure+0x1a8>)
 8000868:	2126      	movs	r1, #38	; 0x26
 800086a:	485f      	ldr	r0, [pc, #380]	; (80009e8 <MCAL_EXTIx_Configure+0x1ac>)
 800086c:	f000 ff2a 	bl	80016c4 <__assert_func>

	/*1. Enable or disable EXTIx*/
	if(EXTIx_config->interruptStatus == EXTI_Status_enable){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7a5b      	ldrb	r3, [r3, #9]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d110      	bne.n	800089a <MCAL_EXTIx_Configure+0x5e>
		/*Enable EXTIx*/
		EXTI->IMR |= (1<<EXTIx_config->pinMapping.EXTI_Line);
 8000878:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	7952      	ldrb	r2, [r2, #5]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	4611      	mov	r1, r2
 8000888:	4a59      	ldr	r2, [pc, #356]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6013      	str	r3, [r2, #0]
		/*Enable NVIC Line for EXTIx*/
		NVIC_EXTIx_Enable(EXTIx_config->pinMapping.EXTI_Line);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	795b      	ldrb	r3, [r3, #5]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fb12 	bl	8000ebc <NVIC_EXTIx_Enable>
 8000898:	e015      	b.n	80008c6 <MCAL_EXTIx_Configure+0x8a>
	}else{
		/*Disable EXTIx*/
		EXTI->IMR &= ~(1<<EXTIx_config->pinMapping.EXTI_Line);
 800089a:	4b55      	ldr	r3, [pc, #340]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	7952      	ldrb	r2, [r2, #5]
 80008a2:	4611      	mov	r1, r2
 80008a4:	2201      	movs	r2, #1
 80008a6:	408a      	lsls	r2, r1
 80008a8:	43d2      	mvns	r2, r2
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a50      	ldr	r2, [pc, #320]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 80008ae:	400b      	ands	r3, r1
 80008b0:	6013      	str	r3, [r2, #0]
		/*Disable NVIC Line for EXTIx*/
		NVIC_EXTIx_Disable(EXTIx_config->pinMapping.EXTI_Line);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fb70 	bl	8000f9c <NVIC_EXTIx_Disable>
		/*just disable a pre-enabled interrupt without changing it's configuration*/
		if(EXTIx_config->interruptStatus == EXTI_Status_disable)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7a5b      	ldrb	r3, [r3, #9]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	f000 8088 	beq.w	80009d6 <MCAL_EXTIx_Configure+0x19a>
			return;
	}
	/*2. Adjust Triggering Event*/
	/*2.1. reset triggering event*/
	EXTI->FTSR &= ~(1<<EXTIx_config->pinMapping.EXTI_Line);
 80008c6:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	7952      	ldrb	r2, [r2, #5]
 80008ce:	4611      	mov	r1, r2
 80008d0:	2201      	movs	r2, #1
 80008d2:	408a      	lsls	r2, r1
 80008d4:	43d2      	mvns	r2, r2
 80008d6:	4611      	mov	r1, r2
 80008d8:	4a45      	ldr	r2, [pc, #276]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 80008da:	400b      	ands	r3, r1
 80008dc:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1<<EXTIx_config->pinMapping.EXTI_Line);
 80008de:	4b44      	ldr	r3, [pc, #272]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	7952      	ldrb	r2, [r2, #5]
 80008e6:	4611      	mov	r1, r2
 80008e8:	2201      	movs	r2, #1
 80008ea:	408a      	lsls	r2, r1
 80008ec:	43d2      	mvns	r2, r2
 80008ee:	4611      	mov	r1, r2
 80008f0:	4a3f      	ldr	r2, [pc, #252]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 80008f2:	400b      	ands	r3, r1
 80008f4:	6093      	str	r3, [r2, #8]
	/*2.2. fire the chosen one*/
	EXTI->FTSR |= ((EXTIx_config->trigerringEdge & EXTI_Trigger_Falling)<<EXTIx_config->pinMapping.EXTI_Line);
 80008f6:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	7a12      	ldrb	r2, [r2, #8]
 80008fe:	f002 0201 	and.w	r2, r2, #1
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	7949      	ldrb	r1, [r1, #5]
 8000906:	408a      	lsls	r2, r1
 8000908:	4611      	mov	r1, r2
 800090a:	4a39      	ldr	r2, [pc, #228]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 800090c:	430b      	orrs	r3, r1
 800090e:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR |= ((EXTIx_config->trigerringEdge & EXTI_Trigger_Rising )<<(EXTIx_config->pinMapping.EXTI_Line - 1));
 8000910:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	7a12      	ldrb	r2, [r2, #8]
 8000918:	f002 0102 	and.w	r1, r2, #2
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	7952      	ldrb	r2, [r2, #5]
 8000920:	3a01      	subs	r2, #1
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	4611      	mov	r1, r2
 8000928:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <MCAL_EXTIx_Configure+0x1b4>)
 800092a:	430b      	orrs	r3, r1
 800092c:	6093      	str	r3, [r2, #8]

	/*3. adjust pin mapping*/
	/*3.1. get the mapping value*/
	mapVal = (EXTIx_config->pinMapping.GPIOx == GPIOA) ? 0 : \
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <MCAL_EXTIx_Configure+0x1b8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d016      	beq.n	8000966 <MCAL_EXTIx_Configure+0x12a>
			(EXTIx_config->pinMapping.GPIOx == GPIOB) ? 1 : \
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
	mapVal = (EXTIx_config->pinMapping.GPIOx == GPIOA) ? 0 : \
 800093c:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <MCAL_EXTIx_Configure+0x1bc>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d00f      	beq.n	8000962 <MCAL_EXTIx_Configure+0x126>
					(EXTIx_config->pinMapping.GPIOx == GPIOC) ? 2 : \
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
	mapVal = (EXTIx_config->pinMapping.GPIOx == GPIOA) ? 0 : \
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <MCAL_EXTIx_Configure+0x1c0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d008      	beq.n	800095e <MCAL_EXTIx_Configure+0x122>
							(EXTIx_config->pinMapping.GPIOx == GPIOD) ? 3 : 0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
	mapVal = (EXTIx_config->pinMapping.GPIOx == GPIOA) ? 0 : \
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <MCAL_EXTIx_Configure+0x1c4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <MCAL_EXTIx_Configure+0x11e>
 8000956:	2303      	movs	r3, #3
 8000958:	e006      	b.n	8000968 <MCAL_EXTIx_Configure+0x12c>
 800095a:	2300      	movs	r3, #0
 800095c:	e004      	b.n	8000968 <MCAL_EXTIx_Configure+0x12c>
 800095e:	2302      	movs	r3, #2
 8000960:	e002      	b.n	8000968 <MCAL_EXTIx_Configure+0x12c>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <MCAL_EXTIx_Configure+0x12c>
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
	/*3.2. Clear the nibble that correspond to EXTIx*/
	AFIO->EXTICR[EXTIx_config->pinMapping.EXTI_Line / 4] &= ~(0xF    << ((EXTIx_config->pinMapping.EXTI_Line % 4)*4));
 800096a:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <MCAL_EXTIx_Configure+0x1c8>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	795b      	ldrb	r3, [r3, #5]
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	b2d8      	uxtb	r0, r3
 8000974:	4603      	mov	r3, r0
 8000976:	3302      	adds	r3, #2
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	7952      	ldrb	r2, [r2, #5]
 8000980:	f002 0203 	and.w	r2, r2, #3
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	210f      	movs	r1, #15
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	43d2      	mvns	r2, r2
 800098e:	491d      	ldr	r1, [pc, #116]	; (8000a04 <MCAL_EXTIx_Configure+0x1c8>)
 8000990:	401a      	ands	r2, r3
 8000992:	1c83      	adds	r3, r0, #2
 8000994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*3.3. update the nibble that correspond to EXTIx with the desired mapping*/
	AFIO->EXTICR[EXTIx_config->pinMapping.EXTI_Line / 4] |=  (mapVal << ((EXTIx_config->pinMapping.EXTI_Line % 4)*4));
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <MCAL_EXTIx_Configure+0x1c8>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	795b      	ldrb	r3, [r3, #5]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	3302      	adds	r3, #2
 80009a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009aa:	7bf9      	ldrb	r1, [r7, #15]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	7952      	ldrb	r2, [r2, #5]
 80009b0:	f002 0203 	and.w	r2, r2, #3
 80009b4:	0092      	lsls	r2, r2, #2
 80009b6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ba:	4912      	ldr	r1, [pc, #72]	; (8000a04 <MCAL_EXTIx_Configure+0x1c8>)
 80009bc:	431a      	orrs	r2, r3
 80009be:	1c83      	adds	r3, r0, #2
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*4. update Callback Function*/
	PF[EXTIx_config->pinMapping.EXTI_Line] = EXTIx_config->callback;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	795b      	ldrb	r3, [r3, #5]
 80009c8:	4619      	mov	r1, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <MCAL_EXTIx_Configure+0x1cc>)
 80009d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80009d4:	e000      	b.n	80009d8 <MCAL_EXTIx_Configure+0x19c>
			return;
 80009d6:	bf00      	nop
}
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	08002604 	.word	0x08002604
 80009e4:	0800289c 	.word	0x0800289c
 80009e8:	08002650 	.word	0x08002650
 80009ec:	08002688 	.word	0x08002688
 80009f0:	40010400 	.word	0x40010400
 80009f4:	40010800 	.word	0x40010800
 80009f8:	40010c00 	.word	0x40010c00
 80009fc:	40011000 	.word	0x40011000
 8000a00:	40011400 	.word	0x40011400
 8000a04:	40010000 	.word	0x40010000
 8000a08:	20000084 	.word	0x20000084

08000a0c <MCAL_EXTIx_GetPinMapping>:
 * @param [in]	- GPIOx 	: a pointer to the required GPIO Peripheral
 * @param [in]	- pinNmber 	: the number of the pin to be configured as EXTI
 * @returnValue	- None
 * @Notes		- None
 */
EXTI_PinMapping_t MCAL_EXTIx_GetPinMapping(GPIO_T* GPIOx,uint8_t pinNmber){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	4613      	mov	r3, r2
 8000a18:	71fb      	strb	r3, [r7, #7]
	EXTI_PinMapping_t GPIOxPinyEXTIz; /*a structure to hold the desired pin mapping*/
	GPIOxPinyEXTIz = EXTI_Mapping_PA0;
 8000a1a:	4bb6      	ldr	r3, [pc, #728]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	753b      	strb	r3, [r7, #20]
 8000a22:	2300      	movs	r3, #0
 8000a24:	757b      	strb	r3, [r7, #21]
	switch (pinNmber) {
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	f200 821c 	bhi.w	8000e66 <MCAL_EXTIx_GetPinMapping+0x45a>
 8000a2e:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <MCAL_EXTIx_GetPinMapping+0x28>)
 8000a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a34:	08000a75 	.word	0x08000a75
 8000a38:	08000ab7 	.word	0x08000ab7
 8000a3c:	08000aff 	.word	0x08000aff
 8000a40:	08000b31 	.word	0x08000b31
 8000a44:	08000b63 	.word	0x08000b63
 8000a48:	08000b95 	.word	0x08000b95
 8000a4c:	08000bc7 	.word	0x08000bc7
 8000a50:	08000bf9 	.word	0x08000bf9
 8000a54:	08000c2b 	.word	0x08000c2b
 8000a58:	08000c5d 	.word	0x08000c5d
 8000a5c:	08000c8f 	.word	0x08000c8f
 8000a60:	08000cc1 	.word	0x08000cc1
 8000a64:	08000d5d 	.word	0x08000d5d
 8000a68:	08000d8f 	.word	0x08000d8f
 8000a6c:	08000dd7 	.word	0x08000dd7
 8000a70:	08000e1f 	.word	0x08000e1f
	case GPIO_PIN_0:
		switch ((uint32_t)GPIOx) {
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4aa0      	ldr	r2, [pc, #640]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d00d      	beq.n	8000a98 <MCAL_EXTIx_GetPinMapping+0x8c>
 8000a7c:	4a9f      	ldr	r2, [pc, #636]	; (8000cfc <MCAL_EXTIx_GetPinMapping+0x2f0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d011      	beq.n	8000aa6 <MCAL_EXTIx_GetPinMapping+0x9a>
 8000a82:	4a9c      	ldr	r2, [pc, #624]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d000      	beq.n	8000a8a <MCAL_EXTIx_GetPinMapping+0x7e>
			break;
		case (uint32_t)GPIOD:
			GPIOxPinyEXTIz = EXTI_Mapping_PD0;
			break;
		default:
			break;
 8000a88:	e014      	b.n	8000ab4 <MCAL_EXTIx_GetPinMapping+0xa8>
			GPIOxPinyEXTIz = EXTI_Mapping_PA0;
 8000a8a:	4b9a      	ldr	r3, [pc, #616]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	753b      	strb	r3, [r7, #20]
 8000a92:	2300      	movs	r3, #0
 8000a94:	757b      	strb	r3, [r7, #21]
			break;
 8000a96:	e00d      	b.n	8000ab4 <MCAL_EXTIx_GetPinMapping+0xa8>
			GPIOxPinyEXTIz = EXTI_Mapping_PB0;
 8000a98:	4b97      	ldr	r3, [pc, #604]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	753b      	strb	r3, [r7, #20]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	757b      	strb	r3, [r7, #21]
			break;
 8000aa4:	e006      	b.n	8000ab4 <MCAL_EXTIx_GetPinMapping+0xa8>
			GPIOxPinyEXTIz = EXTI_Mapping_PD0;
 8000aa6:	4b95      	ldr	r3, [pc, #596]	; (8000cfc <MCAL_EXTIx_GetPinMapping+0x2f0>)
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	753b      	strb	r3, [r7, #20]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	757b      	strb	r3, [r7, #21]
			break;
 8000ab2:	bf00      	nop
		}
		break;
 8000ab4:	e1d8      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_1:
		switch ((uint32_t)GPIOx) {
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	4a8f      	ldr	r2, [pc, #572]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00e      	beq.n	8000adc <MCAL_EXTIx_GetPinMapping+0xd0>
 8000abe:	4a8f      	ldr	r2, [pc, #572]	; (8000cfc <MCAL_EXTIx_GetPinMapping+0x2f0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d013      	beq.n	8000aec <MCAL_EXTIx_GetPinMapping+0xe0>
 8000ac4:	4a8b      	ldr	r2, [pc, #556]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d000      	beq.n	8000acc <MCAL_EXTIx_GetPinMapping+0xc0>
			break;
		case (uint32_t)GPIOD:
			GPIOxPinyEXTIz = EXTI_Mapping_PD1;
			break;
		default:
			break;
 8000aca:	e017      	b.n	8000afc <MCAL_EXTIx_GetPinMapping+0xf0>
			GPIOxPinyEXTIz = EXTI_Mapping_PA1;
 8000acc:	4a8c      	ldr	r2, [pc, #560]	; (8000d00 <MCAL_EXTIx_GetPinMapping+0x2f4>)
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad6:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000ada:	e00f      	b.n	8000afc <MCAL_EXTIx_GetPinMapping+0xf0>
			GPIOxPinyEXTIz = EXTI_Mapping_PB1;
 8000adc:	4a89      	ldr	r2, [pc, #548]	; (8000d04 <MCAL_EXTIx_GetPinMapping+0x2f8>)
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae6:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000aea:	e007      	b.n	8000afc <MCAL_EXTIx_GetPinMapping+0xf0>
			GPIOxPinyEXTIz = EXTI_Mapping_PD1;
 8000aec:	4a86      	ldr	r2, [pc, #536]	; (8000d08 <MCAL_EXTIx_GetPinMapping+0x2fc>)
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af6:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000afa:	bf00      	nop
		}
		break;
 8000afc:	e1b4      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_2:
		switch ((uint32_t)GPIOx) {
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4a7c      	ldr	r2, [pc, #496]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d003      	beq.n	8000b0e <MCAL_EXTIx_GetPinMapping+0x102>
 8000b06:	4a7c      	ldr	r2, [pc, #496]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d008      	beq.n	8000b1e <MCAL_EXTIx_GetPinMapping+0x112>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB2;
			break;
		default:
			break;
 8000b0c:	e00f      	b.n	8000b2e <MCAL_EXTIx_GetPinMapping+0x122>
			GPIOxPinyEXTIz = EXTI_Mapping_PA2;
 8000b0e:	4a7f      	ldr	r2, [pc, #508]	; (8000d0c <MCAL_EXTIx_GetPinMapping+0x300>)
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000b1c:	e007      	b.n	8000b2e <MCAL_EXTIx_GetPinMapping+0x122>
			GPIOxPinyEXTIz = EXTI_Mapping_PB2;
 8000b1e:	4a7c      	ldr	r2, [pc, #496]	; (8000d10 <MCAL_EXTIx_GetPinMapping+0x304>)
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b28:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000b2c:	bf00      	nop
		}
		break;
 8000b2e:	e19b      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_3:
		switch ((uint32_t)GPIOx) {
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4a70      	ldr	r2, [pc, #448]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d003      	beq.n	8000b40 <MCAL_EXTIx_GetPinMapping+0x134>
 8000b38:	4a6f      	ldr	r2, [pc, #444]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d008      	beq.n	8000b50 <MCAL_EXTIx_GetPinMapping+0x144>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB3;
			break;
		default:
			break;
 8000b3e:	e00f      	b.n	8000b60 <MCAL_EXTIx_GetPinMapping+0x154>
			GPIOxPinyEXTIz = EXTI_Mapping_PA3;
 8000b40:	4a74      	ldr	r2, [pc, #464]	; (8000d14 <MCAL_EXTIx_GetPinMapping+0x308>)
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4a:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000b4e:	e007      	b.n	8000b60 <MCAL_EXTIx_GetPinMapping+0x154>
			GPIOxPinyEXTIz = EXTI_Mapping_PB3;
 8000b50:	4a71      	ldr	r2, [pc, #452]	; (8000d18 <MCAL_EXTIx_GetPinMapping+0x30c>)
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5a:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000b5e:	bf00      	nop
		}
		break;
 8000b60:	e182      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_4:
		switch ((uint32_t)GPIOx) {
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	4a63      	ldr	r2, [pc, #396]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d003      	beq.n	8000b72 <MCAL_EXTIx_GetPinMapping+0x166>
 8000b6a:	4a63      	ldr	r2, [pc, #396]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d008      	beq.n	8000b82 <MCAL_EXTIx_GetPinMapping+0x176>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB4;
			break;
		default:
			break;
 8000b70:	e00f      	b.n	8000b92 <MCAL_EXTIx_GetPinMapping+0x186>
			GPIOxPinyEXTIz = EXTI_Mapping_PA4;
 8000b72:	4a6a      	ldr	r2, [pc, #424]	; (8000d1c <MCAL_EXTIx_GetPinMapping+0x310>)
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b7c:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000b80:	e007      	b.n	8000b92 <MCAL_EXTIx_GetPinMapping+0x186>
			GPIOxPinyEXTIz = EXTI_Mapping_PB4;
 8000b82:	4a67      	ldr	r2, [pc, #412]	; (8000d20 <MCAL_EXTIx_GetPinMapping+0x314>)
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8c:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000b90:	bf00      	nop
		}
		break;
 8000b92:	e169      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_5:
		switch ((uint32_t)GPIOx) {
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4a57      	ldr	r2, [pc, #348]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d003      	beq.n	8000ba4 <MCAL_EXTIx_GetPinMapping+0x198>
 8000b9c:	4a56      	ldr	r2, [pc, #344]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d008      	beq.n	8000bb4 <MCAL_EXTIx_GetPinMapping+0x1a8>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB5;
			break;
		default:
			break;
 8000ba2:	e00f      	b.n	8000bc4 <MCAL_EXTIx_GetPinMapping+0x1b8>
			GPIOxPinyEXTIz = EXTI_Mapping_PA5;
 8000ba4:	4a5f      	ldr	r2, [pc, #380]	; (8000d24 <MCAL_EXTIx_GetPinMapping+0x318>)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bae:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000bb2:	e007      	b.n	8000bc4 <MCAL_EXTIx_GetPinMapping+0x1b8>
			GPIOxPinyEXTIz = EXTI_Mapping_PB5;
 8000bb4:	4a5c      	ldr	r2, [pc, #368]	; (8000d28 <MCAL_EXTIx_GetPinMapping+0x31c>)
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbe:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000bc2:	bf00      	nop
		}
		break;
 8000bc4:	e150      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_6:
		switch ((uint32_t)GPIOx) {
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <MCAL_EXTIx_GetPinMapping+0x1ca>
 8000bce:	4a4a      	ldr	r2, [pc, #296]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d008      	beq.n	8000be6 <MCAL_EXTIx_GetPinMapping+0x1da>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB6;
			break;
		default:
			break;
 8000bd4:	e00f      	b.n	8000bf6 <MCAL_EXTIx_GetPinMapping+0x1ea>
			GPIOxPinyEXTIz = EXTI_Mapping_PA6;
 8000bd6:	4a55      	ldr	r2, [pc, #340]	; (8000d2c <MCAL_EXTIx_GetPinMapping+0x320>)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be0:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000be4:	e007      	b.n	8000bf6 <MCAL_EXTIx_GetPinMapping+0x1ea>
			GPIOxPinyEXTIz = EXTI_Mapping_PB6;
 8000be6:	4a52      	ldr	r2, [pc, #328]	; (8000d30 <MCAL_EXTIx_GetPinMapping+0x324>)
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf0:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000bf4:	bf00      	nop
		}
		break;
 8000bf6:	e137      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_7:
		switch ((uint32_t)GPIOx) {
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4a3e      	ldr	r2, [pc, #248]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d003      	beq.n	8000c08 <MCAL_EXTIx_GetPinMapping+0x1fc>
 8000c00:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d008      	beq.n	8000c18 <MCAL_EXTIx_GetPinMapping+0x20c>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB7;
			break;
		default:
			break;
 8000c06:	e00f      	b.n	8000c28 <MCAL_EXTIx_GetPinMapping+0x21c>
			GPIOxPinyEXTIz = EXTI_Mapping_PA7;
 8000c08:	4a4a      	ldr	r2, [pc, #296]	; (8000d34 <MCAL_EXTIx_GetPinMapping+0x328>)
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c12:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000c16:	e007      	b.n	8000c28 <MCAL_EXTIx_GetPinMapping+0x21c>
			GPIOxPinyEXTIz = EXTI_Mapping_PB7;
 8000c18:	4a47      	ldr	r2, [pc, #284]	; (8000d38 <MCAL_EXTIx_GetPinMapping+0x32c>)
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c22:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000c26:	bf00      	nop
		}
		break;
 8000c28:	e11e      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_8:
		switch ((uint32_t)GPIOx) {
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	4a31      	ldr	r2, [pc, #196]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d003      	beq.n	8000c3a <MCAL_EXTIx_GetPinMapping+0x22e>
 8000c32:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d008      	beq.n	8000c4a <MCAL_EXTIx_GetPinMapping+0x23e>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB8;
			break;
		default:
			break;
 8000c38:	e00f      	b.n	8000c5a <MCAL_EXTIx_GetPinMapping+0x24e>
			GPIOxPinyEXTIz = EXTI_Mapping_PA8;
 8000c3a:	4a40      	ldr	r2, [pc, #256]	; (8000d3c <MCAL_EXTIx_GetPinMapping+0x330>)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c44:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000c48:	e007      	b.n	8000c5a <MCAL_EXTIx_GetPinMapping+0x24e>
			GPIOxPinyEXTIz = EXTI_Mapping_PB8;
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <MCAL_EXTIx_GetPinMapping+0x334>)
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c54:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000c58:	bf00      	nop
		}
		break;
 8000c5a:	e105      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_9:
		switch ((uint32_t)GPIOx) {
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d003      	beq.n	8000c6c <MCAL_EXTIx_GetPinMapping+0x260>
 8000c64:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d008      	beq.n	8000c7c <MCAL_EXTIx_GetPinMapping+0x270>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB9;
			break;
		default:
			break;
 8000c6a:	e00f      	b.n	8000c8c <MCAL_EXTIx_GetPinMapping+0x280>
			GPIOxPinyEXTIz = EXTI_Mapping_PA9;
 8000c6c:	4a35      	ldr	r2, [pc, #212]	; (8000d44 <MCAL_EXTIx_GetPinMapping+0x338>)
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c76:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000c7a:	e007      	b.n	8000c8c <MCAL_EXTIx_GetPinMapping+0x280>
			GPIOxPinyEXTIz = EXTI_Mapping_PB9;
 8000c7c:	4a32      	ldr	r2, [pc, #200]	; (8000d48 <MCAL_EXTIx_GetPinMapping+0x33c>)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c86:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000c8a:	bf00      	nop
		}
		break;
 8000c8c:	e0ec      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_10:
		switch ((uint32_t)GPIOx) {
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d003      	beq.n	8000c9e <MCAL_EXTIx_GetPinMapping+0x292>
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d008      	beq.n	8000cae <MCAL_EXTIx_GetPinMapping+0x2a2>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB10;
			break;
		default:
			break;
 8000c9c:	e00f      	b.n	8000cbe <MCAL_EXTIx_GetPinMapping+0x2b2>
			GPIOxPinyEXTIz = EXTI_Mapping_PA10;
 8000c9e:	4a2b      	ldr	r2, [pc, #172]	; (8000d4c <MCAL_EXTIx_GetPinMapping+0x340>)
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ca8:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000cac:	e007      	b.n	8000cbe <MCAL_EXTIx_GetPinMapping+0x2b2>
			GPIOxPinyEXTIz = EXTI_Mapping_PB10;
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <MCAL_EXTIx_GetPinMapping+0x344>)
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb8:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000cbc:	bf00      	nop
		}
		break;
 8000cbe:	e0d3      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_11:
		switch ((uint32_t)GPIOx) {
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <MCAL_EXTIx_GetPinMapping+0x2e8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d003      	beq.n	8000cd0 <MCAL_EXTIx_GetPinMapping+0x2c4>
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <MCAL_EXTIx_GetPinMapping+0x2ec>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d008      	beq.n	8000ce0 <MCAL_EXTIx_GetPinMapping+0x2d4>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB11;
			break;
		default:
			break;
 8000cce:	e00f      	b.n	8000cf0 <MCAL_EXTIx_GetPinMapping+0x2e4>
			GPIOxPinyEXTIz = EXTI_Mapping_PA11;
 8000cd0:	4a20      	ldr	r2, [pc, #128]	; (8000d54 <MCAL_EXTIx_GetPinMapping+0x348>)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cda:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000cde:	e007      	b.n	8000cf0 <MCAL_EXTIx_GetPinMapping+0x2e4>
			GPIOxPinyEXTIz = EXTI_Mapping_PB11;
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <MCAL_EXTIx_GetPinMapping+0x34c>)
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cea:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000cee:	bf00      	nop
		}
		break;
 8000cf0:	e0ba      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00
 8000cfc:	40011400 	.word	0x40011400
 8000d00:	080026bc 	.word	0x080026bc
 8000d04:	080026c4 	.word	0x080026c4
 8000d08:	080026cc 	.word	0x080026cc
 8000d0c:	080026d4 	.word	0x080026d4
 8000d10:	080026dc 	.word	0x080026dc
 8000d14:	080026e4 	.word	0x080026e4
 8000d18:	080026ec 	.word	0x080026ec
 8000d1c:	080026f4 	.word	0x080026f4
 8000d20:	080026fc 	.word	0x080026fc
 8000d24:	08002704 	.word	0x08002704
 8000d28:	0800270c 	.word	0x0800270c
 8000d2c:	08002714 	.word	0x08002714
 8000d30:	0800271c 	.word	0x0800271c
 8000d34:	08002724 	.word	0x08002724
 8000d38:	0800272c 	.word	0x0800272c
 8000d3c:	08002734 	.word	0x08002734
 8000d40:	0800273c 	.word	0x0800273c
 8000d44:	08002744 	.word	0x08002744
 8000d48:	0800274c 	.word	0x0800274c
 8000d4c:	08002754 	.word	0x08002754
 8000d50:	0800275c 	.word	0x0800275c
 8000d54:	08002764 	.word	0x08002764
 8000d58:	0800276c 	.word	0x0800276c
	case GPIO_PIN_12:
		switch ((uint32_t)GPIOx) {
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4a49      	ldr	r2, [pc, #292]	; (8000e84 <MCAL_EXTIx_GetPinMapping+0x478>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d003      	beq.n	8000d6c <MCAL_EXTIx_GetPinMapping+0x360>
 8000d64:	4a48      	ldr	r2, [pc, #288]	; (8000e88 <MCAL_EXTIx_GetPinMapping+0x47c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d008      	beq.n	8000d7c <MCAL_EXTIx_GetPinMapping+0x370>
			break;
		case (uint32_t)GPIOB:
			GPIOxPinyEXTIz = EXTI_Mapping_PB12;
			break;
		default:
			break;
 8000d6a:	e00f      	b.n	8000d8c <MCAL_EXTIx_GetPinMapping+0x380>
			GPIOxPinyEXTIz = EXTI_Mapping_PA12;
 8000d6c:	4a47      	ldr	r2, [pc, #284]	; (8000e8c <MCAL_EXTIx_GetPinMapping+0x480>)
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d76:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000d7a:	e007      	b.n	8000d8c <MCAL_EXTIx_GetPinMapping+0x380>
			GPIOxPinyEXTIz = EXTI_Mapping_PB12;
 8000d7c:	4a44      	ldr	r2, [pc, #272]	; (8000e90 <MCAL_EXTIx_GetPinMapping+0x484>)
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d86:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000d8a:	bf00      	nop
		}
		break;
 8000d8c:	e06c      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_13:
		switch ((uint32_t)GPIOx) {
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <MCAL_EXTIx_GetPinMapping+0x47c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00e      	beq.n	8000db4 <MCAL_EXTIx_GetPinMapping+0x3a8>
 8000d96:	4a3f      	ldr	r2, [pc, #252]	; (8000e94 <MCAL_EXTIx_GetPinMapping+0x488>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d013      	beq.n	8000dc4 <MCAL_EXTIx_GetPinMapping+0x3b8>
 8000d9c:	4a39      	ldr	r2, [pc, #228]	; (8000e84 <MCAL_EXTIx_GetPinMapping+0x478>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d000      	beq.n	8000da4 <MCAL_EXTIx_GetPinMapping+0x398>
			break;
		case (uint32_t)GPIOC:
			GPIOxPinyEXTIz = EXTI_Mapping_PC13;
			break;
		default:
			break;
 8000da2:	e017      	b.n	8000dd4 <MCAL_EXTIx_GetPinMapping+0x3c8>
			GPIOxPinyEXTIz = EXTI_Mapping_PA13;
 8000da4:	4a3c      	ldr	r2, [pc, #240]	; (8000e98 <MCAL_EXTIx_GetPinMapping+0x48c>)
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dae:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000db2:	e00f      	b.n	8000dd4 <MCAL_EXTIx_GetPinMapping+0x3c8>
			GPIOxPinyEXTIz = EXTI_Mapping_PB13;
 8000db4:	4a39      	ldr	r2, [pc, #228]	; (8000e9c <MCAL_EXTIx_GetPinMapping+0x490>)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dbe:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000dc2:	e007      	b.n	8000dd4 <MCAL_EXTIx_GetPinMapping+0x3c8>
			GPIOxPinyEXTIz = EXTI_Mapping_PC13;
 8000dc4:	4a36      	ldr	r2, [pc, #216]	; (8000ea0 <MCAL_EXTIx_GetPinMapping+0x494>)
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dce:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000dd2:	bf00      	nop
		}
		break;
 8000dd4:	e048      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_14:
		switch ((uint32_t)GPIOx) {
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	4a2b      	ldr	r2, [pc, #172]	; (8000e88 <MCAL_EXTIx_GetPinMapping+0x47c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00e      	beq.n	8000dfc <MCAL_EXTIx_GetPinMapping+0x3f0>
 8000dde:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <MCAL_EXTIx_GetPinMapping+0x488>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <MCAL_EXTIx_GetPinMapping+0x400>
 8000de4:	4a27      	ldr	r2, [pc, #156]	; (8000e84 <MCAL_EXTIx_GetPinMapping+0x478>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d000      	beq.n	8000dec <MCAL_EXTIx_GetPinMapping+0x3e0>
			break;
		case (uint32_t)GPIOC:
			GPIOxPinyEXTIz = EXTI_Mapping_PC14;
			break;
		default:
			break;
 8000dea:	e017      	b.n	8000e1c <MCAL_EXTIx_GetPinMapping+0x410>
			GPIOxPinyEXTIz = EXTI_Mapping_PA14;
 8000dec:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <MCAL_EXTIx_GetPinMapping+0x498>)
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df6:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000dfa:	e00f      	b.n	8000e1c <MCAL_EXTIx_GetPinMapping+0x410>
			GPIOxPinyEXTIz = EXTI_Mapping_PB14;
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <MCAL_EXTIx_GetPinMapping+0x49c>)
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e06:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000e0a:	e007      	b.n	8000e1c <MCAL_EXTIx_GetPinMapping+0x410>
			GPIOxPinyEXTIz = EXTI_Mapping_PC14;
 8000e0c:	4a27      	ldr	r2, [pc, #156]	; (8000eac <MCAL_EXTIx_GetPinMapping+0x4a0>)
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e16:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000e1a:	bf00      	nop
		}
		break;
 8000e1c:	e024      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
	case GPIO_PIN_15:
		switch ((uint32_t)GPIOx) {
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <MCAL_EXTIx_GetPinMapping+0x47c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00e      	beq.n	8000e44 <MCAL_EXTIx_GetPinMapping+0x438>
 8000e26:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <MCAL_EXTIx_GetPinMapping+0x488>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d013      	beq.n	8000e54 <MCAL_EXTIx_GetPinMapping+0x448>
 8000e2c:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MCAL_EXTIx_GetPinMapping+0x478>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d000      	beq.n	8000e34 <MCAL_EXTIx_GetPinMapping+0x428>
			break;
		case (uint32_t)GPIOC:
			GPIOxPinyEXTIz = EXTI_Mapping_PC15;
			break;
		default:
			break;
 8000e32:	e017      	b.n	8000e64 <MCAL_EXTIx_GetPinMapping+0x458>
			GPIOxPinyEXTIz = EXTI_Mapping_PA15;
 8000e34:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <MCAL_EXTIx_GetPinMapping+0x4a4>)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e3e:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000e42:	e00f      	b.n	8000e64 <MCAL_EXTIx_GetPinMapping+0x458>
			GPIOxPinyEXTIz = EXTI_Mapping_PB15;
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <MCAL_EXTIx_GetPinMapping+0x4a8>)
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e4e:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000e52:	e007      	b.n	8000e64 <MCAL_EXTIx_GetPinMapping+0x458>
			GPIOxPinyEXTIz = EXTI_Mapping_PC15;
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <MCAL_EXTIx_GetPinMapping+0x4ac>)
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e5e:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000e62:	bf00      	nop
		}
		break;
 8000e64:	e000      	b.n	8000e68 <MCAL_EXTIx_GetPinMapping+0x45c>
		default:
			break;
 8000e66:	bf00      	nop
	}
	return GPIOxPinyEXTIz;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e74:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	08002774 	.word	0x08002774
 8000e90:	0800277c 	.word	0x0800277c
 8000e94:	40011000 	.word	0x40011000
 8000e98:	08002784 	.word	0x08002784
 8000e9c:	0800278c 	.word	0x0800278c
 8000ea0:	08002794 	.word	0x08002794
 8000ea4:	0800279c 	.word	0x0800279c
 8000ea8:	080027a4 	.word	0x080027a4
 8000eac:	080027ac 	.word	0x080027ac
 8000eb0:	080027b4 	.word	0x080027b4
 8000eb4:	080027bc 	.word	0x080027bc
 8000eb8:	080027c4 	.word	0x080027c4

08000ebc <NVIC_EXTIx_Enable>:
	}
	while(i < 15)
		PF[i++] = NULL;
}

void NVIC_EXTIx_Enable(uint8_t EXTIx){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	switch(EXTIx){
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d85e      	bhi.n	8000f8a <NVIC_EXTIx_Enable+0xce>
 8000ecc:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <NVIC_EXTIx_Enable+0x18>)
 8000ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed2:	bf00      	nop
 8000ed4:	08000f15 	.word	0x08000f15
 8000ed8:	08000f23 	.word	0x08000f23
 8000edc:	08000f31 	.word	0x08000f31
 8000ee0:	08000f3f 	.word	0x08000f3f
 8000ee4:	08000f4d 	.word	0x08000f4d
 8000ee8:	08000f5b 	.word	0x08000f5b
 8000eec:	08000f5b 	.word	0x08000f5b
 8000ef0:	08000f5b 	.word	0x08000f5b
 8000ef4:	08000f5b 	.word	0x08000f5b
 8000ef8:	08000f5b 	.word	0x08000f5b
 8000efc:	08000f73 	.word	0x08000f73
 8000f00:	08000f73 	.word	0x08000f73
 8000f04:	08000f73 	.word	0x08000f73
 8000f08:	08000f73 	.word	0x08000f73
 8000f0c:	08000f73 	.word	0x08000f73
 8000f10:	08000f73 	.word	0x08000f73
	case EXTI_Line_0 :
		NVIC->ISER[NVIC_EXTI0_IRQ_Line / register_Size] |= (1<< NVIC_EXTI0_IRQ_Line % register_Size);
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1e:	6013      	str	r3, [r2, #0]
		break;
 8000f20:	e033      	b.n	8000f8a <NVIC_EXTIx_Enable+0xce>
	case EXTI_Line_1 :
		NVIC->ISER[NVIC_EXTI1_IRQ_Line / register_Size] |= (1<< NVIC_EXTI1_IRQ_Line % register_Size);
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6013      	str	r3, [r2, #0]
		break;
 8000f2e:	e02c      	b.n	8000f8a <NVIC_EXTIx_Enable+0xce>
	case EXTI_Line_2 :
		NVIC->ISER[NVIC_EXTI2_IRQ_Line / register_Size] |= (1<< NVIC_EXTI2_IRQ_Line % register_Size);
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
		break;
 8000f3c:	e025      	b.n	8000f8a <NVIC_EXTIx_Enable+0xce>
	case EXTI_Line_3 :
		NVIC->ISER[NVIC_EXTI3_IRQ_Line / register_Size] |= (1<< NVIC_EXTI3_IRQ_Line % register_Size);
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f48:	6013      	str	r3, [r2, #0]
		break;
 8000f4a:	e01e      	b.n	8000f8a <NVIC_EXTIx_Enable+0xce>
	case EXTI_Line_4 :
		NVIC->ISER[NVIC_EXTI4_IRQ_Line / register_Size] |= (1<< NVIC_EXTI4_IRQ_Line % register_Size);
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f56:	6013      	str	r3, [r2, #0]
		break;
 8000f58:	e017      	b.n	8000f8a <NVIC_EXTIx_Enable+0xce>
	case EXTI_Line_5 :
	case EXTI_Line_6 :
	case EXTI_Line_7 :
	case EXTI_Line_8 :
	case EXTI_Line_9 :
		Enabled_Interrupts[EXTIx - 5] = 1;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	3b05      	subs	r3, #5
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <NVIC_EXTIx_Enable+0xdc>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	54d1      	strb	r1, [r2, r3]
		NVIC->ISER[NVIC_EXTI9_5_IRQ_Line / register_Size] |= (1<< NVIC_EXTI9_5_IRQ_Line % register_Size);
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f6e:	6013      	str	r3, [r2, #0]
		break;
 8000f70:	e00b      	b.n	8000f8a <NVIC_EXTIx_Enable+0xce>
	case EXTI_Line_11:
	case EXTI_Line_12:
	case EXTI_Line_13:
	case EXTI_Line_14:
	case EXTI_Line_15:
		Enabled_Interrupts[EXTIx - 5] = 1;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	3b05      	subs	r3, #5
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <NVIC_EXTIx_Enable+0xdc>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	54d1      	strb	r1, [r2, r3]
		NVIC->ISER[NVIC_EXTI15_10_IRQ_Line/register_Size] |= (1<< NVIC_EXTI15_10_IRQ_Line % register_Size);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <NVIC_EXTIx_Enable+0xd8>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6053      	str	r3, [r2, #4]
		break;
 8000f88:	bf00      	nop
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	200000c0 	.word	0x200000c0

08000f9c <NVIC_EXTIx_Disable>:
void NVIC_EXTIx_Disable(uint8_t EXTIx){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	switch(EXTIx){
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	f200 808c 	bhi.w	80010ca <NVIC_EXTIx_Disable+0x12e>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <NVIC_EXTIx_Disable+0x1c>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08000ff9 	.word	0x08000ff9
 8000fbc:	0800100b 	.word	0x0800100b
 8000fc0:	0800101d 	.word	0x0800101d
 8000fc4:	0800102f 	.word	0x0800102f
 8000fc8:	08001041 	.word	0x08001041
 8000fcc:	08001053 	.word	0x08001053
 8000fd0:	08001053 	.word	0x08001053
 8000fd4:	08001053 	.word	0x08001053
 8000fd8:	08001053 	.word	0x08001053
 8000fdc:	08001053 	.word	0x08001053
 8000fe0:	0800108b 	.word	0x0800108b
 8000fe4:	0800108b 	.word	0x0800108b
 8000fe8:	0800108b 	.word	0x0800108b
 8000fec:	0800108b 	.word	0x0800108b
 8000ff0:	0800108b 	.word	0x0800108b
 8000ff4:	0800108b 	.word	0x0800108b
	case EXTI_Line_0 :
		NVIC->ICER[NVIC_EXTI0_IRQ_Line / register_Size] |= (1<< NVIC_EXTI0_IRQ_Line % register_Size);
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8000ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ffe:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8001000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001004:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		break;
 8001008:	e05f      	b.n	80010ca <NVIC_EXTIx_Disable+0x12e>
	case EXTI_Line_1 :
		NVIC->ICER[NVIC_EXTI1_IRQ_Line / register_Size] |= (1<< NVIC_EXTI1_IRQ_Line % register_Size);
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 800100c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001010:	4a30      	ldr	r2, [pc, #192]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8001012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001016:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		break;
 800101a:	e056      	b.n	80010ca <NVIC_EXTIx_Disable+0x12e>
	case EXTI_Line_2 :
		NVIC->ICER[NVIC_EXTI2_IRQ_Line / register_Size] |= (1<< NVIC_EXTI2_IRQ_Line % register_Size);
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 800101e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001022:	4a2c      	ldr	r2, [pc, #176]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		break;
 800102c:	e04d      	b.n	80010ca <NVIC_EXTIx_Disable+0x12e>
	case EXTI_Line_3 :
		NVIC->ICER[NVIC_EXTI3_IRQ_Line / register_Size] |= (1<< NVIC_EXTI3_IRQ_Line % register_Size);
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8001030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		break;
 800103e:	e044      	b.n	80010ca <NVIC_EXTIx_Disable+0x12e>
	case EXTI_Line_4 :
		NVIC->ICER[NVIC_EXTI4_IRQ_Line / register_Size] |= (1<< NVIC_EXTI4_IRQ_Line % register_Size);
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8001042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001046:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8001048:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		break;
 8001050:	e03b      	b.n	80010ca <NVIC_EXTIx_Disable+0x12e>
	case EXTI_Line_5 :
	case EXTI_Line_6 :
	case EXTI_Line_7 :
	case EXTI_Line_8 :
	case EXTI_Line_9 :
		Enabled_Interrupts[EXTIx - 5] = 0;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3b05      	subs	r3, #5
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <NVIC_EXTIx_Disable+0x13c>)
 8001058:	2100      	movs	r1, #0
 800105a:	54d1      	strb	r1, [r2, r3]
		for(i = 0 ; i < 5 ; i++){
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e007      	b.n	8001072 <NVIC_EXTIx_Disable+0xd6>
			if(Enabled_Interrupts[i] == 1) /*there is an active interrupt*/
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <NVIC_EXTIx_Disable+0x13c>)
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d02b      	beq.n	80010c4 <NVIC_EXTIx_Disable+0x128>
		for(i = 0 ; i < 5 ; i++){
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b04      	cmp	r3, #4
 8001076:	d9f4      	bls.n	8001062 <NVIC_EXTIx_Disable+0xc6>
				return;
		}
		NVIC->ICER[NVIC_EXTI9_5_IRQ_Line / register_Size] |= (1<< NVIC_EXTI9_5_IRQ_Line % register_Size);
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 800107a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 8001080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001084:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		break;
 8001088:	e01f      	b.n	80010ca <NVIC_EXTIx_Disable+0x12e>
	case EXTI_Line_11:
	case EXTI_Line_12:
	case EXTI_Line_13:
	case EXTI_Line_14:
	case EXTI_Line_15:
		Enabled_Interrupts[EXTIx - 5] = 0;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	3b05      	subs	r3, #5
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <NVIC_EXTIx_Disable+0x13c>)
 8001090:	2100      	movs	r1, #0
 8001092:	54d1      	strb	r1, [r2, r3]
		for(i = 5 ; i < 11 ; i++){
 8001094:	2305      	movs	r3, #5
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e007      	b.n	80010aa <NVIC_EXTIx_Disable+0x10e>
			if(Enabled_Interrupts[i] == 1) /*there is an active interrupt*/
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <NVIC_EXTIx_Disable+0x13c>)
 800109e:	5cd3      	ldrb	r3, [r2, r3]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d011      	beq.n	80010c8 <NVIC_EXTIx_Disable+0x12c>
		for(i = 5 ; i < 11 ; i++){
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b0a      	cmp	r3, #10
 80010ae:	d9f4      	bls.n	800109a <NVIC_EXTIx_Disable+0xfe>
				return;
		}
		NVIC->ICER[NVIC_EXTI15_10_IRQ_Line/register_Size] |= (1<< NVIC_EXTI15_10_IRQ_Line % register_Size);
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <NVIC_EXTIx_Disable+0x138>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		break;
 80010c0:	bf00      	nop
 80010c2:	e002      	b.n	80010ca <NVIC_EXTIx_Disable+0x12e>
				return;
 80010c4:	bf00      	nop
 80010c6:	e000      	b.n	80010ca <NVIC_EXTIx_Disable+0x12e>
				return;
 80010c8:	bf00      	nop
	}
}
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	200000c0 	.word	0x200000c0

080010dc <EXTI0_IRQHandler>:

/*EXTIs Interrupt Handlers @ref "startup_stm32f103c6tx.s" */
void EXTI0_IRQHandler(void){ /* EXTI Line0 interrupt */
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI_Line_0);
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <EXTI0_IRQHandler+0x1c>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <EXTI0_IRQHandler+0x1c>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6153      	str	r3, [r2, #20]
	PF[0]();
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <EXTI0_IRQHandler+0x20>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4798      	blx	r3
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010400 	.word	0x40010400
 80010fc:	20000084 	.word	0x20000084

08001100 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){ /* EXTI Line1 interrupt */
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI_Line_1); /*remove the pending bit*/
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <EXTI1_IRQHandler+0x1c>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <EXTI1_IRQHandler+0x1c>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	6153      	str	r3, [r2, #20]
	PF[1](); /*Call the CallBack Function*/
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <EXTI1_IRQHandler+0x20>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4798      	blx	r3
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010400 	.word	0x40010400
 8001120:	20000084 	.word	0x20000084

08001124 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){ /* EXTI Line2 interrupt */
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI_Line_2); /*remove the pending bit*/
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <EXTI2_IRQHandler+0x1c>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <EXTI2_IRQHandler+0x1c>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6153      	str	r3, [r2, #20]
	PF[2](); /*Call the CallBack Function*/
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <EXTI2_IRQHandler+0x20>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4798      	blx	r3
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40010400 	.word	0x40010400
 8001144:	20000084 	.word	0x20000084

08001148 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){ /* EXTI Line3 interrupt */
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI_Line_3); /*remove the pending bit*/
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <EXTI3_IRQHandler+0x1c>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <EXTI3_IRQHandler+0x1c>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6153      	str	r3, [r2, #20]
	PF[3](); /*Call the CallBack Function*/
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <EXTI3_IRQHandler+0x20>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4798      	blx	r3
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40010400 	.word	0x40010400
 8001168:	20000084 	.word	0x20000084

0800116c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){ /* EXTI Line4 interrupt */
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI_Line_4);/*remove the pending bit*/
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <EXTI4_IRQHandler+0x1c>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <EXTI4_IRQHandler+0x1c>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6153      	str	r3, [r2, #20]
	PF[4](); /*Call the CallBack Function*/
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <EXTI4_IRQHandler+0x20>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4798      	blx	r3
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010400 	.word	0x40010400
 800118c:	20000084 	.word	0x20000084

08001190 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){ /* EXTI Line5-9 interrupt */
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint8_t i = 5; /*iterator*/
 8001196:	2305      	movs	r3, #5
 8001198:	71fb      	strb	r3, [r7, #7]
	while(i < 10){
 800119a:	e01b      	b.n	80011d4 <EXTI9_5_IRQHandler+0x44>
		if(EXTI->PR & (1 << i)){ /*iterate to find which line caused the interrupt*/
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <EXTI9_5_IRQHandler+0x54>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00f      	beq.n	80011ce <EXTI9_5_IRQHandler+0x3e>
			EXTI->PR |= (1<<i); /*remove the pending bit*/
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <EXTI9_5_IRQHandler+0x54>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	79fa      	ldrb	r2, [r7, #7]
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	4611      	mov	r1, r2
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <EXTI9_5_IRQHandler+0x54>)
 80011be:	430b      	orrs	r3, r1
 80011c0:	6153      	str	r3, [r2, #20]
			PF[i](); /*Call the CallBack Function*/
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <EXTI9_5_IRQHandler+0x58>)
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	4798      	blx	r3
			break;
 80011cc:	e005      	b.n	80011da <EXTI9_5_IRQHandler+0x4a>
		}
		i++;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	3301      	adds	r3, #1
 80011d2:	71fb      	strb	r3, [r7, #7]
	while(i < 10){
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b09      	cmp	r3, #9
 80011d8:	d9e0      	bls.n	800119c <EXTI9_5_IRQHandler+0xc>
	}
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40010400 	.word	0x40010400
 80011e8:	20000084 	.word	0x20000084

080011ec <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){ /* EXTI Line10-15 interrupt */
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	uint8_t i = 10; /*iterator*/
 80011f2:	230a      	movs	r3, #10
 80011f4:	71fb      	strb	r3, [r7, #7]
	while(i < 16){
 80011f6:	e01b      	b.n	8001230 <EXTI15_10_IRQHandler+0x44>
		if(EXTI->PR & (1 << i)){ /*iterate to find which line caused the interrupt*/
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <EXTI15_10_IRQHandler+0x54>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00f      	beq.n	800122a <EXTI15_10_IRQHandler+0x3e>
			EXTI->PR |= (1<<i); /*remove the pending bit*/
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <EXTI15_10_IRQHandler+0x54>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	4611      	mov	r1, r2
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <EXTI15_10_IRQHandler+0x54>)
 800121a:	430b      	orrs	r3, r1
 800121c:	6153      	str	r3, [r2, #20]
			PF[i](); /*Call the CallBack Function*/
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <EXTI15_10_IRQHandler+0x58>)
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	4798      	blx	r3
			break;
 8001228:	e005      	b.n	8001236 <EXTI15_10_IRQHandler+0x4a>
		}
		i++;
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	3301      	adds	r3, #1
 800122e:	71fb      	strb	r3, [r7, #7]
	while(i < 16){
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	d9e0      	bls.n	80011f8 <EXTI15_10_IRQHandler+0xc>
	}
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40010400 	.word	0x40010400
 8001244:	20000084 	.word	0x20000084

08001248 <MCAL_GPIO_Init>:
 * 				  Can be a value of GPIO[A,B,C,D]
 * @Param [in]	- pinConfig: a pointer to a structure that contains pin configuration
 * @returnValue - None
 * Note			- None
 */
void MCAL_GPIO_Init(GPIO_T* GPIOx, GPIO_PinConfig_t* pinConfig){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	assert(pinConfig->pinNumber <= GPIO_PIN_15); /*GPIO has only 16 pin*/
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	d905      	bls.n	8001266 <MCAL_GPIO_Init+0x1e>
 800125a:	4b69      	ldr	r3, [pc, #420]	; (8001400 <MCAL_GPIO_Init+0x1b8>)
 800125c:	4a69      	ldr	r2, [pc, #420]	; (8001404 <MCAL_GPIO_Init+0x1bc>)
 800125e:	2115      	movs	r1, #21
 8001260:	4869      	ldr	r0, [pc, #420]	; (8001408 <MCAL_GPIO_Init+0x1c0>)
 8001262:	f000 fa2f 	bl	80016c4 <__assert_func>
	volatile uint32_t *gpioConfigReg =  pinConfig->pinNumber < 8 ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b07      	cmp	r3, #7
 800126c:	d801      	bhi.n	8001272 <MCAL_GPIO_Init+0x2a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e001      	b.n	8001276 <MCAL_GPIO_Init+0x2e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3304      	adds	r3, #4
 8001276:	60fb      	str	r3, [r7, #12]

	switch (pinConfig->pinMode) {
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	2b07      	cmp	r3, #7
 800127e:	f200 80b9 	bhi.w	80013f4 <MCAL_GPIO_Init+0x1ac>
 8001282:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <MCAL_GPIO_Init+0x40>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	080012a9 	.word	0x080012a9
 800128c:	080012a9 	.word	0x080012a9
 8001290:	080012a9 	.word	0x080012a9
 8001294:	080012a9 	.word	0x080012a9
 8001298:	08001319 	.word	0x08001319
 800129c:	08001319 	.word	0x08001319
 80012a0:	08001357 	.word	0x08001357
 80012a4:	080013a7 	.word	0x080013a7
	case GPIO_PIN_MODE_Out_PushPull:
	case GPIO_PIN_MODE_Out_OpenDrain:
	case GPIO_PIN_MODE_AF_Out_PushPull:
	case GPIO_PIN_MODE_AF_Out_OpenDrain:
		/*GPIO speed must be <= 50MHZ*/
		assert(pinConfig->pinOutSpeed <= GPIO_PIN_OUT_SPEED_50MHZ);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	789b      	ldrb	r3, [r3, #2]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d905      	bls.n	80012bc <MCAL_GPIO_Init+0x74>
 80012b0:	4b56      	ldr	r3, [pc, #344]	; (800140c <MCAL_GPIO_Init+0x1c4>)
 80012b2:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MCAL_GPIO_Init+0x1bc>)
 80012b4:	211e      	movs	r1, #30
 80012b6:	4854      	ldr	r0, [pc, #336]	; (8001408 <MCAL_GPIO_Init+0x1c0>)
 80012b8:	f000 fa04 	bl	80016c4 <__assert_func>
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	f002 0207 	and.w	r2, r2, #7
 80012c8:	0092      	lsls	r2, r2, #2
 80012ca:	210f      	movs	r1, #15
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	43d2      	mvns	r2, r2
 80012d2:	401a      	ands	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	601a      	str	r2, [r3, #0]
		/*MODE[1:0]*/
		*gpioConfigReg |= (pinConfig->pinOutSpeed << ((pinConfig->pinNumber % GPIO_PIN_8) * 4));
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	7892      	ldrb	r2, [r2, #2]
 80012e0:	4611      	mov	r1, r2
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	f002 0207 	and.w	r2, r2, #7
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	431a      	orrs	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	601a      	str	r2, [r3, #0]
		/*CNF[1:0]*/
		*gpioConfigReg |= (pinConfig->pinMode << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	7852      	ldrb	r2, [r2, #1]
 80012fe:	4611      	mov	r1, r2
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	f002 0207 	and.w	r2, r2, #7
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	431a      	orrs	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	601a      	str	r2, [r3, #0]
		break;
 8001316:	e06e      	b.n	80013f6 <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_Analog:
	case GPIO_PIN_MODE_IN_Floating:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	7812      	ldrb	r2, [r2, #0]
 8001320:	f002 0207 	and.w	r2, r2, #7
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	210f      	movs	r1, #15
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	43d2      	mvns	r2, r2
 800132e:	401a      	ands	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	601a      	str	r2, [r3, #0]
		/*CNF[1:0]*/
		*gpioConfigReg |= ((pinConfig->pinMode-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	7852      	ldrb	r2, [r2, #1]
 800133c:	1f11      	subs	r1, r2, #4
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	f002 0207 	and.w	r2, r2, #7
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	431a      	orrs	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]
		break;
 8001354:	e04f      	b.n	80013f6 <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_PullDown:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	f002 0207 	and.w	r2, r2, #7
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	210f      	movs	r1, #15
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	43d2      	mvns	r2, r2
 800136c:	401a      	ands	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	601a      	str	r2, [r3, #0]
		/*CNF[1:0] = 2 & ODR = 0*/
		*gpioConfigReg |= ((GPIO_PIN_MODE_IN_PullDown-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	f002 0207 	and.w	r2, r2, #7
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	2102      	movs	r1, #2
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	431a      	orrs	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]
		GPIOx->ODR &= ~(1<<pinConfig->pinNumber);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	4611      	mov	r1, r2
 8001398:	2201      	movs	r2, #1
 800139a:	408a      	lsls	r2, r1
 800139c:	43d2      	mvns	r2, r2
 800139e:	401a      	ands	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	60da      	str	r2, [r3, #12]
		break;
 80013a4:	e027      	b.n	80013f6 <MCAL_GPIO_Init+0x1ae>
	case GPIO_PIN_MODE_IN_PullUp:
		/*Reset Mode[1:0] & CNF[1:0]*/
		*gpioConfigReg &= ~(0xF << ((pinConfig->pinNumber % GPIO_PIN_8)*4));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	f002 0207 	and.w	r2, r2, #7
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	210f      	movs	r1, #15
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	43d2      	mvns	r2, r2
 80013bc:	401a      	ands	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]
		/*CNF[1:0] = 2 & ODR = 1*/
		*gpioConfigReg |= ((GPIO_PIN_MODE_IN_PullDown-4) << ((pinConfig->pinNumber % GPIO_PIN_8) * 4) << 2);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	f002 0207 	and.w	r2, r2, #7
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	2102      	movs	r1, #2
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	431a      	orrs	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	601a      	str	r2, [r3, #0]
		GPIOx->ODR |= (1<<pinConfig->pinNumber);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	4611      	mov	r1, r2
 80013e8:	2201      	movs	r2, #1
 80013ea:	408a      	lsls	r2, r1
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60da      	str	r2, [r3, #12]
		break;
 80013f2:	e000      	b.n	80013f6 <MCAL_GPIO_Init+0x1ae>
	default:
		break;
 80013f4:	bf00      	nop
	}

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	080027cc 	.word	0x080027cc
 8001404:	080028b4 	.word	0x080028b4
 8001408:	080027f0 	.word	0x080027f0
 800140c:	08002828 	.word	0x08002828

08001410 <MCAL_GPIO_WritePin>:
 * @Param [in]	- val : the value to be written on the pin
 * 				  Can be a value of @ref GPIO_PIN_Value_define
 * @returnValue	- None
 * Notes		- None
 */
void MCAL_GPIO_WritePin(GPIO_T* GPIOx, uint8_t pinNumber,uint8_t val){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
 800141c:	4613      	mov	r3, r2
 800141e:	70bb      	strb	r3, [r7, #2]
	assert(pinNumber <= GPIO_PIN_15);  /*GPIO has only 16 pin*/
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d905      	bls.n	8001432 <MCAL_GPIO_WritePin+0x22>
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MCAL_GPIO_WritePin+0x58>)
 8001428:	4a10      	ldr	r2, [pc, #64]	; (800146c <MCAL_GPIO_WritePin+0x5c>)
 800142a:	2185      	movs	r1, #133	; 0x85
 800142c:	4810      	ldr	r0, [pc, #64]	; (8001470 <MCAL_GPIO_WritePin+0x60>)
 800142e:	f000 f949 	bl	80016c4 <__assert_func>
	switch(val){
 8001432:	78bb      	ldrb	r3, [r7, #2]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00a      	beq.n	800144e <MCAL_GPIO_WritePin+0x3e>
 8001438:	2b01      	cmp	r3, #1
 800143a:	d000      	beq.n	800143e <MCAL_GPIO_WritePin+0x2e>
	case GPIO_PIN_Value_Low:
		GPIOx->BRR = (1 << pinNumber);
		break;
	default:
		/*do nothing*/
		break;
 800143c:	e00f      	b.n	800145e <MCAL_GPIO_WritePin+0x4e>
		GPIOx->BSRR = (1 << pinNumber);
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	2201      	movs	r2, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	611a      	str	r2, [r3, #16]
		break;
 800144c:	e007      	b.n	800145e <MCAL_GPIO_WritePin+0x4e>
		GPIOx->BRR = (1 << pinNumber);
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2201      	movs	r2, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	615a      	str	r2, [r3, #20]
		break;
 800145c:	bf00      	nop
	}
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800285c 	.word	0x0800285c
 800146c:	080028c4 	.word	0x080028c4
 8001470:	080027f0 	.word	0x080027f0

08001474 <main>:

#include "LCD.h"
#include "Button.h"
void wait(uint32_t);
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	LCD_Config_t LCD_Config;
	LCD_Config.Display_control = Display_Control_D_On_C_On_B_On;
 800147a:	230f      	movs	r3, #15
 800147c:	717b      	strb	r3, [r7, #5]
	LCD_Config.Entry_mode      = Entry_Mode_Inc_No_S;
 800147e:	2306      	movs	r3, #6
 8001480:	71bb      	strb	r3, [r7, #6]
	LCD_Config.function_set    = Function_Set_4bit_2line_5x8;
 8001482:	2328      	movs	r3, #40	; 0x28
 8001484:	713b      	strb	r3, [r7, #4]
	LCD_Init(&LCD_Config);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe fe71 	bl	8000170 <LCD_Init>
	Button_Init();
 800148e:	f7ff f977 	bl	8000780 <Button_Init>
	IRQ_happened = 1;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <main+0x48>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
	/* Loop forever */
	for(;;){
		if(IRQ_happened){
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <main+0x48>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0fb      	beq.n	8001498 <main+0x24>
			IRQ_happened = 0;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <main+0x48>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
			wait(3000);
 80014a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014aa:	f000 f809 	bl	80014c0 <wait>
			LCD_Write_Command(LCD_Clear);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7fe ff8e 	bl	80003d0 <LCD_Write_Command>
			LCD_Write_Command(LCD_Return_Home);
 80014b4:	2002      	movs	r0, #2
 80014b6:	f7fe ff8b 	bl	80003d0 <LCD_Write_Command>
		if(IRQ_happened){
 80014ba:	e7ed      	b.n	8001498 <main+0x24>
 80014bc:	20000082 	.word	0x20000082

080014c0 <wait>:
		}
	}
}
void wait(uint32_t time){
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	uint8_t i ;
	while(time--){
 80014c8:	e008      	b.n	80014dc <wait+0x1c>
		for(i = 0 ; i < 255; i++);
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e002      	b.n	80014d6 <wait+0x16>
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	3301      	adds	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	2bff      	cmp	r3, #255	; 0xff
 80014da:	d1f9      	bne.n	80014d0 <wait+0x10>
	while(time--){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1e5a      	subs	r2, r3, #1
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f1      	bne.n	80014ca <wait+0xa>
	}
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <_kill>:

int _kill(int pid, int sig)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001508:	f000 f8fa 	bl	8001700 <__errno>
 800150c:	4602      	mov	r2, r0
 800150e:	2316      	movs	r3, #22
 8001510:	6013      	str	r3, [r2, #0]
	return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_exit>:

void _exit (int status)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001526:	f04f 31ff 	mov.w	r1, #4294967295
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffe7 	bl	80014fe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001530:	e7fe      	b.n	8001530 <_exit+0x12>

08001532 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e00a      	b.n	800155a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001544:	f3af 8000 	nop.w
 8001548:	4601      	mov	r1, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbf0      	blt.n	8001544 <_read+0x12>
	}

return len;
 8001562:	687b      	ldr	r3, [r7, #4]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e009      	b.n	8001592 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	dbf1      	blt.n	800157e <_write+0x12>
	}
	return len;
 800159a:	687b      	ldr	r3, [r7, #4]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_close>:

int _close(int file)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ca:	605a      	str	r2, [r3, #4]
	return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <_isatty>:

int _isatty(int file)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f000 f864 	bl	8001700 <__errno>
 8001638:	4602      	mov	r2, r0
 800163a:	230c      	movs	r3, #12
 800163c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20002800 	.word	0x20002800
 8001664:	00000400 	.word	0x00000400
 8001668:	200000cc 	.word	0x200000cc
 800166c:	200000e0 	.word	0x200000e0

08001670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001672:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001674:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <LoopForever+0x6>)
  ldr r1, =_edata
 800167a:	490d      	ldr	r1, [pc, #52]	; (80016b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <LoopForever+0xe>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001690:	4c0a      	ldr	r4, [pc, #40]	; (80016bc <LoopForever+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800169e:	f000 f847 	bl	8001730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a2:	f7ff fee7 	bl	8001474 <main>

080016a6 <LoopForever>:

LoopForever:
    b LoopForever
 80016a6:	e7fe      	b.n	80016a6 <LoopForever>
  ldr   r0, =_estack
 80016a8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016b4:	080029b4 	.word	0x080029b4
  ldr r2, =_sbss
 80016b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016bc:	200000e0 	.word	0x200000e0

080016c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_2_IRQHandler>
	...

080016c4 <__assert_func>:
 80016c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016c6:	461c      	mov	r4, r3
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <__assert_func+0x2c>)
 80016ca:	4605      	mov	r5, r0
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68d8      	ldr	r0, [r3, #12]
 80016d0:	b152      	cbz	r2, 80016e8 <__assert_func+0x24>
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <__assert_func+0x30>)
 80016d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80016d8:	9100      	str	r1, [sp, #0]
 80016da:	462b      	mov	r3, r5
 80016dc:	4622      	mov	r2, r4
 80016de:	4906      	ldr	r1, [pc, #24]	; (80016f8 <__assert_func+0x34>)
 80016e0:	f000 f814 	bl	800170c <fiprintf>
 80016e4:	f000 fbd6 	bl	8001e94 <abort>
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__assert_func+0x38>)
 80016ea:	461a      	mov	r2, r3
 80016ec:	e7f2      	b.n	80016d4 <__assert_func+0x10>
 80016ee:	bf00      	nop
 80016f0:	20000000 	.word	0x20000000
 80016f4:	080028d7 	.word	0x080028d7
 80016f8:	080028e4 	.word	0x080028e4
 80016fc:	08002912 	.word	0x08002912

08001700 <__errno>:
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <__errno+0x8>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000000 	.word	0x20000000

0800170c <fiprintf>:
 800170c:	b40e      	push	{r1, r2, r3}
 800170e:	b503      	push	{r0, r1, lr}
 8001710:	4601      	mov	r1, r0
 8001712:	ab03      	add	r3, sp, #12
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <fiprintf+0x20>)
 8001716:	f853 2b04 	ldr.w	r2, [r3], #4
 800171a:	6800      	ldr	r0, [r0, #0]
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	f000 f85b 	bl	80017d8 <_vfiprintf_r>
 8001722:	b002      	add	sp, #8
 8001724:	f85d eb04 	ldr.w	lr, [sp], #4
 8001728:	b003      	add	sp, #12
 800172a:	4770      	bx	lr
 800172c:	20000000 	.word	0x20000000

08001730 <__libc_init_array>:
 8001730:	b570      	push	{r4, r5, r6, lr}
 8001732:	2500      	movs	r5, #0
 8001734:	4e0c      	ldr	r6, [pc, #48]	; (8001768 <__libc_init_array+0x38>)
 8001736:	4c0d      	ldr	r4, [pc, #52]	; (800176c <__libc_init_array+0x3c>)
 8001738:	1ba4      	subs	r4, r4, r6
 800173a:	10a4      	asrs	r4, r4, #2
 800173c:	42a5      	cmp	r5, r4
 800173e:	d109      	bne.n	8001754 <__libc_init_array+0x24>
 8001740:	f000 ff44 	bl	80025cc <_init>
 8001744:	2500      	movs	r5, #0
 8001746:	4e0a      	ldr	r6, [pc, #40]	; (8001770 <__libc_init_array+0x40>)
 8001748:	4c0a      	ldr	r4, [pc, #40]	; (8001774 <__libc_init_array+0x44>)
 800174a:	1ba4      	subs	r4, r4, r6
 800174c:	10a4      	asrs	r4, r4, #2
 800174e:	42a5      	cmp	r5, r4
 8001750:	d105      	bne.n	800175e <__libc_init_array+0x2e>
 8001752:	bd70      	pop	{r4, r5, r6, pc}
 8001754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001758:	4798      	blx	r3
 800175a:	3501      	adds	r5, #1
 800175c:	e7ee      	b.n	800173c <__libc_init_array+0xc>
 800175e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001762:	4798      	blx	r3
 8001764:	3501      	adds	r5, #1
 8001766:	e7f2      	b.n	800174e <__libc_init_array+0x1e>
 8001768:	080029ac 	.word	0x080029ac
 800176c:	080029ac 	.word	0x080029ac
 8001770:	080029ac 	.word	0x080029ac
 8001774:	080029b0 	.word	0x080029b0

08001778 <memset>:
 8001778:	4603      	mov	r3, r0
 800177a:	4402      	add	r2, r0
 800177c:	4293      	cmp	r3, r2
 800177e:	d100      	bne.n	8001782 <memset+0xa>
 8001780:	4770      	bx	lr
 8001782:	f803 1b01 	strb.w	r1, [r3], #1
 8001786:	e7f9      	b.n	800177c <memset+0x4>

08001788 <__sfputc_r>:
 8001788:	6893      	ldr	r3, [r2, #8]
 800178a:	b410      	push	{r4}
 800178c:	3b01      	subs	r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	6093      	str	r3, [r2, #8]
 8001792:	da07      	bge.n	80017a4 <__sfputc_r+0x1c>
 8001794:	6994      	ldr	r4, [r2, #24]
 8001796:	42a3      	cmp	r3, r4
 8001798:	db01      	blt.n	800179e <__sfputc_r+0x16>
 800179a:	290a      	cmp	r1, #10
 800179c:	d102      	bne.n	80017a4 <__sfputc_r+0x1c>
 800179e:	bc10      	pop	{r4}
 80017a0:	f000 bab8 	b.w	8001d14 <__swbuf_r>
 80017a4:	6813      	ldr	r3, [r2, #0]
 80017a6:	1c58      	adds	r0, r3, #1
 80017a8:	6010      	str	r0, [r2, #0]
 80017aa:	7019      	strb	r1, [r3, #0]
 80017ac:	4608      	mov	r0, r1
 80017ae:	bc10      	pop	{r4}
 80017b0:	4770      	bx	lr

080017b2 <__sfputs_r>:
 80017b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b4:	4606      	mov	r6, r0
 80017b6:	460f      	mov	r7, r1
 80017b8:	4614      	mov	r4, r2
 80017ba:	18d5      	adds	r5, r2, r3
 80017bc:	42ac      	cmp	r4, r5
 80017be:	d101      	bne.n	80017c4 <__sfputs_r+0x12>
 80017c0:	2000      	movs	r0, #0
 80017c2:	e007      	b.n	80017d4 <__sfputs_r+0x22>
 80017c4:	463a      	mov	r2, r7
 80017c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017ca:	4630      	mov	r0, r6
 80017cc:	f7ff ffdc 	bl	8001788 <__sfputc_r>
 80017d0:	1c43      	adds	r3, r0, #1
 80017d2:	d1f3      	bne.n	80017bc <__sfputs_r+0xa>
 80017d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017d8 <_vfiprintf_r>:
 80017d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017dc:	460c      	mov	r4, r1
 80017de:	b09d      	sub	sp, #116	; 0x74
 80017e0:	4617      	mov	r7, r2
 80017e2:	461d      	mov	r5, r3
 80017e4:	4606      	mov	r6, r0
 80017e6:	b118      	cbz	r0, 80017f0 <_vfiprintf_r+0x18>
 80017e8:	6983      	ldr	r3, [r0, #24]
 80017ea:	b90b      	cbnz	r3, 80017f0 <_vfiprintf_r+0x18>
 80017ec:	f000 fc4a 	bl	8002084 <__sinit>
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <_vfiprintf_r+0x20c>)
 80017f2:	429c      	cmp	r4, r3
 80017f4:	d158      	bne.n	80018a8 <_vfiprintf_r+0xd0>
 80017f6:	6874      	ldr	r4, [r6, #4]
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	0718      	lsls	r0, r3, #28
 80017fc:	d55e      	bpl.n	80018bc <_vfiprintf_r+0xe4>
 80017fe:	6923      	ldr	r3, [r4, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d05b      	beq.n	80018bc <_vfiprintf_r+0xe4>
 8001804:	2300      	movs	r3, #0
 8001806:	9309      	str	r3, [sp, #36]	; 0x24
 8001808:	2320      	movs	r3, #32
 800180a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800180e:	2330      	movs	r3, #48	; 0x30
 8001810:	f04f 0b01 	mov.w	fp, #1
 8001814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001818:	9503      	str	r5, [sp, #12]
 800181a:	46b8      	mov	r8, r7
 800181c:	4645      	mov	r5, r8
 800181e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001822:	b10b      	cbz	r3, 8001828 <_vfiprintf_r+0x50>
 8001824:	2b25      	cmp	r3, #37	; 0x25
 8001826:	d154      	bne.n	80018d2 <_vfiprintf_r+0xfa>
 8001828:	ebb8 0a07 	subs.w	sl, r8, r7
 800182c:	d00b      	beq.n	8001846 <_vfiprintf_r+0x6e>
 800182e:	4653      	mov	r3, sl
 8001830:	463a      	mov	r2, r7
 8001832:	4621      	mov	r1, r4
 8001834:	4630      	mov	r0, r6
 8001836:	f7ff ffbc 	bl	80017b2 <__sfputs_r>
 800183a:	3001      	adds	r0, #1
 800183c:	f000 80c2 	beq.w	80019c4 <_vfiprintf_r+0x1ec>
 8001840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001842:	4453      	add	r3, sl
 8001844:	9309      	str	r3, [sp, #36]	; 0x24
 8001846:	f898 3000 	ldrb.w	r3, [r8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80ba 	beq.w	80019c4 <_vfiprintf_r+0x1ec>
 8001850:	2300      	movs	r3, #0
 8001852:	f04f 32ff 	mov.w	r2, #4294967295
 8001856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	9307      	str	r3, [sp, #28]
 800185e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001862:	931a      	str	r3, [sp, #104]	; 0x68
 8001864:	46a8      	mov	r8, r5
 8001866:	2205      	movs	r2, #5
 8001868:	f818 1b01 	ldrb.w	r1, [r8], #1
 800186c:	485e      	ldr	r0, [pc, #376]	; (80019e8 <_vfiprintf_r+0x210>)
 800186e:	f000 fcf7 	bl	8002260 <memchr>
 8001872:	9b04      	ldr	r3, [sp, #16]
 8001874:	bb78      	cbnz	r0, 80018d6 <_vfiprintf_r+0xfe>
 8001876:	06d9      	lsls	r1, r3, #27
 8001878:	bf44      	itt	mi
 800187a:	2220      	movmi	r2, #32
 800187c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001880:	071a      	lsls	r2, r3, #28
 8001882:	bf44      	itt	mi
 8001884:	222b      	movmi	r2, #43	; 0x2b
 8001886:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800188a:	782a      	ldrb	r2, [r5, #0]
 800188c:	2a2a      	cmp	r2, #42	; 0x2a
 800188e:	d02a      	beq.n	80018e6 <_vfiprintf_r+0x10e>
 8001890:	46a8      	mov	r8, r5
 8001892:	2000      	movs	r0, #0
 8001894:	250a      	movs	r5, #10
 8001896:	9a07      	ldr	r2, [sp, #28]
 8001898:	4641      	mov	r1, r8
 800189a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800189e:	3b30      	subs	r3, #48	; 0x30
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d969      	bls.n	8001978 <_vfiprintf_r+0x1a0>
 80018a4:	b360      	cbz	r0, 8001900 <_vfiprintf_r+0x128>
 80018a6:	e024      	b.n	80018f2 <_vfiprintf_r+0x11a>
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <_vfiprintf_r+0x214>)
 80018aa:	429c      	cmp	r4, r3
 80018ac:	d101      	bne.n	80018b2 <_vfiprintf_r+0xda>
 80018ae:	68b4      	ldr	r4, [r6, #8]
 80018b0:	e7a2      	b.n	80017f8 <_vfiprintf_r+0x20>
 80018b2:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <_vfiprintf_r+0x218>)
 80018b4:	429c      	cmp	r4, r3
 80018b6:	bf08      	it	eq
 80018b8:	68f4      	ldreq	r4, [r6, #12]
 80018ba:	e79d      	b.n	80017f8 <_vfiprintf_r+0x20>
 80018bc:	4621      	mov	r1, r4
 80018be:	4630      	mov	r0, r6
 80018c0:	f000 fa7a 	bl	8001db8 <__swsetup_r>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d09d      	beq.n	8001804 <_vfiprintf_r+0x2c>
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	b01d      	add	sp, #116	; 0x74
 80018ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d2:	46a8      	mov	r8, r5
 80018d4:	e7a2      	b.n	800181c <_vfiprintf_r+0x44>
 80018d6:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <_vfiprintf_r+0x210>)
 80018d8:	4645      	mov	r5, r8
 80018da:	1a80      	subs	r0, r0, r2
 80018dc:	fa0b f000 	lsl.w	r0, fp, r0
 80018e0:	4318      	orrs	r0, r3
 80018e2:	9004      	str	r0, [sp, #16]
 80018e4:	e7be      	b.n	8001864 <_vfiprintf_r+0x8c>
 80018e6:	9a03      	ldr	r2, [sp, #12]
 80018e8:	1d11      	adds	r1, r2, #4
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	9103      	str	r1, [sp, #12]
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	db01      	blt.n	80018f6 <_vfiprintf_r+0x11e>
 80018f2:	9207      	str	r2, [sp, #28]
 80018f4:	e004      	b.n	8001900 <_vfiprintf_r+0x128>
 80018f6:	4252      	negs	r2, r2
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	9207      	str	r2, [sp, #28]
 80018fe:	9304      	str	r3, [sp, #16]
 8001900:	f898 3000 	ldrb.w	r3, [r8]
 8001904:	2b2e      	cmp	r3, #46	; 0x2e
 8001906:	d10e      	bne.n	8001926 <_vfiprintf_r+0x14e>
 8001908:	f898 3001 	ldrb.w	r3, [r8, #1]
 800190c:	2b2a      	cmp	r3, #42	; 0x2a
 800190e:	d138      	bne.n	8001982 <_vfiprintf_r+0x1aa>
 8001910:	9b03      	ldr	r3, [sp, #12]
 8001912:	f108 0802 	add.w	r8, r8, #2
 8001916:	1d1a      	adds	r2, r3, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	9203      	str	r2, [sp, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	bfb8      	it	lt
 8001920:	f04f 33ff 	movlt.w	r3, #4294967295
 8001924:	9305      	str	r3, [sp, #20]
 8001926:	4d33      	ldr	r5, [pc, #204]	; (80019f4 <_vfiprintf_r+0x21c>)
 8001928:	2203      	movs	r2, #3
 800192a:	f898 1000 	ldrb.w	r1, [r8]
 800192e:	4628      	mov	r0, r5
 8001930:	f000 fc96 	bl	8002260 <memchr>
 8001934:	b140      	cbz	r0, 8001948 <_vfiprintf_r+0x170>
 8001936:	2340      	movs	r3, #64	; 0x40
 8001938:	1b40      	subs	r0, r0, r5
 800193a:	fa03 f000 	lsl.w	r0, r3, r0
 800193e:	9b04      	ldr	r3, [sp, #16]
 8001940:	f108 0801 	add.w	r8, r8, #1
 8001944:	4303      	orrs	r3, r0
 8001946:	9304      	str	r3, [sp, #16]
 8001948:	f898 1000 	ldrb.w	r1, [r8]
 800194c:	2206      	movs	r2, #6
 800194e:	482a      	ldr	r0, [pc, #168]	; (80019f8 <_vfiprintf_r+0x220>)
 8001950:	f108 0701 	add.w	r7, r8, #1
 8001954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001958:	f000 fc82 	bl	8002260 <memchr>
 800195c:	2800      	cmp	r0, #0
 800195e:	d037      	beq.n	80019d0 <_vfiprintf_r+0x1f8>
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <_vfiprintf_r+0x224>)
 8001962:	bb1b      	cbnz	r3, 80019ac <_vfiprintf_r+0x1d4>
 8001964:	9b03      	ldr	r3, [sp, #12]
 8001966:	3307      	adds	r3, #7
 8001968:	f023 0307 	bic.w	r3, r3, #7
 800196c:	3308      	adds	r3, #8
 800196e:	9303      	str	r3, [sp, #12]
 8001970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001972:	444b      	add	r3, r9
 8001974:	9309      	str	r3, [sp, #36]	; 0x24
 8001976:	e750      	b.n	800181a <_vfiprintf_r+0x42>
 8001978:	fb05 3202 	mla	r2, r5, r2, r3
 800197c:	2001      	movs	r0, #1
 800197e:	4688      	mov	r8, r1
 8001980:	e78a      	b.n	8001898 <_vfiprintf_r+0xc0>
 8001982:	2300      	movs	r3, #0
 8001984:	250a      	movs	r5, #10
 8001986:	4619      	mov	r1, r3
 8001988:	f108 0801 	add.w	r8, r8, #1
 800198c:	9305      	str	r3, [sp, #20]
 800198e:	4640      	mov	r0, r8
 8001990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001994:	3a30      	subs	r2, #48	; 0x30
 8001996:	2a09      	cmp	r2, #9
 8001998:	d903      	bls.n	80019a2 <_vfiprintf_r+0x1ca>
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0c3      	beq.n	8001926 <_vfiprintf_r+0x14e>
 800199e:	9105      	str	r1, [sp, #20]
 80019a0:	e7c1      	b.n	8001926 <_vfiprintf_r+0x14e>
 80019a2:	fb05 2101 	mla	r1, r5, r1, r2
 80019a6:	2301      	movs	r3, #1
 80019a8:	4680      	mov	r8, r0
 80019aa:	e7f0      	b.n	800198e <_vfiprintf_r+0x1b6>
 80019ac:	ab03      	add	r3, sp, #12
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4622      	mov	r2, r4
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_vfiprintf_r+0x228>)
 80019b4:	a904      	add	r1, sp, #16
 80019b6:	4630      	mov	r0, r6
 80019b8:	f3af 8000 	nop.w
 80019bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80019c0:	4681      	mov	r9, r0
 80019c2:	d1d5      	bne.n	8001970 <_vfiprintf_r+0x198>
 80019c4:	89a3      	ldrh	r3, [r4, #12]
 80019c6:	065b      	lsls	r3, r3, #25
 80019c8:	f53f af7e 	bmi.w	80018c8 <_vfiprintf_r+0xf0>
 80019cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019ce:	e77d      	b.n	80018cc <_vfiprintf_r+0xf4>
 80019d0:	ab03      	add	r3, sp, #12
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4622      	mov	r2, r4
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <_vfiprintf_r+0x228>)
 80019d8:	a904      	add	r1, sp, #16
 80019da:	4630      	mov	r0, r6
 80019dc:	f000 f888 	bl	8001af0 <_printf_i>
 80019e0:	e7ec      	b.n	80019bc <_vfiprintf_r+0x1e4>
 80019e2:	bf00      	nop
 80019e4:	0800296c 	.word	0x0800296c
 80019e8:	08002918 	.word	0x08002918
 80019ec:	0800298c 	.word	0x0800298c
 80019f0:	0800294c 	.word	0x0800294c
 80019f4:	0800291e 	.word	0x0800291e
 80019f8:	08002922 	.word	0x08002922
 80019fc:	00000000 	.word	0x00000000
 8001a00:	080017b3 	.word	0x080017b3

08001a04 <_printf_common>:
 8001a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a08:	4691      	mov	r9, r2
 8001a0a:	461f      	mov	r7, r3
 8001a0c:	688a      	ldr	r2, [r1, #8]
 8001a0e:	690b      	ldr	r3, [r1, #16]
 8001a10:	4606      	mov	r6, r0
 8001a12:	4293      	cmp	r3, r2
 8001a14:	bfb8      	it	lt
 8001a16:	4613      	movlt	r3, r2
 8001a18:	f8c9 3000 	str.w	r3, [r9]
 8001a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a20:	460c      	mov	r4, r1
 8001a22:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a26:	b112      	cbz	r2, 8001a2e <_printf_common+0x2a>
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f8c9 3000 	str.w	r3, [r9]
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	0699      	lsls	r1, r3, #26
 8001a32:	bf42      	ittt	mi
 8001a34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a38:	3302      	addmi	r3, #2
 8001a3a:	f8c9 3000 	strmi.w	r3, [r9]
 8001a3e:	6825      	ldr	r5, [r4, #0]
 8001a40:	f015 0506 	ands.w	r5, r5, #6
 8001a44:	d107      	bne.n	8001a56 <_printf_common+0x52>
 8001a46:	f104 0a19 	add.w	sl, r4, #25
 8001a4a:	68e3      	ldr	r3, [r4, #12]
 8001a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	42ab      	cmp	r3, r5
 8001a54:	dc29      	bgt.n	8001aaa <_printf_common+0xa6>
 8001a56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	3300      	adds	r3, #0
 8001a5e:	bf18      	it	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	0692      	lsls	r2, r2, #26
 8001a64:	d42e      	bmi.n	8001ac4 <_printf_common+0xc0>
 8001a66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a6a:	4639      	mov	r1, r7
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	47c0      	blx	r8
 8001a70:	3001      	adds	r0, #1
 8001a72:	d021      	beq.n	8001ab8 <_printf_common+0xb4>
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	68e5      	ldr	r5, [r4, #12]
 8001a78:	f003 0306 	and.w	r3, r3, #6
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	bf18      	it	ne
 8001a80:	2500      	movne	r5, #0
 8001a82:	f8d9 2000 	ldr.w	r2, [r9]
 8001a86:	f04f 0900 	mov.w	r9, #0
 8001a8a:	bf08      	it	eq
 8001a8c:	1aad      	subeq	r5, r5, r2
 8001a8e:	68a3      	ldr	r3, [r4, #8]
 8001a90:	6922      	ldr	r2, [r4, #16]
 8001a92:	bf08      	it	eq
 8001a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bfc4      	itt	gt
 8001a9c:	1a9b      	subgt	r3, r3, r2
 8001a9e:	18ed      	addgt	r5, r5, r3
 8001aa0:	341a      	adds	r4, #26
 8001aa2:	454d      	cmp	r5, r9
 8001aa4:	d11a      	bne.n	8001adc <_printf_common+0xd8>
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	e008      	b.n	8001abc <_printf_common+0xb8>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	4652      	mov	r2, sl
 8001aae:	4639      	mov	r1, r7
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	47c0      	blx	r8
 8001ab4:	3001      	adds	r0, #1
 8001ab6:	d103      	bne.n	8001ac0 <_printf_common+0xbc>
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ac0:	3501      	adds	r5, #1
 8001ac2:	e7c2      	b.n	8001a4a <_printf_common+0x46>
 8001ac4:	2030      	movs	r0, #48	; 0x30
 8001ac6:	18e1      	adds	r1, r4, r3
 8001ac8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ad2:	4422      	add	r2, r4
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ada:	e7c4      	b.n	8001a66 <_printf_common+0x62>
 8001adc:	2301      	movs	r3, #1
 8001ade:	4622      	mov	r2, r4
 8001ae0:	4639      	mov	r1, r7
 8001ae2:	4630      	mov	r0, r6
 8001ae4:	47c0      	blx	r8
 8001ae6:	3001      	adds	r0, #1
 8001ae8:	d0e6      	beq.n	8001ab8 <_printf_common+0xb4>
 8001aea:	f109 0901 	add.w	r9, r9, #1
 8001aee:	e7d8      	b.n	8001aa2 <_printf_common+0x9e>

08001af0 <_printf_i>:
 8001af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001af4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001af8:	460c      	mov	r4, r1
 8001afa:	7e09      	ldrb	r1, [r1, #24]
 8001afc:	b085      	sub	sp, #20
 8001afe:	296e      	cmp	r1, #110	; 0x6e
 8001b00:	4617      	mov	r7, r2
 8001b02:	4606      	mov	r6, r0
 8001b04:	4698      	mov	r8, r3
 8001b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b08:	f000 80b3 	beq.w	8001c72 <_printf_i+0x182>
 8001b0c:	d822      	bhi.n	8001b54 <_printf_i+0x64>
 8001b0e:	2963      	cmp	r1, #99	; 0x63
 8001b10:	d036      	beq.n	8001b80 <_printf_i+0x90>
 8001b12:	d80a      	bhi.n	8001b2a <_printf_i+0x3a>
 8001b14:	2900      	cmp	r1, #0
 8001b16:	f000 80b9 	beq.w	8001c8c <_printf_i+0x19c>
 8001b1a:	2958      	cmp	r1, #88	; 0x58
 8001b1c:	f000 8083 	beq.w	8001c26 <_printf_i+0x136>
 8001b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001b28:	e032      	b.n	8001b90 <_printf_i+0xa0>
 8001b2a:	2964      	cmp	r1, #100	; 0x64
 8001b2c:	d001      	beq.n	8001b32 <_printf_i+0x42>
 8001b2e:	2969      	cmp	r1, #105	; 0x69
 8001b30:	d1f6      	bne.n	8001b20 <_printf_i+0x30>
 8001b32:	6820      	ldr	r0, [r4, #0]
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	0605      	lsls	r5, r0, #24
 8001b38:	f103 0104 	add.w	r1, r3, #4
 8001b3c:	d52a      	bpl.n	8001b94 <_printf_i+0xa4>
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6011      	str	r1, [r2, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da03      	bge.n	8001b4e <_printf_i+0x5e>
 8001b46:	222d      	movs	r2, #45	; 0x2d
 8001b48:	425b      	negs	r3, r3
 8001b4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b4e:	486f      	ldr	r0, [pc, #444]	; (8001d0c <_printf_i+0x21c>)
 8001b50:	220a      	movs	r2, #10
 8001b52:	e039      	b.n	8001bc8 <_printf_i+0xd8>
 8001b54:	2973      	cmp	r1, #115	; 0x73
 8001b56:	f000 809d 	beq.w	8001c94 <_printf_i+0x1a4>
 8001b5a:	d808      	bhi.n	8001b6e <_printf_i+0x7e>
 8001b5c:	296f      	cmp	r1, #111	; 0x6f
 8001b5e:	d020      	beq.n	8001ba2 <_printf_i+0xb2>
 8001b60:	2970      	cmp	r1, #112	; 0x70
 8001b62:	d1dd      	bne.n	8001b20 <_printf_i+0x30>
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	6023      	str	r3, [r4, #0]
 8001b6c:	e003      	b.n	8001b76 <_printf_i+0x86>
 8001b6e:	2975      	cmp	r1, #117	; 0x75
 8001b70:	d017      	beq.n	8001ba2 <_printf_i+0xb2>
 8001b72:	2978      	cmp	r1, #120	; 0x78
 8001b74:	d1d4      	bne.n	8001b20 <_printf_i+0x30>
 8001b76:	2378      	movs	r3, #120	; 0x78
 8001b78:	4865      	ldr	r0, [pc, #404]	; (8001d10 <_printf_i+0x220>)
 8001b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b7e:	e055      	b.n	8001c2c <_printf_i+0x13c>
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b86:	1d19      	adds	r1, r3, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6011      	str	r1, [r2, #0]
 8001b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b90:	2301      	movs	r3, #1
 8001b92:	e08c      	b.n	8001cae <_printf_i+0x1be>
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b9a:	6011      	str	r1, [r2, #0]
 8001b9c:	bf18      	it	ne
 8001b9e:	b21b      	sxthne	r3, r3
 8001ba0:	e7cf      	b.n	8001b42 <_printf_i+0x52>
 8001ba2:	6813      	ldr	r3, [r2, #0]
 8001ba4:	6825      	ldr	r5, [r4, #0]
 8001ba6:	1d18      	adds	r0, r3, #4
 8001ba8:	6010      	str	r0, [r2, #0]
 8001baa:	0628      	lsls	r0, r5, #24
 8001bac:	d501      	bpl.n	8001bb2 <_printf_i+0xc2>
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	e002      	b.n	8001bb8 <_printf_i+0xc8>
 8001bb2:	0668      	lsls	r0, r5, #25
 8001bb4:	d5fb      	bpl.n	8001bae <_printf_i+0xbe>
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	296f      	cmp	r1, #111	; 0x6f
 8001bba:	bf14      	ite	ne
 8001bbc:	220a      	movne	r2, #10
 8001bbe:	2208      	moveq	r2, #8
 8001bc0:	4852      	ldr	r0, [pc, #328]	; (8001d0c <_printf_i+0x21c>)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001bc8:	6865      	ldr	r5, [r4, #4]
 8001bca:	2d00      	cmp	r5, #0
 8001bcc:	60a5      	str	r5, [r4, #8]
 8001bce:	f2c0 8095 	blt.w	8001cfc <_printf_i+0x20c>
 8001bd2:	6821      	ldr	r1, [r4, #0]
 8001bd4:	f021 0104 	bic.w	r1, r1, #4
 8001bd8:	6021      	str	r1, [r4, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d13d      	bne.n	8001c5a <_printf_i+0x16a>
 8001bde:	2d00      	cmp	r5, #0
 8001be0:	f040 808e 	bne.w	8001d00 <_printf_i+0x210>
 8001be4:	4665      	mov	r5, ip
 8001be6:	2a08      	cmp	r2, #8
 8001be8:	d10b      	bne.n	8001c02 <_printf_i+0x112>
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	07db      	lsls	r3, r3, #31
 8001bee:	d508      	bpl.n	8001c02 <_printf_i+0x112>
 8001bf0:	6923      	ldr	r3, [r4, #16]
 8001bf2:	6862      	ldr	r2, [r4, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	bfde      	ittt	le
 8001bf8:	2330      	movle	r3, #48	; 0x30
 8001bfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c02:	ebac 0305 	sub.w	r3, ip, r5
 8001c06:	6123      	str	r3, [r4, #16]
 8001c08:	f8cd 8000 	str.w	r8, [sp]
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	aa03      	add	r2, sp, #12
 8001c10:	4621      	mov	r1, r4
 8001c12:	4630      	mov	r0, r6
 8001c14:	f7ff fef6 	bl	8001a04 <_printf_common>
 8001c18:	3001      	adds	r0, #1
 8001c1a:	d14d      	bne.n	8001cb8 <_printf_i+0x1c8>
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	b005      	add	sp, #20
 8001c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c26:	4839      	ldr	r0, [pc, #228]	; (8001d0c <_printf_i+0x21c>)
 8001c28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	6821      	ldr	r1, [r4, #0]
 8001c30:	1d1d      	adds	r5, r3, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6015      	str	r5, [r2, #0]
 8001c36:	060a      	lsls	r2, r1, #24
 8001c38:	d50b      	bpl.n	8001c52 <_printf_i+0x162>
 8001c3a:	07ca      	lsls	r2, r1, #31
 8001c3c:	bf44      	itt	mi
 8001c3e:	f041 0120 	orrmi.w	r1, r1, #32
 8001c42:	6021      	strmi	r1, [r4, #0]
 8001c44:	b91b      	cbnz	r3, 8001c4e <_printf_i+0x15e>
 8001c46:	6822      	ldr	r2, [r4, #0]
 8001c48:	f022 0220 	bic.w	r2, r2, #32
 8001c4c:	6022      	str	r2, [r4, #0]
 8001c4e:	2210      	movs	r2, #16
 8001c50:	e7b7      	b.n	8001bc2 <_printf_i+0xd2>
 8001c52:	064d      	lsls	r5, r1, #25
 8001c54:	bf48      	it	mi
 8001c56:	b29b      	uxthmi	r3, r3
 8001c58:	e7ef      	b.n	8001c3a <_printf_i+0x14a>
 8001c5a:	4665      	mov	r5, ip
 8001c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c60:	fb02 3311 	mls	r3, r2, r1, r3
 8001c64:	5cc3      	ldrb	r3, [r0, r3]
 8001c66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	2900      	cmp	r1, #0
 8001c6e:	d1f5      	bne.n	8001c5c <_printf_i+0x16c>
 8001c70:	e7b9      	b.n	8001be6 <_printf_i+0xf6>
 8001c72:	6813      	ldr	r3, [r2, #0]
 8001c74:	6825      	ldr	r5, [r4, #0]
 8001c76:	1d18      	adds	r0, r3, #4
 8001c78:	6961      	ldr	r1, [r4, #20]
 8001c7a:	6010      	str	r0, [r2, #0]
 8001c7c:	0628      	lsls	r0, r5, #24
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	d501      	bpl.n	8001c86 <_printf_i+0x196>
 8001c82:	6019      	str	r1, [r3, #0]
 8001c84:	e002      	b.n	8001c8c <_printf_i+0x19c>
 8001c86:	066a      	lsls	r2, r5, #25
 8001c88:	d5fb      	bpl.n	8001c82 <_printf_i+0x192>
 8001c8a:	8019      	strh	r1, [r3, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	4665      	mov	r5, ip
 8001c90:	6123      	str	r3, [r4, #16]
 8001c92:	e7b9      	b.n	8001c08 <_printf_i+0x118>
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	1d19      	adds	r1, r3, #4
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	681d      	ldr	r5, [r3, #0]
 8001c9c:	6862      	ldr	r2, [r4, #4]
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f000 fadd 	bl	8002260 <memchr>
 8001ca6:	b108      	cbz	r0, 8001cac <_printf_i+0x1bc>
 8001ca8:	1b40      	subs	r0, r0, r5
 8001caa:	6060      	str	r0, [r4, #4]
 8001cac:	6863      	ldr	r3, [r4, #4]
 8001cae:	6123      	str	r3, [r4, #16]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cb6:	e7a7      	b.n	8001c08 <_printf_i+0x118>
 8001cb8:	6923      	ldr	r3, [r4, #16]
 8001cba:	462a      	mov	r2, r5
 8001cbc:	4639      	mov	r1, r7
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	47c0      	blx	r8
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	d0aa      	beq.n	8001c1c <_printf_i+0x12c>
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	079b      	lsls	r3, r3, #30
 8001cca:	d413      	bmi.n	8001cf4 <_printf_i+0x204>
 8001ccc:	68e0      	ldr	r0, [r4, #12]
 8001cce:	9b03      	ldr	r3, [sp, #12]
 8001cd0:	4298      	cmp	r0, r3
 8001cd2:	bfb8      	it	lt
 8001cd4:	4618      	movlt	r0, r3
 8001cd6:	e7a3      	b.n	8001c20 <_printf_i+0x130>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	464a      	mov	r2, r9
 8001cdc:	4639      	mov	r1, r7
 8001cde:	4630      	mov	r0, r6
 8001ce0:	47c0      	blx	r8
 8001ce2:	3001      	adds	r0, #1
 8001ce4:	d09a      	beq.n	8001c1c <_printf_i+0x12c>
 8001ce6:	3501      	adds	r5, #1
 8001ce8:	68e3      	ldr	r3, [r4, #12]
 8001cea:	9a03      	ldr	r2, [sp, #12]
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	42ab      	cmp	r3, r5
 8001cf0:	dcf2      	bgt.n	8001cd8 <_printf_i+0x1e8>
 8001cf2:	e7eb      	b.n	8001ccc <_printf_i+0x1dc>
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	f104 0919 	add.w	r9, r4, #25
 8001cfa:	e7f5      	b.n	8001ce8 <_printf_i+0x1f8>
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ac      	bne.n	8001c5a <_printf_i+0x16a>
 8001d00:	7803      	ldrb	r3, [r0, #0]
 8001d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d0a:	e76c      	b.n	8001be6 <_printf_i+0xf6>
 8001d0c:	08002929 	.word	0x08002929
 8001d10:	0800293a 	.word	0x0800293a

08001d14 <__swbuf_r>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	460e      	mov	r6, r1
 8001d18:	4614      	mov	r4, r2
 8001d1a:	4605      	mov	r5, r0
 8001d1c:	b118      	cbz	r0, 8001d26 <__swbuf_r+0x12>
 8001d1e:	6983      	ldr	r3, [r0, #24]
 8001d20:	b90b      	cbnz	r3, 8001d26 <__swbuf_r+0x12>
 8001d22:	f000 f9af 	bl	8002084 <__sinit>
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <__swbuf_r+0x98>)
 8001d28:	429c      	cmp	r4, r3
 8001d2a:	d12a      	bne.n	8001d82 <__swbuf_r+0x6e>
 8001d2c:	686c      	ldr	r4, [r5, #4]
 8001d2e:	69a3      	ldr	r3, [r4, #24]
 8001d30:	60a3      	str	r3, [r4, #8]
 8001d32:	89a3      	ldrh	r3, [r4, #12]
 8001d34:	071a      	lsls	r2, r3, #28
 8001d36:	d52e      	bpl.n	8001d96 <__swbuf_r+0x82>
 8001d38:	6923      	ldr	r3, [r4, #16]
 8001d3a:	b363      	cbz	r3, 8001d96 <__swbuf_r+0x82>
 8001d3c:	6923      	ldr	r3, [r4, #16]
 8001d3e:	6820      	ldr	r0, [r4, #0]
 8001d40:	b2f6      	uxtb	r6, r6
 8001d42:	1ac0      	subs	r0, r0, r3
 8001d44:	6963      	ldr	r3, [r4, #20]
 8001d46:	4637      	mov	r7, r6
 8001d48:	4283      	cmp	r3, r0
 8001d4a:	dc04      	bgt.n	8001d56 <__swbuf_r+0x42>
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f000 f92e 	bl	8001fb0 <_fflush_r>
 8001d54:	bb28      	cbnz	r0, 8001da2 <__swbuf_r+0x8e>
 8001d56:	68a3      	ldr	r3, [r4, #8]
 8001d58:	3001      	adds	r0, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	60a3      	str	r3, [r4, #8]
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	6022      	str	r2, [r4, #0]
 8001d64:	701e      	strb	r6, [r3, #0]
 8001d66:	6963      	ldr	r3, [r4, #20]
 8001d68:	4283      	cmp	r3, r0
 8001d6a:	d004      	beq.n	8001d76 <__swbuf_r+0x62>
 8001d6c:	89a3      	ldrh	r3, [r4, #12]
 8001d6e:	07db      	lsls	r3, r3, #31
 8001d70:	d519      	bpl.n	8001da6 <__swbuf_r+0x92>
 8001d72:	2e0a      	cmp	r6, #10
 8001d74:	d117      	bne.n	8001da6 <__swbuf_r+0x92>
 8001d76:	4621      	mov	r1, r4
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f000 f919 	bl	8001fb0 <_fflush_r>
 8001d7e:	b190      	cbz	r0, 8001da6 <__swbuf_r+0x92>
 8001d80:	e00f      	b.n	8001da2 <__swbuf_r+0x8e>
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <__swbuf_r+0x9c>)
 8001d84:	429c      	cmp	r4, r3
 8001d86:	d101      	bne.n	8001d8c <__swbuf_r+0x78>
 8001d88:	68ac      	ldr	r4, [r5, #8]
 8001d8a:	e7d0      	b.n	8001d2e <__swbuf_r+0x1a>
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <__swbuf_r+0xa0>)
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	bf08      	it	eq
 8001d92:	68ec      	ldreq	r4, [r5, #12]
 8001d94:	e7cb      	b.n	8001d2e <__swbuf_r+0x1a>
 8001d96:	4621      	mov	r1, r4
 8001d98:	4628      	mov	r0, r5
 8001d9a:	f000 f80d 	bl	8001db8 <__swsetup_r>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d0cc      	beq.n	8001d3c <__swbuf_r+0x28>
 8001da2:	f04f 37ff 	mov.w	r7, #4294967295
 8001da6:	4638      	mov	r0, r7
 8001da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	0800296c 	.word	0x0800296c
 8001db0:	0800298c 	.word	0x0800298c
 8001db4:	0800294c 	.word	0x0800294c

08001db8 <__swsetup_r>:
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <__swsetup_r+0xcc>)
 8001dba:	b570      	push	{r4, r5, r6, lr}
 8001dbc:	681d      	ldr	r5, [r3, #0]
 8001dbe:	4606      	mov	r6, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	b125      	cbz	r5, 8001dce <__swsetup_r+0x16>
 8001dc4:	69ab      	ldr	r3, [r5, #24]
 8001dc6:	b913      	cbnz	r3, 8001dce <__swsetup_r+0x16>
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f000 f95b 	bl	8002084 <__sinit>
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <__swsetup_r+0xd0>)
 8001dd0:	429c      	cmp	r4, r3
 8001dd2:	d10f      	bne.n	8001df4 <__swsetup_r+0x3c>
 8001dd4:	686c      	ldr	r4, [r5, #4]
 8001dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	0715      	lsls	r5, r2, #28
 8001dde:	d42c      	bmi.n	8001e3a <__swsetup_r+0x82>
 8001de0:	06d0      	lsls	r0, r2, #27
 8001de2:	d411      	bmi.n	8001e08 <__swsetup_r+0x50>
 8001de4:	2209      	movs	r2, #9
 8001de6:	6032      	str	r2, [r6, #0]
 8001de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dec:	81a3      	strh	r3, [r4, #12]
 8001dee:	f04f 30ff 	mov.w	r0, #4294967295
 8001df2:	e03e      	b.n	8001e72 <__swsetup_r+0xba>
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <__swsetup_r+0xd4>)
 8001df6:	429c      	cmp	r4, r3
 8001df8:	d101      	bne.n	8001dfe <__swsetup_r+0x46>
 8001dfa:	68ac      	ldr	r4, [r5, #8]
 8001dfc:	e7eb      	b.n	8001dd6 <__swsetup_r+0x1e>
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <__swsetup_r+0xd8>)
 8001e00:	429c      	cmp	r4, r3
 8001e02:	bf08      	it	eq
 8001e04:	68ec      	ldreq	r4, [r5, #12]
 8001e06:	e7e6      	b.n	8001dd6 <__swsetup_r+0x1e>
 8001e08:	0751      	lsls	r1, r2, #29
 8001e0a:	d512      	bpl.n	8001e32 <__swsetup_r+0x7a>
 8001e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e0e:	b141      	cbz	r1, 8001e22 <__swsetup_r+0x6a>
 8001e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e14:	4299      	cmp	r1, r3
 8001e16:	d002      	beq.n	8001e1e <__swsetup_r+0x66>
 8001e18:	4630      	mov	r0, r6
 8001e1a:	f000 fa2f 	bl	800227c <_free_r>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	6363      	str	r3, [r4, #52]	; 0x34
 8001e22:	89a3      	ldrh	r3, [r4, #12]
 8001e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e28:	81a3      	strh	r3, [r4, #12]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	6063      	str	r3, [r4, #4]
 8001e2e:	6923      	ldr	r3, [r4, #16]
 8001e30:	6023      	str	r3, [r4, #0]
 8001e32:	89a3      	ldrh	r3, [r4, #12]
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	81a3      	strh	r3, [r4, #12]
 8001e3a:	6923      	ldr	r3, [r4, #16]
 8001e3c:	b94b      	cbnz	r3, 8001e52 <__swsetup_r+0x9a>
 8001e3e:	89a3      	ldrh	r3, [r4, #12]
 8001e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e48:	d003      	beq.n	8001e52 <__swsetup_r+0x9a>
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f000 f9c7 	bl	80021e0 <__smakebuf_r>
 8001e52:	89a2      	ldrh	r2, [r4, #12]
 8001e54:	f012 0301 	ands.w	r3, r2, #1
 8001e58:	d00c      	beq.n	8001e74 <__swsetup_r+0xbc>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60a3      	str	r3, [r4, #8]
 8001e5e:	6963      	ldr	r3, [r4, #20]
 8001e60:	425b      	negs	r3, r3
 8001e62:	61a3      	str	r3, [r4, #24]
 8001e64:	6923      	ldr	r3, [r4, #16]
 8001e66:	b953      	cbnz	r3, 8001e7e <__swsetup_r+0xc6>
 8001e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001e70:	d1ba      	bne.n	8001de8 <__swsetup_r+0x30>
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
 8001e74:	0792      	lsls	r2, r2, #30
 8001e76:	bf58      	it	pl
 8001e78:	6963      	ldrpl	r3, [r4, #20]
 8001e7a:	60a3      	str	r3, [r4, #8]
 8001e7c:	e7f2      	b.n	8001e64 <__swsetup_r+0xac>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	e7f7      	b.n	8001e72 <__swsetup_r+0xba>
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000
 8001e88:	0800296c 	.word	0x0800296c
 8001e8c:	0800298c 	.word	0x0800298c
 8001e90:	0800294c 	.word	0x0800294c

08001e94 <abort>:
 8001e94:	b508      	push	{r3, lr}
 8001e96:	2006      	movs	r0, #6
 8001e98:	f000 face 	bl	8002438 <raise>
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff fb3e 	bl	800151e <_exit>
	...

08001ea4 <__sflush_r>:
 8001ea4:	898a      	ldrh	r2, [r1, #12]
 8001ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eaa:	4605      	mov	r5, r0
 8001eac:	0710      	lsls	r0, r2, #28
 8001eae:	460c      	mov	r4, r1
 8001eb0:	d458      	bmi.n	8001f64 <__sflush_r+0xc0>
 8001eb2:	684b      	ldr	r3, [r1, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	dc05      	bgt.n	8001ec4 <__sflush_r+0x20>
 8001eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	dc02      	bgt.n	8001ec4 <__sflush_r+0x20>
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ec6:	2e00      	cmp	r6, #0
 8001ec8:	d0f9      	beq.n	8001ebe <__sflush_r+0x1a>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ed0:	682f      	ldr	r7, [r5, #0]
 8001ed2:	6a21      	ldr	r1, [r4, #32]
 8001ed4:	602b      	str	r3, [r5, #0]
 8001ed6:	d032      	beq.n	8001f3e <__sflush_r+0x9a>
 8001ed8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	075a      	lsls	r2, r3, #29
 8001ede:	d505      	bpl.n	8001eec <__sflush_r+0x48>
 8001ee0:	6863      	ldr	r3, [r4, #4]
 8001ee2:	1ac0      	subs	r0, r0, r3
 8001ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ee6:	b10b      	cbz	r3, 8001eec <__sflush_r+0x48>
 8001ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eea:	1ac0      	subs	r0, r0, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ef2:	6a21      	ldr	r1, [r4, #32]
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	47b0      	blx	r6
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	89a3      	ldrh	r3, [r4, #12]
 8001efc:	d106      	bne.n	8001f0c <__sflush_r+0x68>
 8001efe:	6829      	ldr	r1, [r5, #0]
 8001f00:	291d      	cmp	r1, #29
 8001f02:	d848      	bhi.n	8001f96 <__sflush_r+0xf2>
 8001f04:	4a29      	ldr	r2, [pc, #164]	; (8001fac <__sflush_r+0x108>)
 8001f06:	40ca      	lsrs	r2, r1
 8001f08:	07d6      	lsls	r6, r2, #31
 8001f0a:	d544      	bpl.n	8001f96 <__sflush_r+0xf2>
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6062      	str	r2, [r4, #4]
 8001f10:	6922      	ldr	r2, [r4, #16]
 8001f12:	04d9      	lsls	r1, r3, #19
 8001f14:	6022      	str	r2, [r4, #0]
 8001f16:	d504      	bpl.n	8001f22 <__sflush_r+0x7e>
 8001f18:	1c42      	adds	r2, r0, #1
 8001f1a:	d101      	bne.n	8001f20 <__sflush_r+0x7c>
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	b903      	cbnz	r3, 8001f22 <__sflush_r+0x7e>
 8001f20:	6560      	str	r0, [r4, #84]	; 0x54
 8001f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f24:	602f      	str	r7, [r5, #0]
 8001f26:	2900      	cmp	r1, #0
 8001f28:	d0c9      	beq.n	8001ebe <__sflush_r+0x1a>
 8001f2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f2e:	4299      	cmp	r1, r3
 8001f30:	d002      	beq.n	8001f38 <__sflush_r+0x94>
 8001f32:	4628      	mov	r0, r5
 8001f34:	f000 f9a2 	bl	800227c <_free_r>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	6360      	str	r0, [r4, #52]	; 0x34
 8001f3c:	e7c0      	b.n	8001ec0 <__sflush_r+0x1c>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4628      	mov	r0, r5
 8001f42:	47b0      	blx	r6
 8001f44:	1c41      	adds	r1, r0, #1
 8001f46:	d1c8      	bne.n	8001eda <__sflush_r+0x36>
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0c5      	beq.n	8001eda <__sflush_r+0x36>
 8001f4e:	2b1d      	cmp	r3, #29
 8001f50:	d001      	beq.n	8001f56 <__sflush_r+0xb2>
 8001f52:	2b16      	cmp	r3, #22
 8001f54:	d101      	bne.n	8001f5a <__sflush_r+0xb6>
 8001f56:	602f      	str	r7, [r5, #0]
 8001f58:	e7b1      	b.n	8001ebe <__sflush_r+0x1a>
 8001f5a:	89a3      	ldrh	r3, [r4, #12]
 8001f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f60:	81a3      	strh	r3, [r4, #12]
 8001f62:	e7ad      	b.n	8001ec0 <__sflush_r+0x1c>
 8001f64:	690f      	ldr	r7, [r1, #16]
 8001f66:	2f00      	cmp	r7, #0
 8001f68:	d0a9      	beq.n	8001ebe <__sflush_r+0x1a>
 8001f6a:	0793      	lsls	r3, r2, #30
 8001f6c:	bf18      	it	ne
 8001f6e:	2300      	movne	r3, #0
 8001f70:	680e      	ldr	r6, [r1, #0]
 8001f72:	bf08      	it	eq
 8001f74:	694b      	ldreq	r3, [r1, #20]
 8001f76:	eba6 0807 	sub.w	r8, r6, r7
 8001f7a:	600f      	str	r7, [r1, #0]
 8001f7c:	608b      	str	r3, [r1, #8]
 8001f7e:	f1b8 0f00 	cmp.w	r8, #0
 8001f82:	dd9c      	ble.n	8001ebe <__sflush_r+0x1a>
 8001f84:	4643      	mov	r3, r8
 8001f86:	463a      	mov	r2, r7
 8001f88:	6a21      	ldr	r1, [r4, #32]
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f8e:	47b0      	blx	r6
 8001f90:	2800      	cmp	r0, #0
 8001f92:	dc06      	bgt.n	8001fa2 <__sflush_r+0xfe>
 8001f94:	89a3      	ldrh	r3, [r4, #12]
 8001f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9a:	81a3      	strh	r3, [r4, #12]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	e78e      	b.n	8001ec0 <__sflush_r+0x1c>
 8001fa2:	4407      	add	r7, r0
 8001fa4:	eba8 0800 	sub.w	r8, r8, r0
 8001fa8:	e7e9      	b.n	8001f7e <__sflush_r+0xda>
 8001faa:	bf00      	nop
 8001fac:	20400001 	.word	0x20400001

08001fb0 <_fflush_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	690b      	ldr	r3, [r1, #16]
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	b1db      	cbz	r3, 8001ff2 <_fflush_r+0x42>
 8001fba:	b118      	cbz	r0, 8001fc4 <_fflush_r+0x14>
 8001fbc:	6983      	ldr	r3, [r0, #24]
 8001fbe:	b90b      	cbnz	r3, 8001fc4 <_fflush_r+0x14>
 8001fc0:	f000 f860 	bl	8002084 <__sinit>
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <_fflush_r+0x48>)
 8001fc6:	429c      	cmp	r4, r3
 8001fc8:	d109      	bne.n	8001fde <_fflush_r+0x2e>
 8001fca:	686c      	ldr	r4, [r5, #4]
 8001fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fd0:	b17b      	cbz	r3, 8001ff2 <_fflush_r+0x42>
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	4628      	mov	r0, r5
 8001fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fda:	f7ff bf63 	b.w	8001ea4 <__sflush_r>
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_fflush_r+0x4c>)
 8001fe0:	429c      	cmp	r4, r3
 8001fe2:	d101      	bne.n	8001fe8 <_fflush_r+0x38>
 8001fe4:	68ac      	ldr	r4, [r5, #8]
 8001fe6:	e7f1      	b.n	8001fcc <_fflush_r+0x1c>
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <_fflush_r+0x50>)
 8001fea:	429c      	cmp	r4, r3
 8001fec:	bf08      	it	eq
 8001fee:	68ec      	ldreq	r4, [r5, #12]
 8001ff0:	e7ec      	b.n	8001fcc <_fflush_r+0x1c>
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	bd38      	pop	{r3, r4, r5, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800296c 	.word	0x0800296c
 8001ffc:	0800298c 	.word	0x0800298c
 8002000:	0800294c 	.word	0x0800294c

08002004 <std>:
 8002004:	2300      	movs	r3, #0
 8002006:	b510      	push	{r4, lr}
 8002008:	4604      	mov	r4, r0
 800200a:	e9c0 3300 	strd	r3, r3, [r0]
 800200e:	6083      	str	r3, [r0, #8]
 8002010:	8181      	strh	r1, [r0, #12]
 8002012:	6643      	str	r3, [r0, #100]	; 0x64
 8002014:	81c2      	strh	r2, [r0, #14]
 8002016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800201a:	6183      	str	r3, [r0, #24]
 800201c:	4619      	mov	r1, r3
 800201e:	2208      	movs	r2, #8
 8002020:	305c      	adds	r0, #92	; 0x5c
 8002022:	f7ff fba9 	bl	8001778 <memset>
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <std+0x38>)
 8002028:	6224      	str	r4, [r4, #32]
 800202a:	6263      	str	r3, [r4, #36]	; 0x24
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <std+0x3c>)
 800202e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <std+0x40>)
 8002032:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <std+0x44>)
 8002036:	6323      	str	r3, [r4, #48]	; 0x30
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	08002471 	.word	0x08002471
 8002040:	08002493 	.word	0x08002493
 8002044:	080024cb 	.word	0x080024cb
 8002048:	080024ef 	.word	0x080024ef

0800204c <_cleanup_r>:
 800204c:	4901      	ldr	r1, [pc, #4]	; (8002054 <_cleanup_r+0x8>)
 800204e:	f000 b885 	b.w	800215c <_fwalk_reent>
 8002052:	bf00      	nop
 8002054:	08001fb1 	.word	0x08001fb1

08002058 <__sfmoreglue>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	2568      	movs	r5, #104	; 0x68
 800205c:	1e4a      	subs	r2, r1, #1
 800205e:	4355      	muls	r5, r2
 8002060:	460e      	mov	r6, r1
 8002062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002066:	f000 f955 	bl	8002314 <_malloc_r>
 800206a:	4604      	mov	r4, r0
 800206c:	b140      	cbz	r0, 8002080 <__sfmoreglue+0x28>
 800206e:	2100      	movs	r1, #0
 8002070:	e9c0 1600 	strd	r1, r6, [r0]
 8002074:	300c      	adds	r0, #12
 8002076:	60a0      	str	r0, [r4, #8]
 8002078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800207c:	f7ff fb7c 	bl	8001778 <memset>
 8002080:	4620      	mov	r0, r4
 8002082:	bd70      	pop	{r4, r5, r6, pc}

08002084 <__sinit>:
 8002084:	6983      	ldr	r3, [r0, #24]
 8002086:	b510      	push	{r4, lr}
 8002088:	4604      	mov	r4, r0
 800208a:	bb33      	cbnz	r3, 80020da <__sinit+0x56>
 800208c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002090:	6503      	str	r3, [r0, #80]	; 0x50
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <__sinit+0x58>)
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <__sinit+0x5c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6282      	str	r2, [r0, #40]	; 0x28
 800209a:	4298      	cmp	r0, r3
 800209c:	bf04      	itt	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	6183      	streq	r3, [r0, #24]
 80020a2:	f000 f81f 	bl	80020e4 <__sfp>
 80020a6:	6060      	str	r0, [r4, #4]
 80020a8:	4620      	mov	r0, r4
 80020aa:	f000 f81b 	bl	80020e4 <__sfp>
 80020ae:	60a0      	str	r0, [r4, #8]
 80020b0:	4620      	mov	r0, r4
 80020b2:	f000 f817 	bl	80020e4 <__sfp>
 80020b6:	2200      	movs	r2, #0
 80020b8:	60e0      	str	r0, [r4, #12]
 80020ba:	2104      	movs	r1, #4
 80020bc:	6860      	ldr	r0, [r4, #4]
 80020be:	f7ff ffa1 	bl	8002004 <std>
 80020c2:	2201      	movs	r2, #1
 80020c4:	2109      	movs	r1, #9
 80020c6:	68a0      	ldr	r0, [r4, #8]
 80020c8:	f7ff ff9c 	bl	8002004 <std>
 80020cc:	2202      	movs	r2, #2
 80020ce:	2112      	movs	r1, #18
 80020d0:	68e0      	ldr	r0, [r4, #12]
 80020d2:	f7ff ff97 	bl	8002004 <std>
 80020d6:	2301      	movs	r3, #1
 80020d8:	61a3      	str	r3, [r4, #24]
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	08002914 	.word	0x08002914
 80020e0:	0800204d 	.word	0x0800204d

080020e4 <__sfp>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <__sfp+0x70>)
 80020e8:	4607      	mov	r7, r0
 80020ea:	681e      	ldr	r6, [r3, #0]
 80020ec:	69b3      	ldr	r3, [r6, #24]
 80020ee:	b913      	cbnz	r3, 80020f6 <__sfp+0x12>
 80020f0:	4630      	mov	r0, r6
 80020f2:	f7ff ffc7 	bl	8002084 <__sinit>
 80020f6:	3648      	adds	r6, #72	; 0x48
 80020f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	d503      	bpl.n	8002108 <__sfp+0x24>
 8002100:	6833      	ldr	r3, [r6, #0]
 8002102:	b133      	cbz	r3, 8002112 <__sfp+0x2e>
 8002104:	6836      	ldr	r6, [r6, #0]
 8002106:	e7f7      	b.n	80020f8 <__sfp+0x14>
 8002108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800210c:	b16d      	cbz	r5, 800212a <__sfp+0x46>
 800210e:	3468      	adds	r4, #104	; 0x68
 8002110:	e7f4      	b.n	80020fc <__sfp+0x18>
 8002112:	2104      	movs	r1, #4
 8002114:	4638      	mov	r0, r7
 8002116:	f7ff ff9f 	bl	8002058 <__sfmoreglue>
 800211a:	6030      	str	r0, [r6, #0]
 800211c:	2800      	cmp	r0, #0
 800211e:	d1f1      	bne.n	8002104 <__sfp+0x20>
 8002120:	230c      	movs	r3, #12
 8002122:	4604      	mov	r4, r0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4620      	mov	r0, r4
 8002128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <__sfp+0x74>)
 800212c:	6665      	str	r5, [r4, #100]	; 0x64
 800212e:	e9c4 5500 	strd	r5, r5, [r4]
 8002132:	60a5      	str	r5, [r4, #8]
 8002134:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002138:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800213c:	2208      	movs	r2, #8
 800213e:	4629      	mov	r1, r5
 8002140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002144:	f7ff fb18 	bl	8001778 <memset>
 8002148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800214c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002150:	e7e9      	b.n	8002126 <__sfp+0x42>
 8002152:	bf00      	nop
 8002154:	08002914 	.word	0x08002914
 8002158:	ffff0001 	.word	0xffff0001

0800215c <_fwalk_reent>:
 800215c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002160:	4680      	mov	r8, r0
 8002162:	4689      	mov	r9, r1
 8002164:	2600      	movs	r6, #0
 8002166:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800216a:	b914      	cbnz	r4, 8002172 <_fwalk_reent+0x16>
 800216c:	4630      	mov	r0, r6
 800216e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002172:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002176:	3f01      	subs	r7, #1
 8002178:	d501      	bpl.n	800217e <_fwalk_reent+0x22>
 800217a:	6824      	ldr	r4, [r4, #0]
 800217c:	e7f5      	b.n	800216a <_fwalk_reent+0xe>
 800217e:	89ab      	ldrh	r3, [r5, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d907      	bls.n	8002194 <_fwalk_reent+0x38>
 8002184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002188:	3301      	adds	r3, #1
 800218a:	d003      	beq.n	8002194 <_fwalk_reent+0x38>
 800218c:	4629      	mov	r1, r5
 800218e:	4640      	mov	r0, r8
 8002190:	47c8      	blx	r9
 8002192:	4306      	orrs	r6, r0
 8002194:	3568      	adds	r5, #104	; 0x68
 8002196:	e7ee      	b.n	8002176 <_fwalk_reent+0x1a>

08002198 <__swhatbuf_r>:
 8002198:	b570      	push	{r4, r5, r6, lr}
 800219a:	460e      	mov	r6, r1
 800219c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a0:	b096      	sub	sp, #88	; 0x58
 80021a2:	2900      	cmp	r1, #0
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	da07      	bge.n	80021ba <__swhatbuf_r+0x22>
 80021aa:	2300      	movs	r3, #0
 80021ac:	602b      	str	r3, [r5, #0]
 80021ae:	89b3      	ldrh	r3, [r6, #12]
 80021b0:	061a      	lsls	r2, r3, #24
 80021b2:	d410      	bmi.n	80021d6 <__swhatbuf_r+0x3e>
 80021b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b8:	e00e      	b.n	80021d8 <__swhatbuf_r+0x40>
 80021ba:	466a      	mov	r2, sp
 80021bc:	f000 f9be 	bl	800253c <_fstat_r>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	dbf2      	blt.n	80021aa <__swhatbuf_r+0x12>
 80021c4:	9a01      	ldr	r2, [sp, #4]
 80021c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80021ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80021ce:	425a      	negs	r2, r3
 80021d0:	415a      	adcs	r2, r3
 80021d2:	602a      	str	r2, [r5, #0]
 80021d4:	e7ee      	b.n	80021b4 <__swhatbuf_r+0x1c>
 80021d6:	2340      	movs	r3, #64	; 0x40
 80021d8:	2000      	movs	r0, #0
 80021da:	6023      	str	r3, [r4, #0]
 80021dc:	b016      	add	sp, #88	; 0x58
 80021de:	bd70      	pop	{r4, r5, r6, pc}

080021e0 <__smakebuf_r>:
 80021e0:	898b      	ldrh	r3, [r1, #12]
 80021e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021e4:	079d      	lsls	r5, r3, #30
 80021e6:	4606      	mov	r6, r0
 80021e8:	460c      	mov	r4, r1
 80021ea:	d507      	bpl.n	80021fc <__smakebuf_r+0x1c>
 80021ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	6123      	str	r3, [r4, #16]
 80021f4:	2301      	movs	r3, #1
 80021f6:	6163      	str	r3, [r4, #20]
 80021f8:	b002      	add	sp, #8
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	ab01      	add	r3, sp, #4
 80021fe:	466a      	mov	r2, sp
 8002200:	f7ff ffca 	bl	8002198 <__swhatbuf_r>
 8002204:	9900      	ldr	r1, [sp, #0]
 8002206:	4605      	mov	r5, r0
 8002208:	4630      	mov	r0, r6
 800220a:	f000 f883 	bl	8002314 <_malloc_r>
 800220e:	b948      	cbnz	r0, 8002224 <__smakebuf_r+0x44>
 8002210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002214:	059a      	lsls	r2, r3, #22
 8002216:	d4ef      	bmi.n	80021f8 <__smakebuf_r+0x18>
 8002218:	f023 0303 	bic.w	r3, r3, #3
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	81a3      	strh	r3, [r4, #12]
 8002222:	e7e3      	b.n	80021ec <__smakebuf_r+0xc>
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <__smakebuf_r+0x7c>)
 8002226:	62b3      	str	r3, [r6, #40]	; 0x28
 8002228:	89a3      	ldrh	r3, [r4, #12]
 800222a:	6020      	str	r0, [r4, #0]
 800222c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002230:	81a3      	strh	r3, [r4, #12]
 8002232:	9b00      	ldr	r3, [sp, #0]
 8002234:	6120      	str	r0, [r4, #16]
 8002236:	6163      	str	r3, [r4, #20]
 8002238:	9b01      	ldr	r3, [sp, #4]
 800223a:	b15b      	cbz	r3, 8002254 <__smakebuf_r+0x74>
 800223c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002240:	4630      	mov	r0, r6
 8002242:	f000 f98d 	bl	8002560 <_isatty_r>
 8002246:	b128      	cbz	r0, 8002254 <__smakebuf_r+0x74>
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	81a3      	strh	r3, [r4, #12]
 8002254:	89a3      	ldrh	r3, [r4, #12]
 8002256:	431d      	orrs	r5, r3
 8002258:	81a5      	strh	r5, [r4, #12]
 800225a:	e7cd      	b.n	80021f8 <__smakebuf_r+0x18>
 800225c:	0800204d 	.word	0x0800204d

08002260 <memchr>:
 8002260:	b510      	push	{r4, lr}
 8002262:	b2c9      	uxtb	r1, r1
 8002264:	4402      	add	r2, r0
 8002266:	4290      	cmp	r0, r2
 8002268:	4603      	mov	r3, r0
 800226a:	d101      	bne.n	8002270 <memchr+0x10>
 800226c:	2300      	movs	r3, #0
 800226e:	e003      	b.n	8002278 <memchr+0x18>
 8002270:	781c      	ldrb	r4, [r3, #0]
 8002272:	3001      	adds	r0, #1
 8002274:	428c      	cmp	r4, r1
 8002276:	d1f6      	bne.n	8002266 <memchr+0x6>
 8002278:	4618      	mov	r0, r3
 800227a:	bd10      	pop	{r4, pc}

0800227c <_free_r>:
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	4605      	mov	r5, r0
 8002280:	2900      	cmp	r1, #0
 8002282:	d043      	beq.n	800230c <_free_r+0x90>
 8002284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002288:	1f0c      	subs	r4, r1, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	bfb8      	it	lt
 800228e:	18e4      	addlt	r4, r4, r3
 8002290:	f000 f988 	bl	80025a4 <__malloc_lock>
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <_free_r+0x94>)
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	4610      	mov	r0, r2
 800229a:	b933      	cbnz	r3, 80022aa <_free_r+0x2e>
 800229c:	6063      	str	r3, [r4, #4]
 800229e:	6014      	str	r4, [r2, #0]
 80022a0:	4628      	mov	r0, r5
 80022a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022a6:	f000 b97e 	b.w	80025a6 <__malloc_unlock>
 80022aa:	42a3      	cmp	r3, r4
 80022ac:	d90b      	bls.n	80022c6 <_free_r+0x4a>
 80022ae:	6821      	ldr	r1, [r4, #0]
 80022b0:	1862      	adds	r2, r4, r1
 80022b2:	4293      	cmp	r3, r2
 80022b4:	bf01      	itttt	eq
 80022b6:	681a      	ldreq	r2, [r3, #0]
 80022b8:	685b      	ldreq	r3, [r3, #4]
 80022ba:	1852      	addeq	r2, r2, r1
 80022bc:	6022      	streq	r2, [r4, #0]
 80022be:	6063      	str	r3, [r4, #4]
 80022c0:	6004      	str	r4, [r0, #0]
 80022c2:	e7ed      	b.n	80022a0 <_free_r+0x24>
 80022c4:	4613      	mov	r3, r2
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	b10a      	cbz	r2, 80022ce <_free_r+0x52>
 80022ca:	42a2      	cmp	r2, r4
 80022cc:	d9fa      	bls.n	80022c4 <_free_r+0x48>
 80022ce:	6819      	ldr	r1, [r3, #0]
 80022d0:	1858      	adds	r0, r3, r1
 80022d2:	42a0      	cmp	r0, r4
 80022d4:	d10b      	bne.n	80022ee <_free_r+0x72>
 80022d6:	6820      	ldr	r0, [r4, #0]
 80022d8:	4401      	add	r1, r0
 80022da:	1858      	adds	r0, r3, r1
 80022dc:	4282      	cmp	r2, r0
 80022de:	6019      	str	r1, [r3, #0]
 80022e0:	d1de      	bne.n	80022a0 <_free_r+0x24>
 80022e2:	6810      	ldr	r0, [r2, #0]
 80022e4:	6852      	ldr	r2, [r2, #4]
 80022e6:	4401      	add	r1, r0
 80022e8:	6019      	str	r1, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	e7d8      	b.n	80022a0 <_free_r+0x24>
 80022ee:	d902      	bls.n	80022f6 <_free_r+0x7a>
 80022f0:	230c      	movs	r3, #12
 80022f2:	602b      	str	r3, [r5, #0]
 80022f4:	e7d4      	b.n	80022a0 <_free_r+0x24>
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	1821      	adds	r1, r4, r0
 80022fa:	428a      	cmp	r2, r1
 80022fc:	bf01      	itttt	eq
 80022fe:	6811      	ldreq	r1, [r2, #0]
 8002300:	6852      	ldreq	r2, [r2, #4]
 8002302:	1809      	addeq	r1, r1, r0
 8002304:	6021      	streq	r1, [r4, #0]
 8002306:	6062      	str	r2, [r4, #4]
 8002308:	605c      	str	r4, [r3, #4]
 800230a:	e7c9      	b.n	80022a0 <_free_r+0x24>
 800230c:	bd38      	pop	{r3, r4, r5, pc}
 800230e:	bf00      	nop
 8002310:	200000d0 	.word	0x200000d0

08002314 <_malloc_r>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	1ccd      	adds	r5, r1, #3
 8002318:	f025 0503 	bic.w	r5, r5, #3
 800231c:	3508      	adds	r5, #8
 800231e:	2d0c      	cmp	r5, #12
 8002320:	bf38      	it	cc
 8002322:	250c      	movcc	r5, #12
 8002324:	2d00      	cmp	r5, #0
 8002326:	4606      	mov	r6, r0
 8002328:	db01      	blt.n	800232e <_malloc_r+0x1a>
 800232a:	42a9      	cmp	r1, r5
 800232c:	d903      	bls.n	8002336 <_malloc_r+0x22>
 800232e:	230c      	movs	r3, #12
 8002330:	6033      	str	r3, [r6, #0]
 8002332:	2000      	movs	r0, #0
 8002334:	bd70      	pop	{r4, r5, r6, pc}
 8002336:	f000 f935 	bl	80025a4 <__malloc_lock>
 800233a:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <_malloc_r+0xac>)
 800233c:	6814      	ldr	r4, [r2, #0]
 800233e:	4621      	mov	r1, r4
 8002340:	b991      	cbnz	r1, 8002368 <_malloc_r+0x54>
 8002342:	4c20      	ldr	r4, [pc, #128]	; (80023c4 <_malloc_r+0xb0>)
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	b91b      	cbnz	r3, 8002350 <_malloc_r+0x3c>
 8002348:	4630      	mov	r0, r6
 800234a:	f000 f83d 	bl	80023c8 <_sbrk_r>
 800234e:	6020      	str	r0, [r4, #0]
 8002350:	4629      	mov	r1, r5
 8002352:	4630      	mov	r0, r6
 8002354:	f000 f838 	bl	80023c8 <_sbrk_r>
 8002358:	1c43      	adds	r3, r0, #1
 800235a:	d124      	bne.n	80023a6 <_malloc_r+0x92>
 800235c:	230c      	movs	r3, #12
 800235e:	4630      	mov	r0, r6
 8002360:	6033      	str	r3, [r6, #0]
 8002362:	f000 f920 	bl	80025a6 <__malloc_unlock>
 8002366:	e7e4      	b.n	8002332 <_malloc_r+0x1e>
 8002368:	680b      	ldr	r3, [r1, #0]
 800236a:	1b5b      	subs	r3, r3, r5
 800236c:	d418      	bmi.n	80023a0 <_malloc_r+0x8c>
 800236e:	2b0b      	cmp	r3, #11
 8002370:	d90f      	bls.n	8002392 <_malloc_r+0x7e>
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	18cc      	adds	r4, r1, r3
 8002376:	50cd      	str	r5, [r1, r3]
 8002378:	4630      	mov	r0, r6
 800237a:	f000 f914 	bl	80025a6 <__malloc_unlock>
 800237e:	f104 000b 	add.w	r0, r4, #11
 8002382:	1d23      	adds	r3, r4, #4
 8002384:	f020 0007 	bic.w	r0, r0, #7
 8002388:	1ac3      	subs	r3, r0, r3
 800238a:	d0d3      	beq.n	8002334 <_malloc_r+0x20>
 800238c:	425a      	negs	r2, r3
 800238e:	50e2      	str	r2, [r4, r3]
 8002390:	e7d0      	b.n	8002334 <_malloc_r+0x20>
 8002392:	684b      	ldr	r3, [r1, #4]
 8002394:	428c      	cmp	r4, r1
 8002396:	bf16      	itet	ne
 8002398:	6063      	strne	r3, [r4, #4]
 800239a:	6013      	streq	r3, [r2, #0]
 800239c:	460c      	movne	r4, r1
 800239e:	e7eb      	b.n	8002378 <_malloc_r+0x64>
 80023a0:	460c      	mov	r4, r1
 80023a2:	6849      	ldr	r1, [r1, #4]
 80023a4:	e7cc      	b.n	8002340 <_malloc_r+0x2c>
 80023a6:	1cc4      	adds	r4, r0, #3
 80023a8:	f024 0403 	bic.w	r4, r4, #3
 80023ac:	42a0      	cmp	r0, r4
 80023ae:	d005      	beq.n	80023bc <_malloc_r+0xa8>
 80023b0:	1a21      	subs	r1, r4, r0
 80023b2:	4630      	mov	r0, r6
 80023b4:	f000 f808 	bl	80023c8 <_sbrk_r>
 80023b8:	3001      	adds	r0, #1
 80023ba:	d0cf      	beq.n	800235c <_malloc_r+0x48>
 80023bc:	6025      	str	r5, [r4, #0]
 80023be:	e7db      	b.n	8002378 <_malloc_r+0x64>
 80023c0:	200000d0 	.word	0x200000d0
 80023c4:	200000d4 	.word	0x200000d4

080023c8 <_sbrk_r>:
 80023c8:	b538      	push	{r3, r4, r5, lr}
 80023ca:	2300      	movs	r3, #0
 80023cc:	4c05      	ldr	r4, [pc, #20]	; (80023e4 <_sbrk_r+0x1c>)
 80023ce:	4605      	mov	r5, r0
 80023d0:	4608      	mov	r0, r1
 80023d2:	6023      	str	r3, [r4, #0]
 80023d4:	f7ff f916 	bl	8001604 <_sbrk>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d102      	bne.n	80023e2 <_sbrk_r+0x1a>
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	b103      	cbz	r3, 80023e2 <_sbrk_r+0x1a>
 80023e0:	602b      	str	r3, [r5, #0]
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	200000dc 	.word	0x200000dc

080023e8 <_raise_r>:
 80023e8:	291f      	cmp	r1, #31
 80023ea:	b538      	push	{r3, r4, r5, lr}
 80023ec:	4604      	mov	r4, r0
 80023ee:	460d      	mov	r5, r1
 80023f0:	d904      	bls.n	80023fc <_raise_r+0x14>
 80023f2:	2316      	movs	r3, #22
 80023f4:	6003      	str	r3, [r0, #0]
 80023f6:	f04f 30ff 	mov.w	r0, #4294967295
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80023fe:	b112      	cbz	r2, 8002406 <_raise_r+0x1e>
 8002400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002404:	b94b      	cbnz	r3, 800241a <_raise_r+0x32>
 8002406:	4620      	mov	r0, r4
 8002408:	f000 f830 	bl	800246c <_getpid_r>
 800240c:	462a      	mov	r2, r5
 800240e:	4601      	mov	r1, r0
 8002410:	4620      	mov	r0, r4
 8002412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002416:	f000 b817 	b.w	8002448 <_kill_r>
 800241a:	2b01      	cmp	r3, #1
 800241c:	d00a      	beq.n	8002434 <_raise_r+0x4c>
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	d103      	bne.n	800242a <_raise_r+0x42>
 8002422:	2316      	movs	r3, #22
 8002424:	6003      	str	r3, [r0, #0]
 8002426:	2001      	movs	r0, #1
 8002428:	e7e7      	b.n	80023fa <_raise_r+0x12>
 800242a:	2400      	movs	r4, #0
 800242c:	4628      	mov	r0, r5
 800242e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002432:	4798      	blx	r3
 8002434:	2000      	movs	r0, #0
 8002436:	e7e0      	b.n	80023fa <_raise_r+0x12>

08002438 <raise>:
 8002438:	4b02      	ldr	r3, [pc, #8]	; (8002444 <raise+0xc>)
 800243a:	4601      	mov	r1, r0
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	f7ff bfd3 	b.w	80023e8 <_raise_r>
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000

08002448 <_kill_r>:
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	2300      	movs	r3, #0
 800244c:	4c06      	ldr	r4, [pc, #24]	; (8002468 <_kill_r+0x20>)
 800244e:	4605      	mov	r5, r0
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	f7ff f852 	bl	80014fe <_kill>
 800245a:	1c43      	adds	r3, r0, #1
 800245c:	d102      	bne.n	8002464 <_kill_r+0x1c>
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	b103      	cbz	r3, 8002464 <_kill_r+0x1c>
 8002462:	602b      	str	r3, [r5, #0]
 8002464:	bd38      	pop	{r3, r4, r5, pc}
 8002466:	bf00      	nop
 8002468:	200000dc 	.word	0x200000dc

0800246c <_getpid_r>:
 800246c:	f7ff b840 	b.w	80014f0 <_getpid>

08002470 <__sread>:
 8002470:	b510      	push	{r4, lr}
 8002472:	460c      	mov	r4, r1
 8002474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002478:	f000 f896 	bl	80025a8 <_read_r>
 800247c:	2800      	cmp	r0, #0
 800247e:	bfab      	itete	ge
 8002480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002482:	89a3      	ldrhlt	r3, [r4, #12]
 8002484:	181b      	addge	r3, r3, r0
 8002486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800248a:	bfac      	ite	ge
 800248c:	6563      	strge	r3, [r4, #84]	; 0x54
 800248e:	81a3      	strhlt	r3, [r4, #12]
 8002490:	bd10      	pop	{r4, pc}

08002492 <__swrite>:
 8002492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002496:	461f      	mov	r7, r3
 8002498:	898b      	ldrh	r3, [r1, #12]
 800249a:	4605      	mov	r5, r0
 800249c:	05db      	lsls	r3, r3, #23
 800249e:	460c      	mov	r4, r1
 80024a0:	4616      	mov	r6, r2
 80024a2:	d505      	bpl.n	80024b0 <__swrite+0x1e>
 80024a4:	2302      	movs	r3, #2
 80024a6:	2200      	movs	r2, #0
 80024a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ac:	f000 f868 	bl	8002580 <_lseek_r>
 80024b0:	89a3      	ldrh	r3, [r4, #12]
 80024b2:	4632      	mov	r2, r6
 80024b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024b8:	81a3      	strh	r3, [r4, #12]
 80024ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024be:	463b      	mov	r3, r7
 80024c0:	4628      	mov	r0, r5
 80024c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024c6:	f000 b817 	b.w	80024f8 <_write_r>

080024ca <__sseek>:
 80024ca:	b510      	push	{r4, lr}
 80024cc:	460c      	mov	r4, r1
 80024ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d2:	f000 f855 	bl	8002580 <_lseek_r>
 80024d6:	1c43      	adds	r3, r0, #1
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	bf15      	itete	ne
 80024dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80024de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024e6:	81a3      	strheq	r3, [r4, #12]
 80024e8:	bf18      	it	ne
 80024ea:	81a3      	strhne	r3, [r4, #12]
 80024ec:	bd10      	pop	{r4, pc}

080024ee <__sclose>:
 80024ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f2:	f000 b813 	b.w	800251c <_close_r>
	...

080024f8 <_write_r>:
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	4605      	mov	r5, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	2200      	movs	r2, #0
 8002502:	4c05      	ldr	r4, [pc, #20]	; (8002518 <_write_r+0x20>)
 8002504:	6022      	str	r2, [r4, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	f7ff f830 	bl	800156c <_write>
 800250c:	1c43      	adds	r3, r0, #1
 800250e:	d102      	bne.n	8002516 <_write_r+0x1e>
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	b103      	cbz	r3, 8002516 <_write_r+0x1e>
 8002514:	602b      	str	r3, [r5, #0]
 8002516:	bd38      	pop	{r3, r4, r5, pc}
 8002518:	200000dc 	.word	0x200000dc

0800251c <_close_r>:
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	2300      	movs	r3, #0
 8002520:	4c05      	ldr	r4, [pc, #20]	; (8002538 <_close_r+0x1c>)
 8002522:	4605      	mov	r5, r0
 8002524:	4608      	mov	r0, r1
 8002526:	6023      	str	r3, [r4, #0]
 8002528:	f7ff f83c 	bl	80015a4 <_close>
 800252c:	1c43      	adds	r3, r0, #1
 800252e:	d102      	bne.n	8002536 <_close_r+0x1a>
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	b103      	cbz	r3, 8002536 <_close_r+0x1a>
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	bd38      	pop	{r3, r4, r5, pc}
 8002538:	200000dc 	.word	0x200000dc

0800253c <_fstat_r>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	2300      	movs	r3, #0
 8002540:	4c06      	ldr	r4, [pc, #24]	; (800255c <_fstat_r+0x20>)
 8002542:	4605      	mov	r5, r0
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	6023      	str	r3, [r4, #0]
 800254a:	f7ff f836 	bl	80015ba <_fstat>
 800254e:	1c43      	adds	r3, r0, #1
 8002550:	d102      	bne.n	8002558 <_fstat_r+0x1c>
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	b103      	cbz	r3, 8002558 <_fstat_r+0x1c>
 8002556:	602b      	str	r3, [r5, #0]
 8002558:	bd38      	pop	{r3, r4, r5, pc}
 800255a:	bf00      	nop
 800255c:	200000dc 	.word	0x200000dc

08002560 <_isatty_r>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	2300      	movs	r3, #0
 8002564:	4c05      	ldr	r4, [pc, #20]	; (800257c <_isatty_r+0x1c>)
 8002566:	4605      	mov	r5, r0
 8002568:	4608      	mov	r0, r1
 800256a:	6023      	str	r3, [r4, #0]
 800256c:	f7ff f834 	bl	80015d8 <_isatty>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d102      	bne.n	800257a <_isatty_r+0x1a>
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	b103      	cbz	r3, 800257a <_isatty_r+0x1a>
 8002578:	602b      	str	r3, [r5, #0]
 800257a:	bd38      	pop	{r3, r4, r5, pc}
 800257c:	200000dc 	.word	0x200000dc

08002580 <_lseek_r>:
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	4605      	mov	r5, r0
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	2200      	movs	r2, #0
 800258a:	4c05      	ldr	r4, [pc, #20]	; (80025a0 <_lseek_r+0x20>)
 800258c:	6022      	str	r2, [r4, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	f7ff f82c 	bl	80015ec <_lseek>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	d102      	bne.n	800259e <_lseek_r+0x1e>
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	b103      	cbz	r3, 800259e <_lseek_r+0x1e>
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	200000dc 	.word	0x200000dc

080025a4 <__malloc_lock>:
 80025a4:	4770      	bx	lr

080025a6 <__malloc_unlock>:
 80025a6:	4770      	bx	lr

080025a8 <_read_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4605      	mov	r5, r0
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	2200      	movs	r2, #0
 80025b2:	4c05      	ldr	r4, [pc, #20]	; (80025c8 <_read_r+0x20>)
 80025b4:	6022      	str	r2, [r4, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7fe ffbb 	bl	8001532 <_read>
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	d102      	bne.n	80025c6 <_read_r+0x1e>
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	b103      	cbz	r3, 80025c6 <_read_r+0x1e>
 80025c4:	602b      	str	r3, [r5, #0]
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
 80025c8:	200000dc 	.word	0x200000dc

080025cc <_init>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	bf00      	nop
 80025d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d2:	bc08      	pop	{r3}
 80025d4:	469e      	mov	lr, r3
 80025d6:	4770      	bx	lr

080025d8 <_fini>:
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	bf00      	nop
 80025dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025de:	bc08      	pop	{r3}
 80025e0:	469e      	mov	lr, r3
 80025e2:	4770      	bx	lr
