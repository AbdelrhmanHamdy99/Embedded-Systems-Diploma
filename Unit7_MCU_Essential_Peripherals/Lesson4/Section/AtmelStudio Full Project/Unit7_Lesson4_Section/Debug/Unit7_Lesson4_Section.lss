
Unit7_Lesson4_Section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000078c  00000820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800078  00800078  00000838  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001904  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092d  00000000  00000000  00002aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  0000341c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c8  00000000  00000000  000035d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c24  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000047c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 03 	call	0x70e	; 0x70e <main>
  8a:	0c 94 c4 03 	jmp	0x788	; 0x788 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MCAL_DIO_Init>:
 * 				  Can be a value of DIO[A,B,C,D]
 * @Param [in]	- pinConfig: a pointer to a structure that contains pin configuration
 * @returnValue - None
 * Note			- default pinMode = DIO_PinMode_In_Floating
 */
void MCAL_DIO_Init(DIO_T* DIOx, DIO_PinConfig_T* pinConfig){
  92:	fc 01       	movw	r30, r24
  94:	db 01       	movw	r26, r22
	if(pinConfig->pinNumber == DIO_Pin_Not_Used)
		return ;
	switch(pinConfig->pinMode){
  96:	11 96       	adiw	r26, 0x01	; 1
  98:	8c 91       	ld	r24, X
  9a:	11 97       	sbiw	r26, 0x01	; 1
  9c:	88 23       	and	r24, r24
  9e:	19 f0       	breq	.+6      	; 0xa6 <MCAL_DIO_Init+0x14>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	69 f0       	breq	.+26     	; 0xbe <MCAL_DIO_Init+0x2c>
  a4:	23 c0       	rjmp	.+70     	; 0xec <MCAL_DIO_Init+0x5a>
		case DIO_PinMode_Out:
			DIOx->DDR |= (1 << pinConfig->pinNumber);
  a6:	21 81       	ldd	r18, Z+1	; 0x01
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0c 90       	ld	r0, X
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <MCAL_DIO_Init+0x22>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <MCAL_DIO_Init+0x1e>
  b8:	82 2b       	or	r24, r18
  ba:	81 83       	std	Z+1, r24	; 0x01
			break;
  bc:	08 95       	ret
		case DIO_PinMode_In_Pull_Up:
			DIOx->PORT |=  (1<<pinConfig->pinNumber); /*activate Pull-Up resistor*/
  be:	42 81       	ldd	r20, Z+2	; 0x02
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9c 01       	movw	r18, r24
  c6:	0c 90       	ld	r0, X
  c8:	02 c0       	rjmp	.+4      	; 0xce <MCAL_DIO_Init+0x3c>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <MCAL_DIO_Init+0x38>
  d2:	24 2b       	or	r18, r20
  d4:	22 83       	std	Z+2, r18	; 0x02
			DIOx->DDR  &= ~(1<<pinConfig->pinNumber);
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	0c 90       	ld	r0, X
  da:	02 c0       	rjmp	.+4      	; 0xe0 <MCAL_DIO_Init+0x4e>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <MCAL_DIO_Init+0x4a>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	81 83       	std	Z+1, r24	; 0x01
			break;
  ea:	08 95       	ret
		default:
			DIOx->PORT &= ~(1<<pinConfig->pinNumber); /*deactivate Pull-Up resistor*/
  ec:	32 81       	ldd	r19, Z+2	; 0x02
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	ac 01       	movw	r20, r24
  f4:	0c 90       	ld	r0, X
  f6:	02 c0       	rjmp	.+4      	; 0xfc <MCAL_DIO_Init+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <MCAL_DIO_Init+0x66>
 100:	24 2f       	mov	r18, r20
 102:	20 95       	com	r18
 104:	23 23       	and	r18, r19
 106:	22 83       	std	Z+2, r18	; 0x02
			DIOx->DDR  &= ~(1<<pinConfig->pinNumber); 
 108:	21 81       	ldd	r18, Z+1	; 0x01
 10a:	0c 90       	ld	r0, X
 10c:	02 c0       	rjmp	.+4      	; 0x112 <MCAL_DIO_Init+0x80>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <MCAL_DIO_Init+0x7c>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	81 83       	std	Z+1, r24	; 0x01
 11c:	08 95       	ret

0000011e <MCAL_DIO_WritePin>:
 * Note			- None
 */
void MCAL_DIO_WritePin(DIO_T* DIOx,uint8_t Piny,uint8_t value){
	if(Piny == DIO_Pin_Not_Used)
		return ;
	switch(value){
 11e:	44 23       	and	r20, r20
 120:	71 f0       	breq	.+28     	; 0x13e <MCAL_DIO_WritePin+0x20>
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	c1 f4       	brne	.+48     	; 0x156 <MCAL_DIO_WritePin+0x38>
		case DIO_PinValue_High :
			DIOx->PORT |= (1<< Piny);
 126:	fc 01       	movw	r30, r24
 128:	42 81       	ldd	r20, Z+2	; 0x02
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <MCAL_DIO_WritePin+0x16>
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <MCAL_DIO_WritePin+0x12>
 138:	24 2b       	or	r18, r20
 13a:	22 83       	std	Z+2, r18	; 0x02
			break;
 13c:	08 95       	ret
		case DIO_PinValue_Low :
			DIOx->PORT &= ~(1<< Piny);
 13e:	fc 01       	movw	r30, r24
 140:	42 81       	ldd	r20, Z+2	; 0x02
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <MCAL_DIO_WritePin+0x2e>
 148:	22 0f       	add	r18, r18
 14a:	33 1f       	adc	r19, r19
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <MCAL_DIO_WritePin+0x2a>
 150:	20 95       	com	r18
 152:	24 23       	and	r18, r20
 154:	22 83       	std	Z+2, r18	; 0x02
 156:	08 95       	ret

00000158 <LCD_Write_Command>:
 * @brief		- Send Command To the LCD
 * @Param [in]	- command : the command to be sent
 * @returnValue	- None
 * @Notes		- Wrong or Invalid Command is not handled
 */
void LCD_Write_Command(char command){
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <LCD_Write_Command+0x12>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	d8 2e       	mov	r13, r24
	int8_t i; /*iterator*/
	DIO_PinConfig_T pinConfig; /*a structure to hold configurations of pins*/

	/*Change direction of data bins to be output*/
	pinConfig.pinMode     = DIO_PinMode_Out;
 170:	1a 82       	std	Y+2, r1	; 0x02
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 172:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	82 1b       	sub	r24, r18
 17c:	91 09       	sbc	r25, r1
 17e:	08 97       	sbiw	r24, 0x08	; 8
 180:	04 f5       	brge	.+64     	; 0x1c2 <LCD_Write_Command+0x6a>
 182:	87 e0       	ldi	r24, 0x07	; 7
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	17 e0       	ldi	r17, 0x07	; 7
 188:	68 94       	set
 18a:	ee 24       	eor	r14, r14
 18c:	e3 f8       	bld	r14, 3
 18e:	f1 2c       	mov	r15, r1
		pinConfig.pinNumber   = LCD_DataPins[i];
 190:	fc 01       	movw	r30, r24
 192:	e0 5a       	subi	r30, 0xA0	; 160
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	80 81       	ld	r24, Z
 198:	89 83       	std	Y+1, r24	; 0x01
		MCAL_DIO_Init(LCD_Data_Port, &pinConfig);
 19a:	be 01       	movw	r22, r28
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	7f 4f       	sbci	r23, 0xFF	; 255
 1a0:	89 e3       	ldi	r24, 0x39	; 57
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_DIO_Init>
 1a8:	11 50       	subi	r17, 0x01	; 1
	int8_t i; /*iterator*/
	DIO_PinConfig_T pinConfig; /*a structure to hold configurations of pins*/

	/*Change direction of data bins to be output*/
	pinConfig.pinMode     = DIO_PinMode_Out;
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 1aa:	81 2f       	mov	r24, r17
 1ac:	01 2e       	mov	r0, r17
 1ae:	00 0c       	add	r0, r0
 1b0:	99 0b       	sbc	r25, r25
 1b2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 1b6:	a7 01       	movw	r20, r14
 1b8:	42 1b       	sub	r20, r18
 1ba:	51 09       	sbc	r21, r1
 1bc:	84 17       	cp	r24, r20
 1be:	95 07       	cpc	r25, r21
 1c0:	3c f7       	brge	.-50     	; 0x190 <LCD_Write_Command+0x38>
		pinConfig.pinNumber   = LCD_DataPins[i];
		MCAL_DIO_Init(LCD_Data_Port, &pinConfig);
	}

	MCAL_DIO_WritePin(LCD_Control_Port, RS, DIO_PinValue_Low);/*Instruction*/
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	86 e3       	ldi	r24, 0x36	; 54
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
	MCAL_DIO_WritePin(LCD_Control_Port, RW, DIO_PinValue_Low);/*Write*/
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>

	/*Write command*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 1da:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	82 1b       	sub	r24, r18
 1e4:	91 09       	sbc	r25, r1
 1e6:	08 97       	sbiw	r24, 0x08	; 8
 1e8:	3c f5       	brge	.+78     	; 0x238 <LCD_Write_Command+0xe0>
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0f 2e       	mov	r0, r31
 1f0:	f7 e0       	ldi	r31, 0x07	; 7
 1f2:	cf 2e       	mov	r12, r31
 1f4:	f0 2d       	mov	r31, r0
		MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i) &1);
 1f6:	ed 2c       	mov	r14, r13
 1f8:	f1 2c       	mov	r15, r1

	MCAL_DIO_WritePin(LCD_Control_Port, RS, DIO_PinValue_Low);/*Instruction*/
	MCAL_DIO_WritePin(LCD_Control_Port, RW, DIO_PinValue_Low);/*Write*/

	/*Write command*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 1fa:	08 e0       	ldi	r16, 0x08	; 8
 1fc:	10 e0       	ldi	r17, 0x00	; 0
		MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i) &1);
 1fe:	a7 01       	movw	r20, r14
 200:	08 2e       	mov	r0, r24
 202:	02 c0       	rjmp	.+4      	; 0x208 <LCD_Write_Command+0xb0>
 204:	55 95       	asr	r21
 206:	47 95       	ror	r20
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <LCD_Write_Command+0xac>
 20c:	41 70       	andi	r20, 0x01	; 1
 20e:	fc 01       	movw	r30, r24
 210:	e0 5a       	subi	r30, 0xA0	; 160
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	60 81       	ld	r22, Z
 216:	89 e3       	ldi	r24, 0x39	; 57
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 21e:	ca 94       	dec	r12

	MCAL_DIO_WritePin(LCD_Control_Port, RS, DIO_PinValue_Low);/*Instruction*/
	MCAL_DIO_WritePin(LCD_Control_Port, RW, DIO_PinValue_Low);/*Write*/

	/*Write command*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 220:	8c 2d       	mov	r24, r12
 222:	0c 2c       	mov	r0, r12
 224:	00 0c       	add	r0, r0
 226:	99 0b       	sbc	r25, r25
 228:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 22c:	a8 01       	movw	r20, r16
 22e:	42 1b       	sub	r20, r18
 230:	51 09       	sbc	r21, r1
 232:	84 17       	cp	r24, r20
 234:	95 07       	cpc	r25, r21
 236:	1c f7       	brge	.-58     	; 0x1fe <LCD_Write_Command+0xa6>
		MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i) &1);
	}
	if(LCD_Interface == LCD_4_bit){
 238:	24 30       	cpi	r18, 0x04	; 4
 23a:	09 f0       	breq	.+2      	; 0x23e <LCD_Write_Command+0xe6>
 23c:	45 c0       	rjmp	.+138    	; 0x2c8 <LCD_Write_Command+0x170>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	00 00       	nop
		_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	63 e0       	ldi	r22, 0x03	; 3
 244:	86 e3       	ldi	r24, 0x36	; 54
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_Write_Command+0xf6>
 24e:	00 00       	nop
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	86 e3       	ldi	r24, 0x36	; 54
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 25c:	00 00       	nop
		_delay_us(0.02); /*TH = 20ns (min = 10ns)*/
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 25e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__data_end>
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	86 1b       	sub	r24, r22
 26a:	97 0b       	sbc	r25, r23
 26c:	08 97       	sbiw	r24, 0x08	; 8
 26e:	54 f5       	brge	.+84     	; 0x2c4 <LCD_Write_Command+0x16c>
 270:	27 e0       	ldi	r18, 0x07	; 7
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	0f 2e       	mov	r0, r31
 276:	f7 e0       	ldi	r31, 0x07	; 7
 278:	cf 2e       	mov	r12, r31
 27a:	f0 2d       	mov	r31, r0
			MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i % LCD_Interface) &1);
 27c:	ed 2c       	mov	r14, r13
 27e:	f1 2c       	mov	r15, r1
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
		_delay_us(0.02); /*TH = 20ns (min = 10ns)*/
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 280:	08 e0       	ldi	r16, 0x08	; 8
 282:	10 e0       	ldi	r17, 0x00	; 0
			MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (command >> i % LCD_Interface) &1);
 284:	c9 01       	movw	r24, r18
 286:	0e 94 9c 03 	call	0x738	; 0x738 <__divmodhi4>
 28a:	a7 01       	movw	r20, r14
 28c:	02 c0       	rjmp	.+4      	; 0x292 <LCD_Write_Command+0x13a>
 28e:	55 95       	asr	r21
 290:	47 95       	ror	r20
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <LCD_Write_Command+0x136>
 296:	41 70       	andi	r20, 0x01	; 1
 298:	f9 01       	movw	r30, r18
 29a:	e0 5a       	subi	r30, 0xA0	; 160
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	60 81       	ld	r22, Z
 2a0:	89 e3       	ldi	r24, 0x39	; 57
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 2a8:	ca 94       	dec	r12
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
		_delay_us(0.02); /*TH = 20ns (min = 10ns)*/
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 2aa:	2c 2d       	mov	r18, r12
 2ac:	0c 2c       	mov	r0, r12
 2ae:	00 0c       	add	r0, r0
 2b0:	33 0b       	sbc	r19, r19
 2b2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__data_end>
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	c8 01       	movw	r24, r16
 2ba:	86 1b       	sub	r24, r22
 2bc:	97 0b       	sbc	r25, r23
 2be:	28 17       	cp	r18, r24
 2c0:	39 07       	cpc	r19, r25
 2c2:	04 f7       	brge	.-64     	; 0x284 <LCD_Write_Command+0x12c>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_Write_Command+0x16e>
 2c6:	00 00       	nop
 2c8:	00 00       	nop
		}
		_delay_us(0.3); /*TCYCE/2 = 300ns (min = 250ns)*/
	}

	_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
	MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	86 e3       	ldi	r24, 0x36	; 54
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_Write_Command+0x180>
 2d8:	00 00       	nop
	_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
	MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	86 e3       	ldi	r24, 0x36	; 54
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_Write_Command+0x190>
 2e8:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	8f e9       	ldi	r24, 0x9F	; 159
 2ec:	9f e0       	ldi	r25, 0x0F	; 15
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_Write_Command+0x196>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_Write_Command+0x19c>
 2f4:	00 00       	nop
	_delay_us(0.3); /*TCYCE/2 = 300ns (min = 250ns)*/
	_delay_ms(2); /*wait 2ms before performing any other command*/

	/*update the counter if the command was change cursor position*/
	if(command >= F00){
 2f6:	dd 20       	and	r13, r13
 2f8:	5c f4       	brge	.+22     	; 0x310 <LCD_Write_Command+0x1b8>
		if(command < S00){
 2fa:	9f eb       	ldi	r25, 0xBF	; 191
 2fc:	9d 15       	cp	r25, r13
 2fe:	18 f0       	brcs	.+6      	; 0x306 <LCD_Write_Command+0x1ae>
			counter = command - 0xF00;
 300:	d0 92 79 00 	sts	0x0079, r13	; 0x800079 <counter>
 304:	0a c0       	rjmp	.+20     	; 0x31a <LCD_Write_Command+0x1c2>
		}else{
			counter = 17 + (command - S00);
 306:	81 e5       	ldi	r24, 0x51	; 81
 308:	8d 0d       	add	r24, r13
 30a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <counter>
 30e:	05 c0       	rjmp	.+10     	; 0x31a <LCD_Write_Command+0x1c2>
		}
	}else if(command == LCD_Return_Home){
 310:	42 e0       	ldi	r20, 0x02	; 2
 312:	d4 12       	cpse	r13, r20
 314:	02 c0       	rjmp	.+4      	; 0x31a <LCD_Write_Command+0x1c2>
		counter = 0;
 316:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <counter>
	}
}
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	08 95       	ret

00000330 <LCD_Init>:
 * @Notes		- False Configuration is handled by assigning default values
 * 				  default LCDconfig->function_set = Function_Set_8bit_2line_5x8
 * 				  default LCDconfig->Display_control = Display_Control_D_On_C_On_B_On
 * 				  default LCDconfig->Entry_mode = Entry_Mode_Inc_No_S
 */
void LCD_Init(LCD_Config_t* LCDconfig){
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	00 d0       	rcall	.+0      	; 0x342 <LCD_Init+0x12>
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	8c 01       	movw	r16, r24
	int8_t i; /*iterator*/
	DIO_PinConfig_T PinConfig; /*a structure to hold configurations of pins*/
	/*initialize directions for LCD pins*/
	
	/*Control pins as output*/
	PinConfig.pinMode     = DIO_PinMode_Out;
 348:	1a 82       	std	Y+2, r1	; 0x02
	/*RS*/
	PinConfig.pinNumber   = RS;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	89 83       	std	Y+1, r24	; 0x01
	MCAL_DIO_Init(LCD_Control_Port, &PinConfig);
 34e:	be 01       	movw	r22, r28
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	86 e3       	ldi	r24, 0x36	; 54
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_DIO_Init>
	/*RW*/
	PinConfig.pinNumber   = RW;
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	89 83       	std	Y+1, r24	; 0x01
	MCAL_DIO_Init(LCD_Control_Port, &PinConfig);
 360:	be 01       	movw	r22, r28
 362:	6f 5f       	subi	r22, 0xFF	; 255
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	86 e3       	ldi	r24, 0x36	; 54
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_DIO_Init>
	/*E*/
	PinConfig.pinNumber   = E;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	89 83       	std	Y+1, r24	; 0x01
	MCAL_DIO_Init(LCD_Control_Port, &PinConfig);
 372:	be 01       	movw	r22, r28
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	86 e3       	ldi	r24, 0x36	; 54
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_DIO_Init>


	/*disable LCD*/
	MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	86 e3       	ldi	r24, 0x36	; 54
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 38c:	8f e3       	ldi	r24, 0x3F	; 63
 38e:	9c e9       	ldi	r25, 0x9C	; 156
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_Init+0x60>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_Init+0x66>
 396:	00 00       	nop
	_delay_ms(20); /*waiting until automatic initialization finishes*/

	switch(LCDconfig->function_set){
 398:	f8 01       	movw	r30, r16
 39a:	80 81       	ld	r24, Z
 39c:	88 32       	cpi	r24, 0x28	; 40
 39e:	89 f0       	breq	.+34     	; 0x3c2 <LCD_Init+0x92>
 3a0:	30 f4       	brcc	.+12     	; 0x3ae <LCD_Init+0x7e>
 3a2:	80 32       	cpi	r24, 0x20	; 32
 3a4:	71 f0       	breq	.+28     	; 0x3c2 <LCD_Init+0x92>
 3a6:	84 32       	cpi	r24, 0x24	; 36
 3a8:	09 f0       	breq	.+2      	; 0x3ac <LCD_Init+0x7c>
 3aa:	7f c0       	rjmp	.+254    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <LCD_Init+0x92>
 3ae:	84 33       	cpi	r24, 0x34	; 52
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <LCD_Init+0x84>
 3b2:	77 c0       	rjmp	.+238    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3b4:	88 33       	cpi	r24, 0x38	; 56
 3b6:	09 f4       	brne	.+2      	; 0x3ba <LCD_Init+0x8a>
 3b8:	74 c0       	rjmp	.+232    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3ba:	80 33       	cpi	r24, 0x30	; 48
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <LCD_Init+0x90>
 3be:	75 c0       	rjmp	.+234    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 3c0:	70 c0       	rjmp	.+224    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	case Function_Set_4bit_1line_5x8  :
	case Function_Set_4bit_1line_5x10 :
	case Function_Set_4bit_2line_5x8  :
		LCD_Interface = LCD_4_bit; /*set the LCD interface*/
 3c2:	84 e0       	ldi	r24, 0x04	; 4
 3c4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 3c8:	87 e0       	ldi	r24, 0x07	; 7
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0f 2e       	mov	r0, r31
 3ce:	f7 e0       	ldi	r31, 0x07	; 7
 3d0:	ff 2e       	mov	r15, r31
 3d2:	f0 2d       	mov	r31, r0
		/*Sets the LCD to 4-bit operation*/
		/*1. Configure LCD High pins as output*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 3d4:	68 94       	set
 3d6:	cc 24       	eor	r12, r12
 3d8:	c3 f8       	bld	r12, 3
 3da:	d1 2c       	mov	r13, r1
			PinConfig.pinNumber   = LCD_DataPins[i];
 3dc:	fc 01       	movw	r30, r24
 3de:	e0 5a       	subi	r30, 0xA0	; 160
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	80 81       	ld	r24, Z
 3e4:	89 83       	std	Y+1, r24	; 0x01
			MCAL_DIO_Init(LCD_Data_Port, &PinConfig);
 3e6:	be 01       	movw	r22, r28
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	89 e3       	ldi	r24, 0x39	; 57
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_DIO_Init>
 3f4:	fa 94       	dec	r15
	case Function_Set_4bit_1line_5x10 :
	case Function_Set_4bit_2line_5x8  :
		LCD_Interface = LCD_4_bit; /*set the LCD interface*/
		/*Sets the LCD to 4-bit operation*/
		/*1. Configure LCD High pins as output*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 3f6:	8f 2d       	mov	r24, r15
 3f8:	0f 2c       	mov	r0, r15
 3fa:	00 0c       	add	r0, r0
 3fc:	99 0b       	sbc	r25, r25
 3fe:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 402:	a6 01       	movw	r20, r12
 404:	42 1b       	sub	r20, r18
 406:	51 09       	sbc	r21, r1
 408:	84 17       	cp	r24, r20
 40a:	95 07       	cpc	r25, r21
 40c:	3c f7       	brge	.-50     	; 0x3dc <LCD_Init+0xac>
			PinConfig.pinNumber   = LCD_DataPins[i];
			MCAL_DIO_Init(LCD_Data_Port, &PinConfig);
		}
		/*2. then send the command*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 40e:	48 30       	cpi	r20, 0x08	; 8
 410:	51 05       	cpc	r21, r1
 412:	4c f5       	brge	.+82     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0f 2e       	mov	r0, r31
 41a:	f7 e0       	ldi	r31, 0x07	; 7
 41c:	df 2e       	mov	r13, r31
 41e:	f0 2d       	mov	r31, r0
 420:	68 94       	set
 422:	ee 24       	eor	r14, r14
 424:	e3 f8       	bld	r14, 3
 426:	f1 2c       	mov	r15, r1
			MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (LCDconfig->function_set >> i) &1);
 428:	f8 01       	movw	r30, r16
 42a:	40 81       	ld	r20, Z
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	08 2e       	mov	r0, r24
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	55 95       	asr	r21
 434:	47 95       	ror	r20
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	41 70       	andi	r20, 0x01	; 1
 43c:	fc 01       	movw	r30, r24
 43e:	e0 5a       	subi	r30, 0xA0	; 160
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	60 81       	ld	r22, Z
 444:	89 e3       	ldi	r24, 0x39	; 57
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 44c:	da 94       	dec	r13
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
			PinConfig.pinNumber   = LCD_DataPins[i];
			MCAL_DIO_Init(LCD_Data_Port, &PinConfig);
		}
		/*2. then send the command*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 44e:	8d 2d       	mov	r24, r13
 450:	0d 2c       	mov	r0, r13
 452:	00 0c       	add	r0, r0
 454:	99 0b       	sbc	r25, r25
 456:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 45a:	a7 01       	movw	r20, r14
 45c:	42 1b       	sub	r20, r18
 45e:	51 09       	sbc	r21, r1
 460:	84 17       	cp	r24, r20
 462:	95 07       	cpc	r25, r21
 464:	0c f7       	brge	.-62     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (LCDconfig->function_set >> i) &1);
		}

		MCAL_DIO_WritePin(LCD_Control_Port, RS, DIO_PinValue_Low);/*Instruction*/
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	86 e3       	ldi	r24, 0x36	; 54
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
		MCAL_DIO_WritePin(LCD_Control_Port, RW, DIO_PinValue_Low);/*Write*/
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	62 e0       	ldi	r22, 0x02	; 2
 476:	86 e3       	ldi	r24, 0x36	; 54
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47e:	00 00       	nop

		_delay_us(0.04); /*TAS = 50ns (min= 40ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	86 e3       	ldi	r24, 0x36	; 54
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	63 e0       	ldi	r22, 0x03	; 3
 494:	86 e3       	ldi	r24, 0x36	; 54
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
 4a0:	0a c0       	rjmp	.+20     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		/*only this instruction completes with one write.*/
		break;
	case Function_Set_8bit_1line_5x8 :
	case Function_Set_8bit_1line_5x10:
	case Function_Set_8bit_2line_5x8 :
		LCD_Interface = LCD_8_bit;
 4a2:	88 e0       	ldi	r24, 0x08	; 8
 4a4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
		break;
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	default:
		LCD_Interface = LCD_8_bit;
 4aa:	88 e0       	ldi	r24, 0x08	; 8
 4ac:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
		LCDconfig->function_set = Function_Set_8bit_2line_5x8;
 4b0:	88 e3       	ldi	r24, 0x38	; 56
 4b2:	f8 01       	movw	r30, r16
 4b4:	80 83       	st	Z, r24
		break;
	}
	switch (LCDconfig->Display_control) {
 4b6:	f8 01       	movw	r30, r16
 4b8:	81 81       	ldd	r24, Z+1	; 0x01
 4ba:	88 30       	cpi	r24, 0x08	; 8
 4bc:	39 f0       	breq	.+14     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4be:	18 f0       	brcs	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c0:	8c 50       	subi	r24, 0x0C	; 12
 4c2:	84 30       	cpi	r24, 0x04	; 4
 4c4:	18 f0       	brcs	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		/*Correct Initialization*/
		/*do nothing*/
		break;
	default:
		/*false initialization*/
		LCDconfig->Display_control = Display_Control_D_On_C_On_B_On;
 4c6:	8f e0       	ldi	r24, 0x0F	; 15
 4c8:	f8 01       	movw	r30, r16
 4ca:	81 83       	std	Z+1, r24	; 0x01
		break;
	}

	switch (LCDconfig->Entry_mode) {
 4cc:	f8 01       	movw	r30, r16
 4ce:	82 81       	ldd	r24, Z+2	; 0x02
 4d0:	84 50       	subi	r24, 0x04	; 4
 4d2:	84 30       	cpi	r24, 0x04	; 4
 4d4:	10 f0       	brcs	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
		/*Correct Initialization*/
		/*do nothing*/
		break;
	default:
		/*false initialization*/
		LCDconfig->Entry_mode = Entry_Mode_Inc_No_S;
 4d6:	86 e0       	ldi	r24, 0x06	; 6
 4d8:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
	/*after the LCD is ready Start Sending the Commands*/
	LCD_Write_Command(LCDconfig->function_set);
 4da:	f8 01       	movw	r30, r16
 4dc:	80 81       	ld	r24, Z
 4de:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_Command>
	LCD_Write_Command(LCDconfig->Entry_mode);
 4e2:	f8 01       	movw	r30, r16
 4e4:	82 81       	ldd	r24, Z+2	; 0x02
 4e6:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_Command>
	LCD_Write_Command(LCDconfig->Display_control);
 4ea:	f8 01       	movw	r30, r16
 4ec:	81 81       	ldd	r24, Z+1	; 0x01
 4ee:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_Command>
	LCD_Write_Command(LCD_Clear);
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_Command>
	LCD_Write_Command(LCD_Return_Home);
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_Command>
}
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	08 95       	ret

00000514 <LCD_SendCharacter>:
 * @brief		- Send a character to be displayed on the LCD
 * @Param [in]	- c : the character to be displayed
 * @returnValue	- None
 * @Notes		- None
 */
void LCD_SendCharacter(char c){
 514:	cf 92       	push	r12
 516:	df 92       	push	r13
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	00 d0       	rcall	.+0      	; 0x526 <LCD_SendCharacter+0x12>
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	d8 2e       	mov	r13, r24
	int8_t i; /*iterator*/
	DIO_PinConfig_T pinConfig; /*a structure to hold configurations of pins*/

	if(counter++ == LCD_Line_Length){ /*first line filled*/
 52c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <counter>
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	98 0f       	add	r25, r24
 534:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <counter>
 538:	80 31       	cpi	r24, 0x10	; 16
 53a:	31 f4       	brne	.+12     	; 0x548 <LCD_SendCharacter+0x34>
		DDRAM_Address = S00;
 53c:	80 ec       	ldi	r24, 0xC0	; 192
 53e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <DDRAM_Address>
		LCD_Write_Command(DDRAM_Address);
 542:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_Command>
 546:	0a c0       	rjmp	.+20     	; 0x55c <LCD_SendCharacter+0x48>
	}else if(counter > LCD_Line_Length * 2){ /*both lines are filled*/
 548:	91 32       	cpi	r25, 0x21	; 33
 54a:	40 f0       	brcs	.+16     	; 0x55c <LCD_SendCharacter+0x48>
		/*Clear Screen*/
		LCD_Write_Command(LCD_Clear);
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_Command>
		LCD_Write_Command(LCD_Return_Home);
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_Command>
		counter = 0;
 558:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <counter>
	}
	/*Change direction of data bins to be output*/
	pinConfig.pinMode     = DIO_PinMode_Out;
 55c:	1a 82       	std	Y+2, r1	; 0x02
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 55e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 562:	88 e0       	ldi	r24, 0x08	; 8
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	82 1b       	sub	r24, r18
 568:	91 09       	sbc	r25, r1
 56a:	08 97       	sbiw	r24, 0x08	; 8
 56c:	04 f5       	brge	.+64     	; 0x5ae <LCD_SendCharacter+0x9a>
 56e:	87 e0       	ldi	r24, 0x07	; 7
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	17 e0       	ldi	r17, 0x07	; 7
 574:	68 94       	set
 576:	ee 24       	eor	r14, r14
 578:	e3 f8       	bld	r14, 3
 57a:	f1 2c       	mov	r15, r1
		pinConfig.pinNumber   = LCD_DataPins[i];
 57c:	fc 01       	movw	r30, r24
 57e:	e0 5a       	subi	r30, 0xA0	; 160
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	80 81       	ld	r24, Z
 584:	89 83       	std	Y+1, r24	; 0x01
		MCAL_DIO_Init(LCD_Data_Port, &pinConfig);
 586:	be 01       	movw	r22, r28
 588:	6f 5f       	subi	r22, 0xFF	; 255
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	89 e3       	ldi	r24, 0x39	; 57
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_DIO_Init>
 594:	11 50       	subi	r17, 0x01	; 1
		LCD_Write_Command(LCD_Return_Home);
		counter = 0;
	}
	/*Change direction of data bins to be output*/
	pinConfig.pinMode     = DIO_PinMode_Out;
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 596:	81 2f       	mov	r24, r17
 598:	01 2e       	mov	r0, r17
 59a:	00 0c       	add	r0, r0
 59c:	99 0b       	sbc	r25, r25
 59e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 5a2:	a7 01       	movw	r20, r14
 5a4:	42 1b       	sub	r20, r18
 5a6:	51 09       	sbc	r21, r1
 5a8:	84 17       	cp	r24, r20
 5aa:	95 07       	cpc	r25, r21
 5ac:	3c f7       	brge	.-50     	; 0x57c <LCD_SendCharacter+0x68>
		pinConfig.pinNumber   = LCD_DataPins[i];
		MCAL_DIO_Init(LCD_Data_Port, &pinConfig);
	}

	MCAL_DIO_WritePin(LCD_Control_Port, RS, DIO_PinValue_High);/*data*/
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	86 e3       	ldi	r24, 0x36	; 54
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
	MCAL_DIO_WritePin(LCD_Control_Port, RW, DIO_PinValue_Low);/*Write*/
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	62 e0       	ldi	r22, 0x02	; 2
 5be:	86 e3       	ldi	r24, 0x36	; 54
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>

	/*write the character*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 5c6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 5ca:	88 e0       	ldi	r24, 0x08	; 8
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	82 1b       	sub	r24, r18
 5d0:	91 09       	sbc	r25, r1
 5d2:	08 97       	sbiw	r24, 0x08	; 8
 5d4:	3c f5       	brge	.+78     	; 0x624 <LCD_SendCharacter+0x110>
 5d6:	87 e0       	ldi	r24, 0x07	; 7
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0f 2e       	mov	r0, r31
 5dc:	f7 e0       	ldi	r31, 0x07	; 7
 5de:	cf 2e       	mov	r12, r31
 5e0:	f0 2d       	mov	r31, r0
		MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i) &1);
 5e2:	ed 2c       	mov	r14, r13
 5e4:	f1 2c       	mov	r15, r1

	MCAL_DIO_WritePin(LCD_Control_Port, RS, DIO_PinValue_High);/*data*/
	MCAL_DIO_WritePin(LCD_Control_Port, RW, DIO_PinValue_Low);/*Write*/

	/*write the character*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 5e6:	08 e0       	ldi	r16, 0x08	; 8
 5e8:	10 e0       	ldi	r17, 0x00	; 0
		MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i) &1);
 5ea:	a7 01       	movw	r20, r14
 5ec:	08 2e       	mov	r0, r24
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <LCD_SendCharacter+0xe0>
 5f0:	55 95       	asr	r21
 5f2:	47 95       	ror	r20
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <LCD_SendCharacter+0xdc>
 5f8:	41 70       	andi	r20, 0x01	; 1
 5fa:	fc 01       	movw	r30, r24
 5fc:	e0 5a       	subi	r30, 0xA0	; 160
 5fe:	ff 4f       	sbci	r31, 0xFF	; 255
 600:	60 81       	ld	r22, Z
 602:	89 e3       	ldi	r24, 0x39	; 57
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 60a:	ca 94       	dec	r12

	MCAL_DIO_WritePin(LCD_Control_Port, RS, DIO_PinValue_High);/*data*/
	MCAL_DIO_WritePin(LCD_Control_Port, RW, DIO_PinValue_Low);/*Write*/

	/*write the character*/
	for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 60c:	8c 2d       	mov	r24, r12
 60e:	0c 2c       	mov	r0, r12
 610:	00 0c       	add	r0, r0
 612:	99 0b       	sbc	r25, r25
 614:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 618:	a8 01       	movw	r20, r16
 61a:	42 1b       	sub	r20, r18
 61c:	51 09       	sbc	r21, r1
 61e:	84 17       	cp	r24, r20
 620:	95 07       	cpc	r25, r21
 622:	1c f7       	brge	.-58     	; 0x5ea <LCD_SendCharacter+0xd6>
		MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i) &1);
	}
	if(LCD_Interface == LCD_4_bit){
 624:	24 30       	cpi	r18, 0x04	; 4
 626:	09 f0       	breq	.+2      	; 0x62a <LCD_SendCharacter+0x116>
 628:	47 c0       	rjmp	.+142    	; 0x6b8 <LCD_SendCharacter+0x1a4>
 62a:	00 00       	nop
		_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	63 e0       	ldi	r22, 0x03	; 3
 630:	86 e3       	ldi	r24, 0x36	; 54
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 638:	00 c0       	rjmp	.+0      	; 0x63a <LCD_SendCharacter+0x126>
 63a:	00 00       	nop
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
 63c:	40 e0       	ldi	r20, 0x00	; 0
 63e:	63 e0       	ldi	r22, 0x03	; 3
 640:	86 e3       	ldi	r24, 0x36	; 54
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 648:	00 00       	nop
		_delay_us(0.02); /*TH = 20ns (min = 10ns)*/
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 64a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__data_end>
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	88 e0       	ldi	r24, 0x08	; 8
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	86 1b       	sub	r24, r22
 656:	97 0b       	sbc	r25, r23
 658:	08 97       	sbiw	r24, 0x08	; 8
 65a:	64 f5       	brge	.+88     	; 0x6b4 <LCD_SendCharacter+0x1a0>
 65c:	27 e0       	ldi	r18, 0x07	; 7
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	0f 2e       	mov	r0, r31
 662:	f7 e0       	ldi	r31, 0x07	; 7
 664:	cf 2e       	mov	r12, r31
 666:	f0 2d       	mov	r31, r0
			MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i % LCD_Interface) &1);
 668:	0d 2d       	mov	r16, r13
 66a:	10 e0       	ldi	r17, 0x00	; 0
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
		_delay_us(0.02); /*TH = 20ns (min = 10ns)*/
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 66c:	68 94       	set
 66e:	ee 24       	eor	r14, r14
 670:	e3 f8       	bld	r14, 3
 672:	f1 2c       	mov	r15, r1
			MCAL_DIO_WritePin(LCD_Data_Port, LCD_DataPins[i], (c >> i % LCD_Interface) &1);
 674:	c9 01       	movw	r24, r18
 676:	0e 94 9c 03 	call	0x738	; 0x738 <__divmodhi4>
 67a:	a8 01       	movw	r20, r16
 67c:	02 c0       	rjmp	.+4      	; 0x682 <LCD_SendCharacter+0x16e>
 67e:	55 95       	asr	r21
 680:	47 95       	ror	r20
 682:	8a 95       	dec	r24
 684:	e2 f7       	brpl	.-8      	; 0x67e <LCD_SendCharacter+0x16a>
 686:	41 70       	andi	r20, 0x01	; 1
 688:	f9 01       	movw	r30, r18
 68a:	e0 5a       	subi	r30, 0xA0	; 160
 68c:	ff 4f       	sbci	r31, 0xFF	; 255
 68e:	60 81       	ld	r22, Z
 690:	89 e3       	ldi	r24, 0x39	; 57
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 698:	ca 94       	dec	r12
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
		_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
		MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
		_delay_us(0.02); /*TH = 20ns (min = 10ns)*/
		/*send lower nibble*/
		for(i = LCD_TotDataPins - 1; i >= LCD_TotDataPins - LCD_Interface;i--){
 69a:	2c 2d       	mov	r18, r12
 69c:	0c 2c       	mov	r0, r12
 69e:	00 0c       	add	r0, r0
 6a0:	33 0b       	sbc	r19, r19
 6a2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__data_end>
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	c7 01       	movw	r24, r14
 6aa:	86 1b       	sub	r24, r22
 6ac:	97 0b       	sbc	r25, r23
 6ae:	28 17       	cp	r18, r24
 6b0:	39 07       	cpc	r19, r25
 6b2:	04 f7       	brge	.-64     	; 0x674 <LCD_SendCharacter+0x160>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <LCD_SendCharacter+0x1a2>
 6b6:	00 00       	nop
 6b8:	00 00       	nop
		}
		_delay_us(0.3); /*TCYCE/2 = 300ns (min = 250ns)*/
	}

	_delay_us(0.05); /*TAS = 50ns (min = 40ns)*/
	MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_High);/*Enable the LCD*/
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	63 e0       	ldi	r22, 0x03	; 3
 6be:	86 e3       	ldi	r24, 0x36	; 54
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_SendCharacter+0x1b4>
 6c8:	00 00       	nop
	_delay_us(0.3); /*TCYCE / 2 = 300ns (min = 250ns)*/
	MCAL_DIO_WritePin(LCD_Control_Port, E, DIO_PinValue_Low);/*disable the LCD*/
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	63 e0       	ldi	r22, 0x03	; 3
 6ce:	86 e3       	ldi	r24, 0x36	; 54
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 8f 00 	call	0x11e	; 0x11e <MCAL_DIO_WritePin>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <LCD_SendCharacter+0x1c4>
 6d8:	00 00       	nop
	_delay_us(0.3); /*TCYCE/2 = 300ns (min = 250ns)*/
}
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	08 95       	ret

000006f0 <LCD_Write_Data>:
 * @brief		- Write a String on the LCD
 * @Param [in]	- input : a pointer to the first character in the string to be written
 * @returnValue	- None
 * @Notes		- None
 */
void LCD_Write_Data(char* input){
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	ec 01       	movw	r28, r24
	while(*input){
 6f6:	88 81       	ld	r24, Y
 6f8:	88 23       	and	r24, r24
 6fa:	31 f0       	breq	.+12     	; 0x708 <LCD_Write_Data+0x18>
 6fc:	21 96       	adiw	r28, 0x01	; 1
		LCD_SendCharacter(*(input++));
 6fe:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_SendCharacter>
 * @Param [in]	- input : a pointer to the first character in the string to be written
 * @returnValue	- None
 * @Notes		- None
 */
void LCD_Write_Data(char* input){
	while(*input){
 702:	89 91       	ld	r24, Y+
 704:	81 11       	cpse	r24, r1
 706:	fb cf       	rjmp	.-10     	; 0x6fe <LCD_Write_Data+0xe>
		LCD_SendCharacter(*(input++));
	}
}
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <main>:

#include "LCD.h"


int main(void)
{
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	00 d0       	rcall	.+0      	; 0x714 <main+0x6>
 714:	1f 92       	push	r1
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
	LCD_Config_t LCD_Config;
	LCD_Config.Display_control = Display_Control_D_On_C_On_B_On;
 71a:	8f e0       	ldi	r24, 0x0F	; 15
 71c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_Config.Entry_mode      = Entry_Mode_Inc_No_S;
 71e:	86 e0       	ldi	r24, 0x06	; 6
 720:	8b 83       	std	Y+3, r24	; 0x03
	LCD_Config.function_set    = Function_Set_4bit_2line_5x8;
 722:	88 e2       	ldi	r24, 0x28	; 40
 724:	89 83       	std	Y+1, r24	; 0x01
	LCD_Init(&LCD_Config);
 726:	ce 01       	movw	r24, r28
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
	
	LCD_Write_Data("Learn-in-depth!");
 72e:	88 e6       	ldi	r24, 0x68	; 104
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_Write_Data>
 736:	ff cf       	rjmp	.-2      	; 0x736 <main+0x28>

00000738 <__divmodhi4>:
 738:	97 fb       	bst	r25, 7
 73a:	07 2e       	mov	r0, r23
 73c:	16 f4       	brtc	.+4      	; 0x742 <__divmodhi4+0xa>
 73e:	00 94       	com	r0
 740:	07 d0       	rcall	.+14     	; 0x750 <__divmodhi4_neg1>
 742:	77 fd       	sbrc	r23, 7
 744:	09 d0       	rcall	.+18     	; 0x758 <__divmodhi4_neg2>
 746:	0e 94 b0 03 	call	0x760	; 0x760 <__udivmodhi4>
 74a:	07 fc       	sbrc	r0, 7
 74c:	05 d0       	rcall	.+10     	; 0x758 <__divmodhi4_neg2>
 74e:	3e f4       	brtc	.+14     	; 0x75e <__divmodhi4_exit>

00000750 <__divmodhi4_neg1>:
 750:	90 95       	com	r25
 752:	81 95       	neg	r24
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	08 95       	ret

00000758 <__divmodhi4_neg2>:
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255

0000075e <__divmodhi4_exit>:
 75e:	08 95       	ret

00000760 <__udivmodhi4>:
 760:	aa 1b       	sub	r26, r26
 762:	bb 1b       	sub	r27, r27
 764:	51 e1       	ldi	r21, 0x11	; 17
 766:	07 c0       	rjmp	.+14     	; 0x776 <__udivmodhi4_ep>

00000768 <__udivmodhi4_loop>:
 768:	aa 1f       	adc	r26, r26
 76a:	bb 1f       	adc	r27, r27
 76c:	a6 17       	cp	r26, r22
 76e:	b7 07       	cpc	r27, r23
 770:	10 f0       	brcs	.+4      	; 0x776 <__udivmodhi4_ep>
 772:	a6 1b       	sub	r26, r22
 774:	b7 0b       	sbc	r27, r23

00000776 <__udivmodhi4_ep>:
 776:	88 1f       	adc	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	5a 95       	dec	r21
 77c:	a9 f7       	brne	.-22     	; 0x768 <__udivmodhi4_loop>
 77e:	80 95       	com	r24
 780:	90 95       	com	r25
 782:	bc 01       	movw	r22, r24
 784:	cd 01       	movw	r24, r26
 786:	08 95       	ret

00000788 <_exit>:
 788:	f8 94       	cli

0000078a <__stop_program>:
 78a:	ff cf       	rjmp	.-2      	; 0x78a <__stop_program>
