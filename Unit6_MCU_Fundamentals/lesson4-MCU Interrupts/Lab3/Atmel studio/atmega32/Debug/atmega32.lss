
atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ed  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bd  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000324  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000185a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_1>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EXTI_Init>:

void EXTI_Init(void){
	/*Interrupts Configuration*/
	/*1. INT0*/
	/*Any logical change on INT0 generates an interrupt request*/
	SET_BIT(MCUCR , 0);
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	85 bf       	out	0x35, r24	; 53
	RESET_BIT(MCUCR , 1);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	85 bf       	out	0x35, r24	; 53
	/*2. INT1*/
	/*The rising edge of INT1 generates an interrupt request*/
	SET_BIT(MCUCR , 2);
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR , 3);
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	88 60       	ori	r24, 0x08	; 8
  82:	85 bf       	out	0x35, r24	; 53
	
	/*3. INT2*/
	/*The failing edge of INT1 generates an interrupt request*/
	RESET_BIT(MCUCSR , 6);
  84:	84 b7       	in	r24, 0x34	; 52
  86:	8f 7b       	andi	r24, 0xBF	; 191
  88:	84 bf       	out	0x34, r24	; 52
	/*enable Interrupts*/
	SET_BIT(SREG, I_BIT); /*SREG-I enable
  8a:	8f b7       	in	r24, 0x3f	; 63
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	8f bf       	out	0x3f, r24	; 63
 	                        enable Global Interrupts*/
	SET_BIT(GICR, PIN5);  /*enable INT0 mask*/
  90:	8b b7       	in	r24, 0x3b	; 59
  92:	80 62       	ori	r24, 0x20	; 32
  94:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR, PIN6);  /*enable INT1 mask*/
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR, PIN7);  /*enable INT2 mask*/
  9c:	8b b7       	in	r24, 0x3b	; 59
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	8b bf       	out	0x3b, r24	; 59
  a2:	08 95       	ret

000000a4 <GPIO_Init>:
}
void GPIO_Init(void){
	/*PortD pins(5,6,7) as output*/
	SET_BIT(DDRD, PIN5);  /*D5 as output*/
  a4:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(DDRD, PIN6);  /*D6 as output*/
  a6:	8e 9a       	sbi	0x11, 6	; 17
	SET_BIT(DDRD, PIN7);  /*D7 as output*/
  a8:	8f 9a       	sbi	0x11, 7	; 17
  aa:	08 95       	ret

000000ac <main>:
void EXTI_Init(void);
void GPIO_Init(void);

int main(void)
{
	GPIO_Init();
  ac:	0e 94 52 00 	call	0xa4	; 0xa4 <GPIO_Init>
	EXTI_Init();
  b0:	0e 94 36 00 	call	0x6c	; 0x6c <EXTI_Init>
	while (1) 
    {
		/*make sure that all PINs are output LOW*/
		RESET_BIT(PORTD, PIN5);  /*write 0 on PORTD PIN5*/
  b4:	95 98       	cbi	0x12, 5	; 18
		RESET_BIT(PORTD, PIN6);  /*write 0 on PORTD PIN6*/
  b6:	96 98       	cbi	0x12, 6	; 18
		RESET_BIT(PORTD, PIN7);  /*write 0 on PORTD PIN7*/
  b8:	97 98       	cbi	0x12, 7	; 18
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <main+0x8>

000000bc <__vector_1>:
	SET_BIT(DDRD, PIN5);  /*D5 as output*/
	SET_BIT(DDRD, PIN6);  /*D6 as output*/
	SET_BIT(DDRD, PIN7);  /*D7 as output*/
}
/*Interrupt handler for External Interrupt0(INT0)*/
ISR(INT0_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	SET_BIT(PORTD, PIN5);  /*write 1 on PORTD PIN5*/
  cc:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f e3       	ldi	r18, 0x3F	; 63
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <__vector_1+0x18>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__vector_1+0x22>
  de:	00 00       	nop
	_delay_ms(1000); /*wait for a while to observe the change*/
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_2>:
/*Interrupt handler for External Interrupt1(INT1)*/
ISR(INT1_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	SET_BIT(PORTD, PIN6);  /*write 1 on PORTD PIN6*/
 100:	96 9a       	sbi	0x12, 6	; 18
 102:	2f e3       	ldi	r18, 0x3F	; 63
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <__vector_2+0x18>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_2+0x22>
 112:	00 00       	nop
	_delay_ms(1000); /*wait for a while to observe the change*/
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_3>:
/*Interrupt handler for External Interrupt2(INT2)*/
ISR(INT2_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
	SET_BIT(PORTD, PIN7);  /*write 1 on PORTD PIN7*/
 134:	97 9a       	sbi	0x12, 7	; 18
 136:	2f e3       	ldi	r18, 0x3F	; 63
 138:	8d e0       	ldi	r24, 0x0D	; 13
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <__vector_3+0x18>
 144:	00 c0       	rjmp	.+0      	; 0x146 <__vector_3+0x22>
 146:	00 00       	nop
	_delay_ms(1000); /*wait for a while to observe the change*/
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
